package regsrv

import (
	"crypto/tls"
	"crypto/x509"
	"io/ioutil"

	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials"
	"google.golang.org/grpc/metadata"
	"golang.org/x/net/context"

	log "github.com/sirupsen/logrus"
	pb "github.com/brocaar/lora-app-server/api"
)

// RegisterBoard makes a call to register a gateway and get info from a master LoRa app server
func RegisterBoard(serialNumber string) (*pb.MasterRegisterBoardResponse, error) {
	regSrvCfg := GetConfig()

	cert, err := tls.LoadX509KeyPair(regSrvCfg.TLSCert, regSrvCfg.TLSKey)
	if err != nil {
		log.WithFields(log.Fields{
			"cert": regSrvCfg.TLSCert,
			"key":  regSrvCfg.TLSKey,
		}).Warn("key pair load error")
		return nil, err
	}

	clientConfig := &tls.Config{
		Certificates: []tls.Certificate{cert},
	}
	if regSrvCfg.CACert != "" {
		rawCaCert, err := ioutil.ReadFile(regSrvCfg.CACert)
		if err != nil {
			log.WithField("ca", regSrvCfg.CACert).Warn("failed to read ca certificate")
			return nil, err
		}

		caCertPool := x509.NewCertPool()
		if !caCertPool.AppendCertsFromPEM(rawCaCert) {
			log.WithField("ca", regSrvCfg.CACert).Warn("failed to append ca certificate")
			return nil, err
		}

		clientConfig.RootCAs = caCertPool
	}

	grpcDialOpts := []grpc.DialOption{grpc.WithTransportCredentials(credentials.NewTLS(clientConfig))}
	conn, err := grpc.Dial(regSrvCfg.RegServer, grpcDialOpts...)
	if err != nil {
		log.WithField("regserver", regSrvCfg.RegServer).Warn("failed to dial regserver")
		return nil, err
	}
	defer conn.Close()

	// assuming the App Server at conn has the same interface
	intAPI := pb.NewInternalServiceClient(conn)
	intAPIres, err := intAPI.Login(context.Background(), &pb.LoginRequest{Username: regSrvCfg.Username, Password: regSrvCfg.Password})
	if err != nil {
		log.WithFields(log.Fields{
			"username": regSrvCfg.Username,
		}).Warn("Failed to login user on master server")
		return nil, err
	}
	jwt := intAPIres.Jwt

	ctx := context.Background()
	ctx = metadata.NewOutgoingContext(ctx, metadata.MD{
		"authorization": []string{jwt},
	})

	gwAPI := pb.NewGatewayServiceClient(conn)
	masterRegBoardRes, err := gwAPI.MasterRegisterBoard(ctx, &pb.MasterRegisterBoardRequest{SerialNumber: serialNumber, HostServer: regSrvCfg.HostServer})
	if err != nil {
		log.WithFields(log.Fields{
			"sn": serialNumber,
			"hostserver":  regSrvCfg.HostServer,
		}).Warn("Failed MasterRegisterBoard call on master server")
		return nil, err
	}

	return masterRegBoardRes, nil
}
