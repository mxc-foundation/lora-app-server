stages: 
  - test # unit tests and so on (native 2mins w. conflicts or dockerized 5mins w. clean env)
  - build # compile code without creating an image (should use buildserver native as only takes 7-10mins)
  - release-private # store the prev. compile image in gitlab registry for buildserver deployments (just tagging above image 2mins)
  - release-public  # store the same image in dockerhub registry for live server deployments (also just tagging above image 2mins)
  - deploy # deploy the same image on either, buildserver for QA or live servers for live (deploy via ssh needed to start up all containers 5mins)

react_test_frontend:
  image: golang:1.12-alpine
  stage: test
  environment:
    name: development
  before_script:
    - apk add --no-cache ca-certificates make git bash protobuf protobuf-dev nodejs nodejs-npm
  script:
    - cd ui
    - npm install
    - npm test
  allow_failure: true
  except:
    - master
    - develop
    - buildserver
    - /crowdin/
    - /l10n/
  tags:
    - kubernetes

syntax_test_backend:
  image: golang:1.12-alpine
  stage: test
  environment:
    name: development
  before_script: 
    - apk add --no-cache ca-certificates make git bash protobuf protobuf-dev nodejs nodejs-npm
    - go get -u golang.org/x/lint/golint
  script:
    - golint -set_exit_status $(go list ./... | grep -v "migrations" | grep -v "static" | grep -v "integration") | grep -v "underscore in package name"
  allow_failure: true
  except:
    - master
    - develop
    - buildserver
    - /crowdin/
    - /l10n/
  tags:
    - kubernetes

.security_test_backend:
  image: golang:1.12-alpine
  stage: test
  environment:
    name: development
  before_script: 
    - apk add --no-cache ca-certificates make git bash protobuf protobuf-dev nodejs nodejs-npm
    - go get github.com/securego/gosec/cmd/gosec
  script:
    - gosec ./...
  allow_failure: true
  except:
    - master
    - develop
    - buildserver
    - /crowdin/
    - /l10n/
  tags:
    - kubernetes
    
variables:
  SERVICE_NAME: $APP_NAME
  CONTAINER_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  DOCKER_USER: $DOCKER_USER
  DOCKER_PASS: $DOCKER_PASS
  DOCKER_REPO: $DOCKER_REPO
  DOCKER_URL: $DOCKER_URL

build_image: 
  stage: build
  image: docker:19.03.0
  before_script: 
    - apk add --no-cache ca-certificates make git bash
  services:
    - docker:19.03.0-dind
  variables:
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ""
    VERSION: ${git describe --tags --always --long |sed -e "s/^v//"}
  script:
    - echo $CONTAINER_IMAGE
    - echo $VERSION
    - echo $SERVICE_NAME
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --pull -t $CONTAINER_IMAGE .
    - docker push $CONTAINER_IMAGE
  except:
    - /crowdin/
    - /l10n/
  tags:
    - kubernetes

release_image_gitlab:
  stage: release-private
  image: docker:19.03.0
  before_script: 
    - apk add --no-cache ca-certificates make git bash
  services:
    - docker:19.03.0-dind
  variables:
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ""
    VERSION: ${git describe --tags --always --long |sed -e "s/^v//"}
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $CONTAINER_IMAGE
    - echo $CONTAINER_IMAGE
    - echo $VERSION
    - echo $SERVICE_NAME
    - docker tag $CONTAINER_IMAGE $CI_REGISTRY_IMAGE:$SERVICE_NAME.$VERSION
    - docker push $CI_REGISTRY_IMAGE:$SERVICE_NAME.$VERSION
  only:
    - master
    - develop 
    - buildserver
  tags:
    - kubernetes

release_image_dockerhub:
  stage: release-public
  image: docker:19.03.0
  before_script: 
    - apk add --no-cache ca-certificates make git bash
  services:
    - docker:19.03.0-dind
  variables:
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ""
    VERSION: ${git describe --tags --always --long |sed -e "s/^v//"}
  script:
    - echo $CONTAINER_IMAGE
    - echo $VERSION
    - echo $SERVICE_NAME
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - export VERSION=$(git describe --tags --always --long |sed -e "s/^v//")
    - docker pull $CONTAINER_IMAGE
    - docker login -u $DOCKER_USER -p $DOCKER_PASS $DOCKER_URL
    - docker tag $CONTAINER_IMAGE $DOCKER_REPO:$SERVICE_NAME.$VERSION
    - docker push $DOCKER_REPO:$SERVICE_NAME.$VERSION
  only:
    - tags
    - master
  tags:
    - kubernetes

trigger_qa_deploy:
  stage: deploy
  image: alpine
  environment:
    name: staging
    url: $STAGINGURL
  before_script: 
    - apk add --no-cache curl
  script:
    - "curl -X POST -F token=$TRIGGERTOKEN -F ref=$TRIGGERBRANCH https://gitlab.com/api/v4/projects/13773920/trigger/pipeline"
  only:
    - buildserver
  tags:
    - buildserver
