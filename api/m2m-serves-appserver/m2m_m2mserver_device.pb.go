// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.2
// source: m2m_m2mserver_device.proto

package m2m_serves_appserver

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DeviceMode int32

const (
	DeviceMode_DV_INACTIVE              DeviceMode = 0
	DeviceMode_DV_FREE_GATEWAYS_LIMITED DeviceMode = 1
	DeviceMode_DV_WHOLE_NETWORK         DeviceMode = 2
	DeviceMode_DV_DELETED               DeviceMode = 3
)

// Enum value maps for DeviceMode.
var (
	DeviceMode_name = map[int32]string{
		0: "DV_INACTIVE",
		1: "DV_FREE_GATEWAYS_LIMITED",
		2: "DV_WHOLE_NETWORK",
		3: "DV_DELETED",
	}
	DeviceMode_value = map[string]int32{
		"DV_INACTIVE":              0,
		"DV_FREE_GATEWAYS_LIMITED": 1,
		"DV_WHOLE_NETWORK":         2,
		"DV_DELETED":               3,
	}
)

func (x DeviceMode) Enum() *DeviceMode {
	p := new(DeviceMode)
	*p = x
	return p
}

func (x DeviceMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceMode) Descriptor() protoreflect.EnumDescriptor {
	return file_m2m_m2mserver_device_proto_enumTypes[0].Descriptor()
}

func (DeviceMode) Type() protoreflect.EnumType {
	return &file_m2m_m2mserver_device_proto_enumTypes[0]
}

func (x DeviceMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceMode.Descriptor instead.
func (DeviceMode) EnumDescriptor() ([]byte, []int) {
	return file_m2m_m2mserver_device_proto_rawDescGZIP(), []int{0}
}

type GetDeviceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId  int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetDeviceListRequest) Reset() {
	*x = GetDeviceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_device_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceListRequest) ProtoMessage() {}

func (x *GetDeviceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_device_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceListRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceListRequest) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_device_proto_rawDescGZIP(), []int{0}
}

func (x *GetDeviceListRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetDeviceListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDeviceListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetDeviceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevProfile []*DSDeviceProfile `protobuf:"bytes,1,rep,name=dev_profile,json=devProfile,proto3" json:"dev_profile,omitempty"`
	Count      int64              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetDeviceListResponse) Reset() {
	*x = GetDeviceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_device_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceListResponse) ProtoMessage() {}

func (x *GetDeviceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_device_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceListResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceListResponse) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_device_proto_rawDescGZIP(), []int{1}
}

func (x *GetDeviceListResponse) GetDevProfile() []*DSDeviceProfile {
	if x != nil {
		return x.DevProfile
	}
	return nil
}

func (x *GetDeviceListResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetDSDeviceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	DevId int64 `protobuf:"varint,2,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
}

func (x *GetDSDeviceProfileRequest) Reset() {
	*x = GetDSDeviceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_device_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDSDeviceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDSDeviceProfileRequest) ProtoMessage() {}

func (x *GetDSDeviceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_device_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDSDeviceProfileRequest.ProtoReflect.Descriptor instead.
func (*GetDSDeviceProfileRequest) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_device_proto_rawDescGZIP(), []int{2}
}

func (x *GetDSDeviceProfileRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetDSDeviceProfileRequest) GetDevId() int64 {
	if x != nil {
		return x.DevId
	}
	return 0
}

type DSDeviceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DevEui        string     `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	FkWallet      int64      `protobuf:"varint,3,opt,name=fk_wallet,json=fkWallet,proto3" json:"fk_wallet,omitempty"`
	Mode          DeviceMode `protobuf:"varint,4,opt,name=mode,proto3,enum=m2m_serves_appserver.DeviceMode" json:"mode,omitempty"`
	CreatedAt     string     `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	LastSeenAt    string     `protobuf:"bytes,6,opt,name=last_seen_at,json=lastSeenAt,proto3" json:"last_seen_at,omitempty"`
	ApplicationId int64      `protobuf:"varint,7,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	Name          string     `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DSDeviceProfile) Reset() {
	*x = DSDeviceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_device_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DSDeviceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSDeviceProfile) ProtoMessage() {}

func (x *DSDeviceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_device_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSDeviceProfile.ProtoReflect.Descriptor instead.
func (*DSDeviceProfile) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_device_proto_rawDescGZIP(), []int{3}
}

func (x *DSDeviceProfile) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DSDeviceProfile) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *DSDeviceProfile) GetFkWallet() int64 {
	if x != nil {
		return x.FkWallet
	}
	return 0
}

func (x *DSDeviceProfile) GetMode() DeviceMode {
	if x != nil {
		return x.Mode
	}
	return DeviceMode_DV_INACTIVE
}

func (x *DSDeviceProfile) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *DSDeviceProfile) GetLastSeenAt() string {
	if x != nil {
		return x.LastSeenAt
	}
	return ""
}

func (x *DSDeviceProfile) GetApplicationId() int64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

func (x *DSDeviceProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetDSDeviceProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevProfile *DSDeviceProfile `protobuf:"bytes,1,opt,name=dev_profile,json=devProfile,proto3" json:"dev_profile,omitempty"`
}

func (x *GetDSDeviceProfileResponse) Reset() {
	*x = GetDSDeviceProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_device_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDSDeviceProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDSDeviceProfileResponse) ProtoMessage() {}

func (x *GetDSDeviceProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_device_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDSDeviceProfileResponse.ProtoReflect.Descriptor instead.
func (*GetDSDeviceProfileResponse) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_device_proto_rawDescGZIP(), []int{4}
}

func (x *GetDSDeviceProfileResponse) GetDevProfile() *DSDeviceProfile {
	if x != nil {
		return x.DevProfile
	}
	return nil
}

type GetDeviceHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId  int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	DevId  int64 `protobuf:"varint,2,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetDeviceHistoryRequest) Reset() {
	*x = GetDeviceHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_device_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceHistoryRequest) ProtoMessage() {}

func (x *GetDeviceHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_device_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceHistoryRequest) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_device_proto_rawDescGZIP(), []int{5}
}

func (x *GetDeviceHistoryRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetDeviceHistoryRequest) GetDevId() int64 {
	if x != nil {
		return x.DevId
	}
	return 0
}

func (x *GetDeviceHistoryRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDeviceHistoryRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetDeviceHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevHistory string `protobuf:"bytes,1,opt,name=dev_history,json=devHistory,proto3" json:"dev_history,omitempty"`
}

func (x *GetDeviceHistoryResponse) Reset() {
	*x = GetDeviceHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_device_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceHistoryResponse) ProtoMessage() {}

func (x *GetDeviceHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_device_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceHistoryResponse) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_device_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeviceHistoryResponse) GetDevHistory() string {
	if x != nil {
		return x.DevHistory
	}
	return ""
}

type SetDeviceModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId   int64      `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	DevId   int64      `protobuf:"varint,2,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
	DevMode DeviceMode `protobuf:"varint,3,opt,name=dev_mode,json=devMode,proto3,enum=m2m_serves_appserver.DeviceMode" json:"dev_mode,omitempty"`
}

func (x *SetDeviceModeRequest) Reset() {
	*x = SetDeviceModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_device_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceModeRequest) ProtoMessage() {}

func (x *SetDeviceModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_device_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceModeRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceModeRequest) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_device_proto_rawDescGZIP(), []int{7}
}

func (x *SetDeviceModeRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *SetDeviceModeRequest) GetDevId() int64 {
	if x != nil {
		return x.DevId
	}
	return 0
}

func (x *SetDeviceModeRequest) GetDevMode() DeviceMode {
	if x != nil {
		return x.DevMode
	}
	return DeviceMode_DV_INACTIVE
}

type SetDeviceModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetDeviceModeResponse) Reset() {
	*x = SetDeviceModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_device_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceModeResponse) ProtoMessage() {}

func (x *SetDeviceModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_device_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceModeResponse.ProtoReflect.Descriptor instead.
func (*SetDeviceModeResponse) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_device_proto_rawDescGZIP(), []int{8}
}

func (x *SetDeviceModeResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

var File_m2m_m2mserver_device_proto protoreflect.FileDescriptor

var file_m2m_m2mserver_device_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x32, 0x6d, 0x5f, 0x6d, 0x32, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x32,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0x5b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x75, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x53, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49,
	0x64, 0x22, 0x89, 0x02, 0x0a, 0x0f, 0x44, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6b, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x66, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6d, 0x32, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e,
	0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a,
	0x1a, 0x47, 0x65, 0x74, 0x44, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0b, 0x64,
	0x65, 0x76, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x75, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3b, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x76, 0x49, 0x64, 0x12, 0x3b,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x61, 0x0a, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x56,
	0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44,
	0x56, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x53, 0x5f,
	0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x56, 0x5f,
	0x57, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x44, 0x56, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03, 0x32,
	0xcf, 0x03, 0x0a, 0x0f, 0x44, 0x53, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2b, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x75, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x2f, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x53, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x53, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6d, 0x78, 0x63, 0x2d, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d,
	0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_m2m_m2mserver_device_proto_rawDescOnce sync.Once
	file_m2m_m2mserver_device_proto_rawDescData = file_m2m_m2mserver_device_proto_rawDesc
)

func file_m2m_m2mserver_device_proto_rawDescGZIP() []byte {
	file_m2m_m2mserver_device_proto_rawDescOnce.Do(func() {
		file_m2m_m2mserver_device_proto_rawDescData = protoimpl.X.CompressGZIP(file_m2m_m2mserver_device_proto_rawDescData)
	})
	return file_m2m_m2mserver_device_proto_rawDescData
}

var file_m2m_m2mserver_device_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_m2m_m2mserver_device_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_m2m_m2mserver_device_proto_goTypes = []interface{}{
	(DeviceMode)(0),                    // 0: m2m_serves_appserver.DeviceMode
	(*GetDeviceListRequest)(nil),       // 1: m2m_serves_appserver.GetDeviceListRequest
	(*GetDeviceListResponse)(nil),      // 2: m2m_serves_appserver.GetDeviceListResponse
	(*GetDSDeviceProfileRequest)(nil),  // 3: m2m_serves_appserver.GetDSDeviceProfileRequest
	(*DSDeviceProfile)(nil),            // 4: m2m_serves_appserver.DSDeviceProfile
	(*GetDSDeviceProfileResponse)(nil), // 5: m2m_serves_appserver.GetDSDeviceProfileResponse
	(*GetDeviceHistoryRequest)(nil),    // 6: m2m_serves_appserver.GetDeviceHistoryRequest
	(*GetDeviceHistoryResponse)(nil),   // 7: m2m_serves_appserver.GetDeviceHistoryResponse
	(*SetDeviceModeRequest)(nil),       // 8: m2m_serves_appserver.SetDeviceModeRequest
	(*SetDeviceModeResponse)(nil),      // 9: m2m_serves_appserver.SetDeviceModeResponse
}
var file_m2m_m2mserver_device_proto_depIdxs = []int32{
	4, // 0: m2m_serves_appserver.GetDeviceListResponse.dev_profile:type_name -> m2m_serves_appserver.DSDeviceProfile
	0, // 1: m2m_serves_appserver.DSDeviceProfile.mode:type_name -> m2m_serves_appserver.DeviceMode
	4, // 2: m2m_serves_appserver.GetDSDeviceProfileResponse.dev_profile:type_name -> m2m_serves_appserver.DSDeviceProfile
	0, // 3: m2m_serves_appserver.SetDeviceModeRequest.dev_mode:type_name -> m2m_serves_appserver.DeviceMode
	1, // 4: m2m_serves_appserver.DSDeviceService.GetDeviceList:input_type -> m2m_serves_appserver.GetDeviceListRequest
	3, // 5: m2m_serves_appserver.DSDeviceService.GetDeviceProfile:input_type -> m2m_serves_appserver.GetDSDeviceProfileRequest
	6, // 6: m2m_serves_appserver.DSDeviceService.GetDeviceHistory:input_type -> m2m_serves_appserver.GetDeviceHistoryRequest
	8, // 7: m2m_serves_appserver.DSDeviceService.SetDeviceMode:input_type -> m2m_serves_appserver.SetDeviceModeRequest
	2, // 8: m2m_serves_appserver.DSDeviceService.GetDeviceList:output_type -> m2m_serves_appserver.GetDeviceListResponse
	5, // 9: m2m_serves_appserver.DSDeviceService.GetDeviceProfile:output_type -> m2m_serves_appserver.GetDSDeviceProfileResponse
	7, // 10: m2m_serves_appserver.DSDeviceService.GetDeviceHistory:output_type -> m2m_serves_appserver.GetDeviceHistoryResponse
	9, // 11: m2m_serves_appserver.DSDeviceService.SetDeviceMode:output_type -> m2m_serves_appserver.SetDeviceModeResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_m2m_m2mserver_device_proto_init() }
func file_m2m_m2mserver_device_proto_init() {
	if File_m2m_m2mserver_device_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_m2m_m2mserver_device_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_device_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_device_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDSDeviceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_device_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DSDeviceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_device_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDSDeviceProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_device_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_device_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_device_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_device_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_m2m_m2mserver_device_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_m2m_m2mserver_device_proto_goTypes,
		DependencyIndexes: file_m2m_m2mserver_device_proto_depIdxs,
		EnumInfos:         file_m2m_m2mserver_device_proto_enumTypes,
		MessageInfos:      file_m2m_m2mserver_device_proto_msgTypes,
	}.Build()
	File_m2m_m2mserver_device_proto = out.File
	file_m2m_m2mserver_device_proto_rawDesc = nil
	file_m2m_m2mserver_device_proto_goTypes = nil
	file_m2m_m2mserver_device_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DSDeviceServiceClient is the client API for DSDeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DSDeviceServiceClient interface {
	GetDeviceList(ctx context.Context, in *GetDeviceListRequest, opts ...grpc.CallOption) (*GetDeviceListResponse, error)
	GetDeviceProfile(ctx context.Context, in *GetDSDeviceProfileRequest, opts ...grpc.CallOption) (*GetDSDeviceProfileResponse, error)
	GetDeviceHistory(ctx context.Context, in *GetDeviceHistoryRequest, opts ...grpc.CallOption) (*GetDeviceHistoryResponse, error)
	SetDeviceMode(ctx context.Context, in *SetDeviceModeRequest, opts ...grpc.CallOption) (*SetDeviceModeResponse, error)
}

type dSDeviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDSDeviceServiceClient(cc grpc.ClientConnInterface) DSDeviceServiceClient {
	return &dSDeviceServiceClient{cc}
}

func (c *dSDeviceServiceClient) GetDeviceList(ctx context.Context, in *GetDeviceListRequest, opts ...grpc.CallOption) (*GetDeviceListResponse, error) {
	out := new(GetDeviceListResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DSDeviceService/GetDeviceList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSDeviceServiceClient) GetDeviceProfile(ctx context.Context, in *GetDSDeviceProfileRequest, opts ...grpc.CallOption) (*GetDSDeviceProfileResponse, error) {
	out := new(GetDSDeviceProfileResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DSDeviceService/GetDeviceProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSDeviceServiceClient) GetDeviceHistory(ctx context.Context, in *GetDeviceHistoryRequest, opts ...grpc.CallOption) (*GetDeviceHistoryResponse, error) {
	out := new(GetDeviceHistoryResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DSDeviceService/GetDeviceHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dSDeviceServiceClient) SetDeviceMode(ctx context.Context, in *SetDeviceModeRequest, opts ...grpc.CallOption) (*SetDeviceModeResponse, error) {
	out := new(SetDeviceModeResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DSDeviceService/SetDeviceMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DSDeviceServiceServer is the server API for DSDeviceService service.
type DSDeviceServiceServer interface {
	GetDeviceList(context.Context, *GetDeviceListRequest) (*GetDeviceListResponse, error)
	GetDeviceProfile(context.Context, *GetDSDeviceProfileRequest) (*GetDSDeviceProfileResponse, error)
	GetDeviceHistory(context.Context, *GetDeviceHistoryRequest) (*GetDeviceHistoryResponse, error)
	SetDeviceMode(context.Context, *SetDeviceModeRequest) (*SetDeviceModeResponse, error)
}

// UnimplementedDSDeviceServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDSDeviceServiceServer struct {
}

func (*UnimplementedDSDeviceServiceServer) GetDeviceList(context.Context, *GetDeviceListRequest) (*GetDeviceListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceList not implemented")
}
func (*UnimplementedDSDeviceServiceServer) GetDeviceProfile(context.Context, *GetDSDeviceProfileRequest) (*GetDSDeviceProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceProfile not implemented")
}
func (*UnimplementedDSDeviceServiceServer) GetDeviceHistory(context.Context, *GetDeviceHistoryRequest) (*GetDeviceHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceHistory not implemented")
}
func (*UnimplementedDSDeviceServiceServer) SetDeviceMode(context.Context, *SetDeviceModeRequest) (*SetDeviceModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceMode not implemented")
}

func RegisterDSDeviceServiceServer(s *grpc.Server, srv DSDeviceServiceServer) {
	s.RegisterService(&_DSDeviceService_serviceDesc, srv)
}

func _DSDeviceService_GetDeviceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSDeviceServiceServer).GetDeviceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DSDeviceService/GetDeviceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSDeviceServiceServer).GetDeviceList(ctx, req.(*GetDeviceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSDeviceService_GetDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDSDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSDeviceServiceServer).GetDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DSDeviceService/GetDeviceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSDeviceServiceServer).GetDeviceProfile(ctx, req.(*GetDSDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSDeviceService_GetDeviceHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSDeviceServiceServer).GetDeviceHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DSDeviceService/GetDeviceHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSDeviceServiceServer).GetDeviceHistory(ctx, req.(*GetDeviceHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DSDeviceService_SetDeviceMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DSDeviceServiceServer).SetDeviceMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DSDeviceService/SetDeviceMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DSDeviceServiceServer).SetDeviceMode(ctx, req.(*SetDeviceModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DSDeviceService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "m2m_serves_appserver.DSDeviceService",
	HandlerType: (*DSDeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceList",
			Handler:    _DSDeviceService_GetDeviceList_Handler,
		},
		{
			MethodName: "GetDeviceProfile",
			Handler:    _DSDeviceService_GetDeviceProfile_Handler,
		},
		{
			MethodName: "GetDeviceHistory",
			Handler:    _DSDeviceService_GetDeviceHistory_Handler,
		},
		{
			MethodName: "SetDeviceMode",
			Handler:    _DSDeviceService_SetDeviceMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "m2m_m2mserver_device.proto",
}
