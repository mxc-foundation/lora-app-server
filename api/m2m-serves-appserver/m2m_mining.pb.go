// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: m2m_mining.proto

package m2m_serves_appserver

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// request info about the org mining
type OrgMiningIncomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId int64                `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	From  *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	Till  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=till,proto3" json:"till,omitempty"`
}

func (x *OrgMiningIncomeRequest) Reset() {
	*x = OrgMiningIncomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgMiningIncomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgMiningIncomeRequest) ProtoMessage() {}

func (x *OrgMiningIncomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgMiningIncomeRequest.ProtoReflect.Descriptor instead.
func (*OrgMiningIncomeRequest) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{0}
}

func (x *OrgMiningIncomeRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *OrgMiningIncomeRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *OrgMiningIncomeRequest) GetTill() *timestamp.Timestamp {
	if x != nil {
		return x.Till
	}
	return nil
}

// amount mined by the org
type OrgMiningIncomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *OrgMiningIncomeResponse) Reset() {
	*x = OrgMiningIncomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgMiningIncomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgMiningIncomeResponse) ProtoMessage() {}

func (x *OrgMiningIncomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgMiningIncomeResponse.ProtoReflect.Descriptor instead.
func (*OrgMiningIncomeResponse) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{1}
}

func (x *OrgMiningIncomeResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type MonthlyMining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month  string `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *MonthlyMining) Reset() {
	*x = MonthlyMining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyMining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyMining) ProtoMessage() {}

func (x *MonthlyMining) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyMining.ProtoReflect.Descriptor instead.
func (*MonthlyMining) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{2}
}

func (x *MonthlyMining) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *MonthlyMining) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type OrgMiningInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId int64 `protobuf:"varint,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *OrgMiningInfoRequest) Reset() {
	*x = OrgMiningInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgMiningInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgMiningInfoRequest) ProtoMessage() {}

func (x *OrgMiningInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgMiningInfoRequest.ProtoReflect.Descriptor instead.
func (*OrgMiningInfoRequest) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{3}
}

func (x *OrgMiningInfoRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type OrgMiningInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// amount mined today so far
	TodayRev string `protobuf:"bytes,1,opt,name=todayRev,proto3" json:"todayRev,omitempty"`
	// monthly mining amounts
	MiningInfo []*MonthlyMining `protobuf:"bytes,2,rep,name=mining_info,json=miningInfo,proto3" json:"mining_info,omitempty"`
}

func (x *OrgMiningInfoResponse) Reset() {
	*x = OrgMiningInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgMiningInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgMiningInfoResponse) ProtoMessage() {}

func (x *OrgMiningInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgMiningInfoResponse.ProtoReflect.Descriptor instead.
func (*OrgMiningInfoResponse) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{4}
}

func (x *OrgMiningInfoResponse) GetTodayRev() string {
	if x != nil {
		return x.TodayRev
	}
	return ""
}

func (x *OrgMiningInfoResponse) GetMiningInfo() []*MonthlyMining {
	if x != nil {
		return x.MiningInfo
	}
	return nil
}

// request information about mining health of gateways
type GetGatewayMiningHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gateway []*GatewayMining `protobuf:"bytes,1,rep,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *GetGatewayMiningHealthRequest) Reset() {
	*x = GetGatewayMiningHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayMiningHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayMiningHealthRequest) ProtoMessage() {}

func (x *GetGatewayMiningHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayMiningHealthRequest.ProtoReflect.Descriptor instead.
func (*GetGatewayMiningHealthRequest) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{5}
}

func (x *GetGatewayMiningHealthRequest) GetGateway() []*GatewayMining {
	if x != nil {
		return x.Gateway
	}
	return nil
}

type GatewayMiningHealth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC of the gateway
	GatewayMac string `protobuf:"bytes,1,opt,name=gateway_mac,json=gatewayMac,proto3" json:"gateway_mac,omitempty"`
	// organization that owns the gateway
	OrgId int64 `protobuf:"varint,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// overall health score
	Health float32 `protobuf:"fixed32,3,opt,name=health,proto3" json:"health,omitempty"`
	// mining fuel bonded to the gw by the org
	MiningFuel string `protobuf:"bytes,4,opt,name=mining_fuel,json=miningFuel,proto3" json:"mining_fuel,omitempty"`
	// mining fuel required for full mining efficiency
	MiningFuelMax string `protobuf:"bytes,5,opt,name=mining_fuel_max,json=miningFuelMax,proto3" json:"mining_fuel_max,omitempty"`
	// mining fuel health score
	MiningFuelHealth float32 `protobuf:"fixed32,6,opt,name=mining_fuel_health,json=miningFuelHealth,proto3" json:"mining_fuel_health,omitempty"`
	// gateway's age, total online seconds
	AgeSeconds int64 `protobuf:"varint,7,opt,name=age_seconds,json=ageSeconds,proto3" json:"age_seconds,omitempty"`
	// gateway's total mining
	TotalMined string `protobuf:"bytes,8,opt,name=total_mined,json=totalMined,proto3" json:"total_mined,omitempty"`
	// uptime percentage in the last 7 calendar days
	UptimeHealth float32 `protobuf:"fixed32,9,opt,name=uptime_health,json=uptimeHealth,proto3" json:"uptime_health,omitempty"`
}

func (x *GatewayMiningHealth) Reset() {
	*x = GatewayMiningHealth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMiningHealth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMiningHealth) ProtoMessage() {}

func (x *GatewayMiningHealth) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMiningHealth.ProtoReflect.Descriptor instead.
func (*GatewayMiningHealth) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{6}
}

func (x *GatewayMiningHealth) GetGatewayMac() string {
	if x != nil {
		return x.GatewayMac
	}
	return ""
}

func (x *GatewayMiningHealth) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GatewayMiningHealth) GetHealth() float32 {
	if x != nil {
		return x.Health
	}
	return 0
}

func (x *GatewayMiningHealth) GetMiningFuel() string {
	if x != nil {
		return x.MiningFuel
	}
	return ""
}

func (x *GatewayMiningHealth) GetMiningFuelMax() string {
	if x != nil {
		return x.MiningFuelMax
	}
	return ""
}

func (x *GatewayMiningHealth) GetMiningFuelHealth() float32 {
	if x != nil {
		return x.MiningFuelHealth
	}
	return 0
}

func (x *GatewayMiningHealth) GetAgeSeconds() int64 {
	if x != nil {
		return x.AgeSeconds
	}
	return 0
}

func (x *GatewayMiningHealth) GetTotalMined() string {
	if x != nil {
		return x.TotalMined
	}
	return ""
}

func (x *GatewayMiningHealth) GetUptimeHealth() float32 {
	if x != nil {
		return x.UptimeHealth
	}
	return 0
}

type GetGatewayMiningHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of health records for every gateway that was requested
	GatewayHealth []*GatewayMiningHealth `protobuf:"bytes,1,rep,name=gateway_health,json=gatewayHealth,proto3" json:"gateway_health,omitempty"`
}

func (x *GetGatewayMiningHealthResponse) Reset() {
	*x = GetGatewayMiningHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayMiningHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayMiningHealthResponse) ProtoMessage() {}

func (x *GetGatewayMiningHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayMiningHealthResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayMiningHealthResponse) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{7}
}

func (x *GetGatewayMiningHealthResponse) GetGatewayHealth() []*GatewayMiningHealth {
	if x != nil {
		return x.GatewayHealth
	}
	return nil
}

// information about the gateway mining fuel
type GatewayMiningFuelChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mac address of the gateway as a sequence of hex digits without any
	// separators, for example 70b3d5fffeabcdef
	GatewayMac string `protobuf:"bytes,1,opt,name=gateway_mac,json=gatewayMac,proto3" json:"gateway_mac,omitempty"`
	// amount that is to be added or withdrawn
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *GatewayMiningFuelChange) Reset() {
	*x = GatewayMiningFuelChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMiningFuelChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMiningFuelChange) ProtoMessage() {}

func (x *GatewayMiningFuelChange) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMiningFuelChange.ProtoReflect.Descriptor instead.
func (*GatewayMiningFuelChange) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{8}
}

func (x *GatewayMiningFuelChange) GetGatewayMac() string {
	if x != nil {
		return x.GatewayMac
	}
	return ""
}

func (x *GatewayMiningFuelChange) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

// top up amount bonded to a gateway
type TopUpGatewayMiningFuelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// what organization adds the fuel
	OrgId int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// token that should be bonded to the gateways
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	// gateways and amounts that should be added to them
	TopUps []*GatewayMiningFuelChange `protobuf:"bytes,3,rep,name=top_ups,json=topUps,proto3" json:"top_ups,omitempty"`
}

func (x *TopUpGatewayMiningFuelRequest) Reset() {
	*x = TopUpGatewayMiningFuelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopUpGatewayMiningFuelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopUpGatewayMiningFuelRequest) ProtoMessage() {}

func (x *TopUpGatewayMiningFuelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopUpGatewayMiningFuelRequest.ProtoReflect.Descriptor instead.
func (*TopUpGatewayMiningFuelRequest) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{9}
}

func (x *TopUpGatewayMiningFuelRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *TopUpGatewayMiningFuelRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *TopUpGatewayMiningFuelRequest) GetTopUps() []*GatewayMiningFuelChange {
	if x != nil {
		return x.TopUps
	}
	return nil
}

type TopUpGatewayMiningFuelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TopUpGatewayMiningFuelResponse) Reset() {
	*x = TopUpGatewayMiningFuelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopUpGatewayMiningFuelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopUpGatewayMiningFuelResponse) ProtoMessage() {}

func (x *TopUpGatewayMiningFuelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopUpGatewayMiningFuelResponse.ProtoReflect.Descriptor instead.
func (*TopUpGatewayMiningFuelResponse) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{10}
}

// withdraw amount from the gateway mining fuel
type WithdrawGatewayMiningFuelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// what organization owns the fuel
	OrgId int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// token that is bonded to the gateway
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	// gateways and amounts that should be withdrawn from them
	Withdrawals []*GatewayMiningFuelChange `protobuf:"bytes,3,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
}

func (x *WithdrawGatewayMiningFuelRequest) Reset() {
	*x = WithdrawGatewayMiningFuelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawGatewayMiningFuelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawGatewayMiningFuelRequest) ProtoMessage() {}

func (x *WithdrawGatewayMiningFuelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawGatewayMiningFuelRequest.ProtoReflect.Descriptor instead.
func (*WithdrawGatewayMiningFuelRequest) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{11}
}

func (x *WithdrawGatewayMiningFuelRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *WithdrawGatewayMiningFuelRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *WithdrawGatewayMiningFuelRequest) GetWithdrawals() []*GatewayMiningFuelChange {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

type WithdrawGatewayMiningFuelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WithdrawGatewayMiningFuelResponse) Reset() {
	*x = WithdrawGatewayMiningFuelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WithdrawGatewayMiningFuelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WithdrawGatewayMiningFuelResponse) ProtoMessage() {}

func (x *WithdrawGatewayMiningFuelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WithdrawGatewayMiningFuelResponse.ProtoReflect.Descriptor instead.
func (*WithdrawGatewayMiningFuelResponse) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{12}
}

// GatewayMining message contains instruction about paying mining rewards to
// the gateway
type GatewayMining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mac address of the gateway as a sequence of hex digits without any
	// separators, for example 70b3d5fffeabcdef
	GatewayMac string `protobuf:"bytes,1,opt,name=gateway_mac,json=gatewayMac,proto3" json:"gateway_mac,omitempty"`
	// the id of the organization that owns the gateway
	OwnerOrgId int64 `protobuf:"varint,2,opt,name=owner_org_id,json=ownerOrgId,proto3" json:"owner_org_id,omitempty"`
	// the id of the organization that is a seller of this gateway
	StcOrgId int64 `protobuf:"varint,3,opt,name=stc_org_id,json=stcOrgId,proto3" json:"stc_org_id,omitempty"`
}

func (x *GatewayMining) Reset() {
	*x = GatewayMining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMining) ProtoMessage() {}

func (x *GatewayMining) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMining.ProtoReflect.Descriptor instead.
func (*GatewayMining) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{13}
}

func (x *GatewayMining) GetGatewayMac() string {
	if x != nil {
		return x.GatewayMac
	}
	return ""
}

func (x *GatewayMining) GetOwnerOrgId() int64 {
	if x != nil {
		return x.OwnerOrgId
	}
	return 0
}

func (x *GatewayMining) GetStcOrgId() int64 {
	if x != nil {
		return x.StcOrgId
	}
	return 0
}

// MiningRequest contains list of gateways that should be paid
type MiningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// period in seconds for which the mining rewards should be paid
	PeriodSeconds int64 `protobuf:"varint,4,opt,name=period_seconds,json=periodSeconds,proto3" json:"period_seconds,omitempty"`
	// list of gateways to which the mining rewards should be paid
	GatewayMining []*GatewayMining `protobuf:"bytes,5,rep,name=gateway_mining,json=gatewayMining,proto3" json:"gateway_mining,omitempty"`
}

func (x *MiningRequest) Reset() {
	*x = MiningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningRequest) ProtoMessage() {}

func (x *MiningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningRequest.ProtoReflect.Descriptor instead.
func (*MiningRequest) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{14}
}

func (x *MiningRequest) GetPeriodSeconds() int64 {
	if x != nil {
		return x.PeriodSeconds
	}
	return 0
}

func (x *MiningRequest) GetGatewayMining() []*GatewayMining {
	if x != nil {
		return x.GatewayMining
	}
	return nil
}

type MiningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *MiningResponse) Reset() {
	*x = MiningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningResponse) ProtoMessage() {}

func (x *MiningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningResponse.ProtoReflect.Descriptor instead.
func (*MiningResponse) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{15}
}

func (x *MiningResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type MiningStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayMac     string               `protobuf:"bytes,1,opt,name=gateway_mac,json=gatewayMac,proto3" json:"gateway_mac,omitempty"`
	OrganizationId int64                `protobuf:"varint,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	FromDate       *timestamp.Timestamp `protobuf:"bytes,3,opt,name=from_date,json=fromDate,proto3" json:"from_date,omitempty"`
	TillDate       *timestamp.Timestamp `protobuf:"bytes,4,opt,name=till_date,json=tillDate,proto3" json:"till_date,omitempty"`
}

func (x *MiningStatsRequest) Reset() {
	*x = MiningStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiningStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningStatsRequest) ProtoMessage() {}

func (x *MiningStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningStatsRequest.ProtoReflect.Descriptor instead.
func (*MiningStatsRequest) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{16}
}

func (x *MiningStatsRequest) GetGatewayMac() string {
	if x != nil {
		return x.GatewayMac
	}
	return ""
}

func (x *MiningStatsRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *MiningStatsRequest) GetFromDate() *timestamp.Timestamp {
	if x != nil {
		return x.FromDate
	}
	return nil
}

func (x *MiningStatsRequest) GetTillDate() *timestamp.Timestamp {
	if x != nil {
		return x.TillDate
	}
	return nil
}

// MiningStats contains mined amount for the particular date
type MiningStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date          *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	Amount        string               `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	OnlineSeconds int64                `protobuf:"varint,3,opt,name=online_seconds,json=onlineSeconds,proto3" json:"online_seconds,omitempty"`
	Health        float32              `protobuf:"fixed32,4,opt,name=health,proto3" json:"health,omitempty"`
}

func (x *MiningStats) Reset() {
	*x = MiningStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiningStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningStats) ProtoMessage() {}

func (x *MiningStats) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningStats.ProtoReflect.Descriptor instead.
func (*MiningStats) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{17}
}

func (x *MiningStats) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *MiningStats) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *MiningStats) GetOnlineSeconds() int64 {
	if x != nil {
		return x.OnlineSeconds
	}
	return 0
}

func (x *MiningStats) GetHealth() float32 {
	if x != nil {
		return x.Health
	}
	return 0
}

type MiningStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DailyStats []*MiningStats `protobuf:"bytes,1,rep,name=daily_stats,json=dailyStats,proto3" json:"daily_stats,omitempty"`
	// total amount mined by this gateway
	Total string `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *MiningStatsResponse) Reset() {
	*x = MiningStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_mining_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiningStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningStatsResponse) ProtoMessage() {}

func (x *MiningStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_mining_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningStatsResponse.ProtoReflect.Descriptor instead.
func (*MiningStatsResponse) Descriptor() ([]byte, []int) {
	return file_m2m_mining_proto_rawDescGZIP(), []int{18}
}

func (x *MiningStatsResponse) GetDailyStats() []*MiningStats {
	if x != nil {
		return x.DailyStats
	}
	return nil
}

func (x *MiningStatsResponse) GetTotal() string {
	if x != nil {
		return x.Total
	}
	return ""
}

var File_m2m_mining_proto protoreflect.FileDescriptor

var file_m2m_mining_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x32, 0x6d, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x14, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x16, 0x4f, 0x72,
	0x67, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x22, 0x31, 0x0a, 0x17, 0x4f,
	0x72, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3d,
	0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2d, 0x0a,
	0x14, 0x4f, 0x72, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x15,
	0x4f, 0x72, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x65,
	0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x64, 0x61, 0x79, 0x52, 0x65,
	0x76, 0x12, 0x44, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x6f,
	0x6e, 0x74, 0x68, 0x6c, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x32, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x07,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22, 0xc3, 0x02, 0x0a, 0x13, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x61, 0x63,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x65, 0x6c,
	0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x5f,
	0x6d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x46, 0x75, 0x65, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x66, 0x75, 0x65, 0x6c, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x65, 0x6c,
	0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x70, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0c, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x72, 0x0a,
	0x1e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x50, 0x0a, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x52, 0x0d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x22, 0x52, 0x0a, 0x17, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x46, 0x75, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x61, 0x63, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x1d, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x46, 0x0a, 0x07, 0x74, 0x6f,
	0x70, 0x5f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x32,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x46, 0x75, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x55,
	0x70, 0x73, 0x22, 0x20, 0x0a, 0x1e, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa6, 0x01, 0x0a, 0x20, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x0b,
	0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x73, 0x22, 0x23, 0x0a,
	0x21, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x70, 0x0a, 0x0d, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d,
	0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x4d, 0x61, 0x63, 0x12, 0x20, 0x0a, 0x0c, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x73, 0x74, 0x63, 0x5f, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x74, 0x63, 0x4f,
	0x72, 0x67, 0x49, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x4a, 0x0a,
	0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x22, 0x28, 0x0a, 0x0e, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x61, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a,
	0x09, 0x74, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x74, 0x69,
	0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x22, 0x6f, 0x0a,
	0x13, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x32, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a, 0x64, 0x61,
	0x69, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x32, 0xbd,
	0x06, 0x0a, 0x0d, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x53, 0x0a, 0x06, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x6d, 0x32, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x24, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x28, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83, 0x01, 0x0a, 0x16, 0x54, 0x6f,
	0x70, 0x55, 0x70, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x46, 0x75, 0x65, 0x6c, 0x12, 0x33, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x6f, 0x70, 0x55,
	0x70, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x6d, 0x32, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x54, 0x6f, 0x70, 0x55, 0x70, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x46, 0x75, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x8c, 0x01, 0x0a, 0x19, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x65, 0x6c, 0x12, 0x36, 0x2e,
	0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x46, 0x75, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x83,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x33, 0x2e, 0x6d, 0x32, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x4f, 0x72, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x2c, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f,
	0x72, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x67,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x0d, 0x4f, 0x72, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x67,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x72, 0x67, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x46,
	0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x78, 0x63,
	0x2d, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x78, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_m2m_mining_proto_rawDescOnce sync.Once
	file_m2m_mining_proto_rawDescData = file_m2m_mining_proto_rawDesc
)

func file_m2m_mining_proto_rawDescGZIP() []byte {
	file_m2m_mining_proto_rawDescOnce.Do(func() {
		file_m2m_mining_proto_rawDescData = protoimpl.X.CompressGZIP(file_m2m_mining_proto_rawDescData)
	})
	return file_m2m_mining_proto_rawDescData
}

var file_m2m_mining_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_m2m_mining_proto_goTypes = []interface{}{
	(*OrgMiningIncomeRequest)(nil),            // 0: m2m_serves_appserver.OrgMiningIncomeRequest
	(*OrgMiningIncomeResponse)(nil),           // 1: m2m_serves_appserver.OrgMiningIncomeResponse
	(*MonthlyMining)(nil),                     // 2: m2m_serves_appserver.MonthlyMining
	(*OrgMiningInfoRequest)(nil),              // 3: m2m_serves_appserver.OrgMiningInfoRequest
	(*OrgMiningInfoResponse)(nil),             // 4: m2m_serves_appserver.OrgMiningInfoResponse
	(*GetGatewayMiningHealthRequest)(nil),     // 5: m2m_serves_appserver.GetGatewayMiningHealthRequest
	(*GatewayMiningHealth)(nil),               // 6: m2m_serves_appserver.GatewayMiningHealth
	(*GetGatewayMiningHealthResponse)(nil),    // 7: m2m_serves_appserver.GetGatewayMiningHealthResponse
	(*GatewayMiningFuelChange)(nil),           // 8: m2m_serves_appserver.GatewayMiningFuelChange
	(*TopUpGatewayMiningFuelRequest)(nil),     // 9: m2m_serves_appserver.TopUpGatewayMiningFuelRequest
	(*TopUpGatewayMiningFuelResponse)(nil),    // 10: m2m_serves_appserver.TopUpGatewayMiningFuelResponse
	(*WithdrawGatewayMiningFuelRequest)(nil),  // 11: m2m_serves_appserver.WithdrawGatewayMiningFuelRequest
	(*WithdrawGatewayMiningFuelResponse)(nil), // 12: m2m_serves_appserver.WithdrawGatewayMiningFuelResponse
	(*GatewayMining)(nil),                     // 13: m2m_serves_appserver.GatewayMining
	(*MiningRequest)(nil),                     // 14: m2m_serves_appserver.MiningRequest
	(*MiningResponse)(nil),                    // 15: m2m_serves_appserver.MiningResponse
	(*MiningStatsRequest)(nil),                // 16: m2m_serves_appserver.MiningStatsRequest
	(*MiningStats)(nil),                       // 17: m2m_serves_appserver.MiningStats
	(*MiningStatsResponse)(nil),               // 18: m2m_serves_appserver.MiningStatsResponse
	(*timestamp.Timestamp)(nil),               // 19: google.protobuf.Timestamp
}
var file_m2m_mining_proto_depIdxs = []int32{
	19, // 0: m2m_serves_appserver.OrgMiningIncomeRequest.from:type_name -> google.protobuf.Timestamp
	19, // 1: m2m_serves_appserver.OrgMiningIncomeRequest.till:type_name -> google.protobuf.Timestamp
	2,  // 2: m2m_serves_appserver.OrgMiningInfoResponse.mining_info:type_name -> m2m_serves_appserver.MonthlyMining
	13, // 3: m2m_serves_appserver.GetGatewayMiningHealthRequest.gateway:type_name -> m2m_serves_appserver.GatewayMining
	6,  // 4: m2m_serves_appserver.GetGatewayMiningHealthResponse.gateway_health:type_name -> m2m_serves_appserver.GatewayMiningHealth
	8,  // 5: m2m_serves_appserver.TopUpGatewayMiningFuelRequest.top_ups:type_name -> m2m_serves_appserver.GatewayMiningFuelChange
	8,  // 6: m2m_serves_appserver.WithdrawGatewayMiningFuelRequest.withdrawals:type_name -> m2m_serves_appserver.GatewayMiningFuelChange
	13, // 7: m2m_serves_appserver.MiningRequest.gateway_mining:type_name -> m2m_serves_appserver.GatewayMining
	19, // 8: m2m_serves_appserver.MiningStatsRequest.from_date:type_name -> google.protobuf.Timestamp
	19, // 9: m2m_serves_appserver.MiningStatsRequest.till_date:type_name -> google.protobuf.Timestamp
	19, // 10: m2m_serves_appserver.MiningStats.date:type_name -> google.protobuf.Timestamp
	17, // 11: m2m_serves_appserver.MiningStatsResponse.daily_stats:type_name -> m2m_serves_appserver.MiningStats
	14, // 12: m2m_serves_appserver.MiningService.Mining:input_type -> m2m_serves_appserver.MiningRequest
	16, // 13: m2m_serves_appserver.MiningService.MiningStats:input_type -> m2m_serves_appserver.MiningStatsRequest
	9,  // 14: m2m_serves_appserver.MiningService.TopUpGatewayMiningFuel:input_type -> m2m_serves_appserver.TopUpGatewayMiningFuelRequest
	11, // 15: m2m_serves_appserver.MiningService.WithdrawGatewayMiningFuel:input_type -> m2m_serves_appserver.WithdrawGatewayMiningFuelRequest
	5,  // 16: m2m_serves_appserver.MiningService.GetGatewayMiningHealth:input_type -> m2m_serves_appserver.GetGatewayMiningHealthRequest
	0,  // 17: m2m_serves_appserver.MiningService.OrgMiningIncome:input_type -> m2m_serves_appserver.OrgMiningIncomeRequest
	3,  // 18: m2m_serves_appserver.MiningService.OrgMiningInfo:input_type -> m2m_serves_appserver.OrgMiningInfoRequest
	15, // 19: m2m_serves_appserver.MiningService.Mining:output_type -> m2m_serves_appserver.MiningResponse
	18, // 20: m2m_serves_appserver.MiningService.MiningStats:output_type -> m2m_serves_appserver.MiningStatsResponse
	10, // 21: m2m_serves_appserver.MiningService.TopUpGatewayMiningFuel:output_type -> m2m_serves_appserver.TopUpGatewayMiningFuelResponse
	12, // 22: m2m_serves_appserver.MiningService.WithdrawGatewayMiningFuel:output_type -> m2m_serves_appserver.WithdrawGatewayMiningFuelResponse
	7,  // 23: m2m_serves_appserver.MiningService.GetGatewayMiningHealth:output_type -> m2m_serves_appserver.GetGatewayMiningHealthResponse
	1,  // 24: m2m_serves_appserver.MiningService.OrgMiningIncome:output_type -> m2m_serves_appserver.OrgMiningIncomeResponse
	4,  // 25: m2m_serves_appserver.MiningService.OrgMiningInfo:output_type -> m2m_serves_appserver.OrgMiningInfoResponse
	19, // [19:26] is the sub-list for method output_type
	12, // [12:19] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_m2m_mining_proto_init() }
func file_m2m_mining_proto_init() {
	if File_m2m_mining_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_m2m_mining_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgMiningIncomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgMiningIncomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyMining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgMiningInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgMiningInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayMiningHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMiningHealth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayMiningHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMiningFuelChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopUpGatewayMiningFuelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopUpGatewayMiningFuelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawGatewayMiningFuelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WithdrawGatewayMiningFuelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiningStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiningStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_mining_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiningStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_m2m_mining_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_m2m_mining_proto_goTypes,
		DependencyIndexes: file_m2m_mining_proto_depIdxs,
		MessageInfos:      file_m2m_mining_proto_msgTypes,
	}.Build()
	File_m2m_mining_proto = out.File
	file_m2m_mining_proto_rawDesc = nil
	file_m2m_mining_proto_goTypes = nil
	file_m2m_mining_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MiningServiceClient is the client API for MiningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MiningServiceClient interface {
	// Pay mining income to owners of the gateways specified in the request
	Mining(ctx context.Context, in *MiningRequest, opts ...grpc.CallOption) (*MiningResponse, error)
	// Get info about how much money the gateway has mined
	MiningStats(ctx context.Context, in *MiningStatsRequest, opts ...grpc.CallOption) (*MiningStatsResponse, error)
	// TopUp amount of gateway's mining fuel
	TopUpGatewayMiningFuel(ctx context.Context, in *TopUpGatewayMiningFuelRequest, opts ...grpc.CallOption) (*TopUpGatewayMiningFuelResponse, error)
	// Withdraw amount from gateway's mining fuel
	WithdrawGatewayMiningFuel(ctx context.Context, in *WithdrawGatewayMiningFuelRequest, opts ...grpc.CallOption) (*WithdrawGatewayMiningFuelResponse, error)
	// Get information about the health of the gateway
	GetGatewayMiningHealth(ctx context.Context, in *GetGatewayMiningHealthRequest, opts ...grpc.CallOption) (*GetGatewayMiningHealthResponse, error)
	// Get amount the org gateways mined during the specified period
	OrgMiningIncome(ctx context.Context, in *OrgMiningIncomeRequest, opts ...grpc.CallOption) (*OrgMiningIncomeResponse, error)
	OrgMiningInfo(ctx context.Context, in *OrgMiningInfoRequest, opts ...grpc.CallOption) (*OrgMiningInfoResponse, error)
}

type miningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMiningServiceClient(cc grpc.ClientConnInterface) MiningServiceClient {
	return &miningServiceClient{cc}
}

func (c *miningServiceClient) Mining(ctx context.Context, in *MiningRequest, opts ...grpc.CallOption) (*MiningResponse, error) {
	out := new(MiningResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.MiningService/Mining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miningServiceClient) MiningStats(ctx context.Context, in *MiningStatsRequest, opts ...grpc.CallOption) (*MiningStatsResponse, error) {
	out := new(MiningStatsResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.MiningService/MiningStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miningServiceClient) TopUpGatewayMiningFuel(ctx context.Context, in *TopUpGatewayMiningFuelRequest, opts ...grpc.CallOption) (*TopUpGatewayMiningFuelResponse, error) {
	out := new(TopUpGatewayMiningFuelResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.MiningService/TopUpGatewayMiningFuel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miningServiceClient) WithdrawGatewayMiningFuel(ctx context.Context, in *WithdrawGatewayMiningFuelRequest, opts ...grpc.CallOption) (*WithdrawGatewayMiningFuelResponse, error) {
	out := new(WithdrawGatewayMiningFuelResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.MiningService/WithdrawGatewayMiningFuel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miningServiceClient) GetGatewayMiningHealth(ctx context.Context, in *GetGatewayMiningHealthRequest, opts ...grpc.CallOption) (*GetGatewayMiningHealthResponse, error) {
	out := new(GetGatewayMiningHealthResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.MiningService/GetGatewayMiningHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miningServiceClient) OrgMiningIncome(ctx context.Context, in *OrgMiningIncomeRequest, opts ...grpc.CallOption) (*OrgMiningIncomeResponse, error) {
	out := new(OrgMiningIncomeResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.MiningService/OrgMiningIncome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *miningServiceClient) OrgMiningInfo(ctx context.Context, in *OrgMiningInfoRequest, opts ...grpc.CallOption) (*OrgMiningInfoResponse, error) {
	out := new(OrgMiningInfoResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.MiningService/OrgMiningInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiningServiceServer is the server API for MiningService service.
type MiningServiceServer interface {
	// Pay mining income to owners of the gateways specified in the request
	Mining(context.Context, *MiningRequest) (*MiningResponse, error)
	// Get info about how much money the gateway has mined
	MiningStats(context.Context, *MiningStatsRequest) (*MiningStatsResponse, error)
	// TopUp amount of gateway's mining fuel
	TopUpGatewayMiningFuel(context.Context, *TopUpGatewayMiningFuelRequest) (*TopUpGatewayMiningFuelResponse, error)
	// Withdraw amount from gateway's mining fuel
	WithdrawGatewayMiningFuel(context.Context, *WithdrawGatewayMiningFuelRequest) (*WithdrawGatewayMiningFuelResponse, error)
	// Get information about the health of the gateway
	GetGatewayMiningHealth(context.Context, *GetGatewayMiningHealthRequest) (*GetGatewayMiningHealthResponse, error)
	// Get amount the org gateways mined during the specified period
	OrgMiningIncome(context.Context, *OrgMiningIncomeRequest) (*OrgMiningIncomeResponse, error)
	OrgMiningInfo(context.Context, *OrgMiningInfoRequest) (*OrgMiningInfoResponse, error)
}

// UnimplementedMiningServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMiningServiceServer struct {
}

func (*UnimplementedMiningServiceServer) Mining(context.Context, *MiningRequest) (*MiningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mining not implemented")
}
func (*UnimplementedMiningServiceServer) MiningStats(context.Context, *MiningStatsRequest) (*MiningStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiningStats not implemented")
}
func (*UnimplementedMiningServiceServer) TopUpGatewayMiningFuel(context.Context, *TopUpGatewayMiningFuelRequest) (*TopUpGatewayMiningFuelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUpGatewayMiningFuel not implemented")
}
func (*UnimplementedMiningServiceServer) WithdrawGatewayMiningFuel(context.Context, *WithdrawGatewayMiningFuelRequest) (*WithdrawGatewayMiningFuelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawGatewayMiningFuel not implemented")
}
func (*UnimplementedMiningServiceServer) GetGatewayMiningHealth(context.Context, *GetGatewayMiningHealthRequest) (*GetGatewayMiningHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayMiningHealth not implemented")
}
func (*UnimplementedMiningServiceServer) OrgMiningIncome(context.Context, *OrgMiningIncomeRequest) (*OrgMiningIncomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrgMiningIncome not implemented")
}
func (*UnimplementedMiningServiceServer) OrgMiningInfo(context.Context, *OrgMiningInfoRequest) (*OrgMiningInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrgMiningInfo not implemented")
}

func RegisterMiningServiceServer(s *grpc.Server, srv MiningServiceServer) {
	s.RegisterService(&_MiningService_serviceDesc, srv)
}

func _MiningService_Mining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServiceServer).Mining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.MiningService/Mining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServiceServer).Mining(ctx, req.(*MiningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiningService_MiningStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiningStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServiceServer).MiningStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.MiningService/MiningStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServiceServer).MiningStats(ctx, req.(*MiningStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiningService_TopUpGatewayMiningFuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopUpGatewayMiningFuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServiceServer).TopUpGatewayMiningFuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.MiningService/TopUpGatewayMiningFuel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServiceServer).TopUpGatewayMiningFuel(ctx, req.(*TopUpGatewayMiningFuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiningService_WithdrawGatewayMiningFuel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawGatewayMiningFuelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServiceServer).WithdrawGatewayMiningFuel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.MiningService/WithdrawGatewayMiningFuel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServiceServer).WithdrawGatewayMiningFuel(ctx, req.(*WithdrawGatewayMiningFuelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiningService_GetGatewayMiningHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayMiningHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServiceServer).GetGatewayMiningHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.MiningService/GetGatewayMiningHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServiceServer).GetGatewayMiningHealth(ctx, req.(*GetGatewayMiningHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiningService_OrgMiningIncome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgMiningIncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServiceServer).OrgMiningIncome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.MiningService/OrgMiningIncome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServiceServer).OrgMiningIncome(ctx, req.(*OrgMiningIncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MiningService_OrgMiningInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgMiningInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiningServiceServer).OrgMiningInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.MiningService/OrgMiningInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiningServiceServer).OrgMiningInfo(ctx, req.(*OrgMiningInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MiningService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "m2m_serves_appserver.MiningService",
	HandlerType: (*MiningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mining",
			Handler:    _MiningService_Mining_Handler,
		},
		{
			MethodName: "MiningStats",
			Handler:    _MiningService_MiningStats_Handler,
		},
		{
			MethodName: "TopUpGatewayMiningFuel",
			Handler:    _MiningService_TopUpGatewayMiningFuel_Handler,
		},
		{
			MethodName: "WithdrawGatewayMiningFuel",
			Handler:    _MiningService_WithdrawGatewayMiningFuel_Handler,
		},
		{
			MethodName: "GetGatewayMiningHealth",
			Handler:    _MiningService_GetGatewayMiningHealth_Handler,
		},
		{
			MethodName: "OrgMiningIncome",
			Handler:    _MiningService_OrgMiningIncome_Handler,
		},
		{
			MethodName: "OrgMiningInfo",
			Handler:    _MiningService_OrgMiningInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "m2m_mining.proto",
}
