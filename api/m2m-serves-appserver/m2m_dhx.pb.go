// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: m2m_dhx.proto

package m2m_serves_appserver

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DHXGetLastMiningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// organization id. If specified return details for the given organization and the council it chairs
	OrgId int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *DHXGetLastMiningRequest) Reset() {
	*x = DHXGetLastMiningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXGetLastMiningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXGetLastMiningRequest) ProtoMessage() {}

func (x *DHXGetLastMiningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXGetLastMiningRequest.ProtoReflect.Descriptor instead.
func (*DHXGetLastMiningRequest) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{0}
}

func (x *DHXGetLastMiningRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type DHXGetLastMiningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the last date for which mining has been paid
	Date *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// the calculated mining power of the supernode for this day
	MiningPower string `protobuf:"bytes,2,opt,name=mining_power,json=miningPower,proto3" json:"mining_power,omitempty"`
	// the amount of DHX that supernode has been allocated based on mining power
	DhxAllocated string `protobuf:"bytes,12,opt,name=dhx_allocated,json=dhxAllocated,proto3" json:"dhx_allocated,omitempty"`
	// the amount of DHX that supernode has distributed
	DhxDistributed string `protobuf:"bytes,3,opt,name=dhx_distributed,json=dhxDistributed,proto3" json:"dhx_distributed,omitempty"`
	// organization id, mining power, mining limit and revenue (if requested)
	OrgId          int64  `protobuf:"varint,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	OrgMiningPower string `protobuf:"bytes,5,opt,name=org_mining_power,json=orgMiningPower,proto3" json:"org_mining_power,omitempty"`
	OrgDhxLimit    string `protobuf:"bytes,11,opt,name=org_dhx_limit,json=orgDhxLimit,proto3" json:"org_dhx_limit,omitempty"`
	OrgDhxAmount   string `protobuf:"bytes,6,opt,name=org_dhx_amount,json=orgDhxAmount,proto3" json:"org_dhx_amount,omitempty"`
	// council id, name, mining power and revenue (if the org chairs one)
	CouncilId          int64  `protobuf:"varint,7,opt,name=council_id,json=councilId,proto3" json:"council_id,omitempty"`
	CouncilName        string `protobuf:"bytes,8,opt,name=council_name,json=councilName,proto3" json:"council_name,omitempty"`
	CouncilMiningPower string `protobuf:"bytes,9,opt,name=council_mining_power,json=councilMiningPower,proto3" json:"council_mining_power,omitempty"`
	CouncilDhxAmount   string `protobuf:"bytes,10,opt,name=council_dhx_amount,json=councilDhxAmount,proto3" json:"council_dhx_amount,omitempty"`
}

func (x *DHXGetLastMiningResponse) Reset() {
	*x = DHXGetLastMiningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXGetLastMiningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXGetLastMiningResponse) ProtoMessage() {}

func (x *DHXGetLastMiningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXGetLastMiningResponse.ProtoReflect.Descriptor instead.
func (*DHXGetLastMiningResponse) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{1}
}

func (x *DHXGetLastMiningResponse) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DHXGetLastMiningResponse) GetMiningPower() string {
	if x != nil {
		return x.MiningPower
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetDhxAllocated() string {
	if x != nil {
		return x.DhxAllocated
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetDhxDistributed() string {
	if x != nil {
		return x.DhxDistributed
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DHXGetLastMiningResponse) GetOrgMiningPower() string {
	if x != nil {
		return x.OrgMiningPower
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetOrgDhxLimit() string {
	if x != nil {
		return x.OrgDhxLimit
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetOrgDhxAmount() string {
	if x != nil {
		return x.OrgDhxAmount
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetCouncilId() int64 {
	if x != nil {
		return x.CouncilId
	}
	return 0
}

func (x *DHXGetLastMiningResponse) GetCouncilName() string {
	if x != nil {
		return x.CouncilName
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetCouncilMiningPower() string {
	if x != nil {
		return x.CouncilMiningPower
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetCouncilDhxAmount() string {
	if x != nil {
		return x.CouncilDhxAmount
	}
	return ""
}

type DHXCreateStakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in which council to create the lockdrop
	CouncilId int64 `protobuf:"varint,1,opt,name=council_id,json=councilId,proto3" json:"council_id,omitempty"`
	// the stake owner
	OrgId    int64  `protobuf:"varint,6,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Amount   string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	// for how many months the stake should be locked
	LockMonths int64 `protobuf:"varint,4,opt,name=lock_months,json=lockMonths,proto3" json:"lock_months,omitempty"`
	// the boost that user expects
	Boost string `protobuf:"bytes,5,opt,name=boost,proto3" json:"boost,omitempty"`
}

func (x *DHXCreateStakeRequest) Reset() {
	*x = DHXCreateStakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXCreateStakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXCreateStakeRequest) ProtoMessage() {}

func (x *DHXCreateStakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXCreateStakeRequest.ProtoReflect.Descriptor instead.
func (*DHXCreateStakeRequest) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{2}
}

func (x *DHXCreateStakeRequest) GetCouncilId() int64 {
	if x != nil {
		return x.CouncilId
	}
	return 0
}

func (x *DHXCreateStakeRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DHXCreateStakeRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DHXCreateStakeRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DHXCreateStakeRequest) GetLockMonths() int64 {
	if x != nil {
		return x.LockMonths
	}
	return 0
}

func (x *DHXCreateStakeRequest) GetBoost() string {
	if x != nil {
		return x.Boost
	}
	return ""
}

type DHXCreateStakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created stake
	StakeId int64 `protobuf:"varint,1,opt,name=stake_id,json=stakeId,proto3" json:"stake_id,omitempty"`
}

func (x *DHXCreateStakeResponse) Reset() {
	*x = DHXCreateStakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXCreateStakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXCreateStakeResponse) ProtoMessage() {}

func (x *DHXCreateStakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXCreateStakeResponse.ProtoReflect.Descriptor instead.
func (*DHXCreateStakeResponse) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{3}
}

func (x *DHXCreateStakeResponse) GetStakeId() int64 {
	if x != nil {
		return x.StakeId
	}
	return 0
}

type DHXCreateCouncilRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// organization that will chair the council
	OrgId int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// amount that shall be staked then the council is created
	Amount   string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	// for how many months the stake should be locked
	LockMonths int64 `protobuf:"varint,4,opt,name=lock_months,json=lockMonths,proto3" json:"lock_months,omitempty"`
	// the boost that user expects
	Boost string `protobuf:"bytes,5,opt,name=boost,proto3" json:"boost,omitempty"`
	// the name of the council
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DHXCreateCouncilRequest) Reset() {
	*x = DHXCreateCouncilRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXCreateCouncilRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXCreateCouncilRequest) ProtoMessage() {}

func (x *DHXCreateCouncilRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXCreateCouncilRequest.ProtoReflect.Descriptor instead.
func (*DHXCreateCouncilRequest) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{4}
}

func (x *DHXCreateCouncilRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DHXCreateCouncilRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DHXCreateCouncilRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DHXCreateCouncilRequest) GetLockMonths() int64 {
	if x != nil {
		return x.LockMonths
	}
	return 0
}

func (x *DHXCreateCouncilRequest) GetBoost() string {
	if x != nil {
		return x.Boost
	}
	return ""
}

func (x *DHXCreateCouncilRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DHXCreateCouncilResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the council create request in the table
	CouncilId int64 `protobuf:"varint,1,opt,name=council_id,json=councilId,proto3" json:"council_id,omitempty"`
	// id of the stake that was created while creating the council
	StakeId int64 `protobuf:"varint,2,opt,name=stake_id,json=stakeId,proto3" json:"stake_id,omitempty"`
}

func (x *DHXCreateCouncilResponse) Reset() {
	*x = DHXCreateCouncilResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXCreateCouncilResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXCreateCouncilResponse) ProtoMessage() {}

func (x *DHXCreateCouncilResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXCreateCouncilResponse.ProtoReflect.Descriptor instead.
func (*DHXCreateCouncilResponse) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{5}
}

func (x *DHXCreateCouncilResponse) GetCouncilId() int64 {
	if x != nil {
		return x.CouncilId
	}
	return 0
}

func (x *DHXCreateCouncilResponse) GetStakeId() int64 {
	if x != nil {
		return x.StakeId
	}
	return 0
}

type DHXListCouncilsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DHXListCouncilsRequest) Reset() {
	*x = DHXListCouncilsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXListCouncilsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXListCouncilsRequest) ProtoMessage() {}

func (x *DHXListCouncilsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXListCouncilsRequest.ProtoReflect.Descriptor instead.
func (*DHXListCouncilsRequest) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{6}
}

type Council struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ChairOrgId     int64                `protobuf:"varint,2,opt,name=chair_org_id,json=chairOrgId,proto3" json:"chair_org_id,omitempty"`
	Name           string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	LastPaidDate   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=last_paid_date,json=lastPaidDate,proto3" json:"last_paid_date,omitempty"`
	LastMpower     string               `protobuf:"bytes,5,opt,name=last_mpower,json=lastMpower,proto3" json:"last_mpower,omitempty"`
	LastDhxRevenue string               `protobuf:"bytes,6,opt,name=last_dhx_revenue,json=lastDhxRevenue,proto3" json:"last_dhx_revenue,omitempty"`
}

func (x *Council) Reset() {
	*x = Council{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Council) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Council) ProtoMessage() {}

func (x *Council) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Council.ProtoReflect.Descriptor instead.
func (*Council) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{7}
}

func (x *Council) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Council) GetChairOrgId() int64 {
	if x != nil {
		return x.ChairOrgId
	}
	return 0
}

func (x *Council) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Council) GetLastPaidDate() *timestamp.Timestamp {
	if x != nil {
		return x.LastPaidDate
	}
	return nil
}

func (x *Council) GetLastMpower() string {
	if x != nil {
		return x.LastMpower
	}
	return ""
}

func (x *Council) GetLastDhxRevenue() string {
	if x != nil {
		return x.LastDhxRevenue
	}
	return ""
}

type DHXListCouncilsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Council []*Council `protobuf:"bytes,1,rep,name=council,proto3" json:"council,omitempty"`
}

func (x *DHXListCouncilsResponse) Reset() {
	*x = DHXListCouncilsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXListCouncilsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXListCouncilsResponse) ProtoMessage() {}

func (x *DHXListCouncilsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXListCouncilsResponse.ProtoReflect.Descriptor instead.
func (*DHXListCouncilsResponse) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{8}
}

func (x *DHXListCouncilsResponse) GetCouncil() []*Council {
	if x != nil {
		return x.Council
	}
	return nil
}

// chair_org_id or org_id must be set. Only supernode admin should be able to
// request with both set to 0
type DHXListStakesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if not 0 then return stakes for the council chaired by the specified
	// org. Only the council chair should be able to request this
	ChairOrgId int64 `protobuf:"varint,1,opt,name=chair_org_id,json=chairOrgId,proto3" json:"chair_org_id,omitempty"`
	// if not 0 then return stakes of the given organization. Only the org user
	// should be able to request this
	OrgId int64 `protobuf:"varint,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *DHXListStakesRequest) Reset() {
	*x = DHXListStakesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXListStakesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXListStakesRequest) ProtoMessage() {}

func (x *DHXListStakesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXListStakesRequest.ProtoReflect.Descriptor instead.
func (*DHXListStakesRequest) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{9}
}

func (x *DHXListStakesRequest) GetChairOrgId() int64 {
	if x != nil {
		return x.ChairOrgId
	}
	return 0
}

func (x *DHXListStakesRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type DHXStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrgId       int64                `protobuf:"varint,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Amount      string               `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency    string               `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	CouncilId   int64                `protobuf:"varint,5,opt,name=council_id,json=councilId,proto3" json:"council_id,omitempty"`
	CouncilName string               `protobuf:"bytes,6,opt,name=council_name,json=councilName,proto3" json:"council_name,omitempty"`
	Created     *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	LockTill    *timestamp.Timestamp `protobuf:"bytes,8,opt,name=lock_till,json=lockTill,proto3" json:"lock_till,omitempty"`
	Boost       string               `protobuf:"bytes,9,opt,name=boost,proto3" json:"boost,omitempty"`
	Closed      bool                 `protobuf:"varint,10,opt,name=closed,proto3" json:"closed,omitempty"`
	DhxMined    string               `protobuf:"bytes,11,opt,name=dhx_mined,json=dhxMined,proto3" json:"dhx_mined,omitempty"`
}

func (x *DHXStake) Reset() {
	*x = DHXStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXStake) ProtoMessage() {}

func (x *DHXStake) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXStake.ProtoReflect.Descriptor instead.
func (*DHXStake) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{10}
}

func (x *DHXStake) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DHXStake) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DHXStake) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DHXStake) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DHXStake) GetCouncilId() int64 {
	if x != nil {
		return x.CouncilId
	}
	return 0
}

func (x *DHXStake) GetCouncilName() string {
	if x != nil {
		return x.CouncilName
	}
	return ""
}

func (x *DHXStake) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DHXStake) GetLockTill() *timestamp.Timestamp {
	if x != nil {
		return x.LockTill
	}
	return nil
}

func (x *DHXStake) GetBoost() string {
	if x != nil {
		return x.Boost
	}
	return ""
}

func (x *DHXStake) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *DHXStake) GetDhxMined() string {
	if x != nil {
		return x.DhxMined
	}
	return ""
}

type DHXListStakesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stake []*DHXStake `protobuf:"bytes,1,rep,name=stake,proto3" json:"stake,omitempty"`
}

func (x *DHXListStakesResponse) Reset() {
	*x = DHXListStakesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXListStakesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXListStakesResponse) ProtoMessage() {}

func (x *DHXListStakesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXListStakesResponse.ProtoReflect.Descriptor instead.
func (*DHXListStakesResponse) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{11}
}

func (x *DHXListStakesResponse) GetStake() []*DHXStake {
	if x != nil {
		return x.Stake
	}
	return nil
}

type DHXBondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// organization that wants to bond DHX
	OrgId int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// amount of DHX that should be bonded
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DHXBondRequest) Reset() {
	*x = DHXBondRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXBondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXBondRequest) ProtoMessage() {}

func (x *DHXBondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXBondRequest.ProtoReflect.Descriptor instead.
func (*DHXBondRequest) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{12}
}

func (x *DHXBondRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DHXBondRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type DHXBondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DHXBondResponse) Reset() {
	*x = DHXBondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXBondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXBondResponse) ProtoMessage() {}

func (x *DHXBondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXBondResponse.ProtoReflect.Descriptor instead.
func (*DHXBondResponse) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{13}
}

type DHXUnbondRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// organization that wants to unbond DHX
	OrgId int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// amount of DHX that should be unbonded
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DHXUnbondRequest) Reset() {
	*x = DHXUnbondRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXUnbondRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXUnbondRequest) ProtoMessage() {}

func (x *DHXUnbondRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXUnbondRequest.ProtoReflect.Descriptor instead.
func (*DHXUnbondRequest) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{14}
}

func (x *DHXUnbondRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DHXUnbondRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type DHXUnbondResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DHXUnbondResponse) Reset() {
	*x = DHXUnbondResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXUnbondResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXUnbondResponse) ProtoMessage() {}

func (x *DHXUnbondResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXUnbondResponse.ProtoReflect.Descriptor instead.
func (*DHXUnbondResponse) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{15}
}

type DHXBondInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// organization for which the info should be returned
	OrgId int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *DHXBondInfoRequest) Reset() {
	*x = DHXBondInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXBondInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXBondInfoRequest) ProtoMessage() {}

func (x *DHXBondInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXBondInfoRequest.ProtoReflect.Descriptor instead.
func (*DHXBondInfoRequest) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{16}
}

func (x *DHXBondInfoRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

// info about DHX cooling off
type DHXCoolingOff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// amount that is cooling off
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// the date when cooling off has started
	Created *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *DHXCoolingOff) Reset() {
	*x = DHXCoolingOff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXCoolingOff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXCoolingOff) ProtoMessage() {}

func (x *DHXCoolingOff) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXCoolingOff.ProtoReflect.Descriptor instead.
func (*DHXCoolingOff) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{17}
}

func (x *DHXCoolingOff) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DHXCoolingOff) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

// info about DHX unbonding
type DHXUnbonding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// amount that is unbonding
	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// the date when unbonding has started
	Created *timestamp.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *DHXUnbonding) Reset() {
	*x = DHXUnbonding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXUnbonding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXUnbonding) ProtoMessage() {}

func (x *DHXUnbonding) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXUnbonding.ProtoReflect.Descriptor instead.
func (*DHXUnbonding) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{18}
}

func (x *DHXUnbonding) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DHXUnbonding) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type DHXBondInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// organization for which the info is returned
	OrgId int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// the amount of DHX bonded
	DhxBonded string `protobuf:"bytes,2,opt,name=dhx_bonded,json=dhxBonded,proto3" json:"dhx_bonded,omitempty"`
	// the total amount that is cooling off
	DhxCoolingOffTotal string `protobuf:"bytes,3,opt,name=dhx_cooling_off_total,json=dhxCoolingOffTotal,proto3" json:"dhx_cooling_off_total,omitempty"`
	// detailed info about amounts in cooling off state
	DhxCoolingOff []*DHXCoolingOff `protobuf:"bytes,4,rep,name=dhx_cooling_off,json=dhxCoolingOff,proto3" json:"dhx_cooling_off,omitempty"`
	// the total amount in unbonding state
	DhxUnbondingTotal string `protobuf:"bytes,5,opt,name=dhx_unbonding_total,json=dhxUnbondingTotal,proto3" json:"dhx_unbonding_total,omitempty"`
	// detailed info about unbonding amounts
	DhxUnbonding []*DHXUnbonding `protobuf:"bytes,6,rep,name=dhx_unbonding,json=dhxUnbonding,proto3" json:"dhx_unbonding,omitempty"`
}

func (x *DHXBondInfoResponse) Reset() {
	*x = DHXBondInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXBondInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXBondInfoResponse) ProtoMessage() {}

func (x *DHXBondInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXBondInfoResponse.ProtoReflect.Descriptor instead.
func (*DHXBondInfoResponse) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{19}
}

func (x *DHXBondInfoResponse) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DHXBondInfoResponse) GetDhxBonded() string {
	if x != nil {
		return x.DhxBonded
	}
	return ""
}

func (x *DHXBondInfoResponse) GetDhxCoolingOffTotal() string {
	if x != nil {
		return x.DhxCoolingOffTotal
	}
	return ""
}

func (x *DHXBondInfoResponse) GetDhxCoolingOff() []*DHXCoolingOff {
	if x != nil {
		return x.DhxCoolingOff
	}
	return nil
}

func (x *DHXBondInfoResponse) GetDhxUnbondingTotal() string {
	if x != nil {
		return x.DhxUnbondingTotal
	}
	return ""
}

func (x *DHXBondInfoResponse) GetDhxUnbonding() []*DHXUnbonding {
	if x != nil {
		return x.DhxUnbonding
	}
	return nil
}

type DHXMiningHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// organization for which the history is returned
	OrgId int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// the first day of the period
	From *timestamp.Timestamp `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	// the last day of the period
	Till *timestamp.Timestamp `protobuf:"bytes,3,opt,name=till,proto3" json:"till,omitempty"`
}

func (x *DHXMiningHistoryRequest) Reset() {
	*x = DHXMiningHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXMiningHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXMiningHistoryRequest) ProtoMessage() {}

func (x *DHXMiningHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXMiningHistoryRequest.ProtoReflect.Descriptor instead.
func (*DHXMiningHistoryRequest) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{20}
}

func (x *DHXMiningHistoryRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DHXMiningHistoryRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *DHXMiningHistoryRequest) GetTill() *timestamp.Timestamp {
	if x != nil {
		return x.Till
	}
	return nil
}

type DHXMining struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mining date
	MiningDate *timestamp.Timestamp `protobuf:"bytes,1,opt,name=mining_date,json=miningDate,proto3" json:"mining_date,omitempty"`
	// organization ID
	OrgId int64 `protobuf:"varint,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	// mining power of the organization on the given date
	OrgMiningPower string `protobuf:"bytes,3,opt,name=org_mining_power,json=orgMiningPower,proto3" json:"org_mining_power,omitempty"`
	// amount of DHX the org had bonded on the date
	OrgDhxBonded string `protobuf:"bytes,4,opt,name=org_dhx_bonded,json=orgDhxBonded,proto3" json:"org_dhx_bonded,omitempty"`
	// amount of DHX that was mined by the org on the date
	OrgDhxMined string `protobuf:"bytes,5,opt,name=org_dhx_mined,json=orgDhxMined,proto3" json:"org_dhx_mined,omitempty"`
}

func (x *DHXMining) Reset() {
	*x = DHXMining{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXMining) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXMining) ProtoMessage() {}

func (x *DHXMining) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXMining.ProtoReflect.Descriptor instead.
func (*DHXMining) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{21}
}

func (x *DHXMining) GetMiningDate() *timestamp.Timestamp {
	if x != nil {
		return x.MiningDate
	}
	return nil
}

func (x *DHXMining) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DHXMining) GetOrgMiningPower() string {
	if x != nil {
		return x.OrgMiningPower
	}
	return ""
}

func (x *DHXMining) GetOrgDhxBonded() string {
	if x != nil {
		return x.OrgDhxBonded
	}
	return ""
}

func (x *DHXMining) GetOrgDhxMined() string {
	if x != nil {
		return x.OrgDhxMined
	}
	return ""
}

type DHXMiningHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DHX mining daily records for the requested period
	DhxMining []*DHXMining `protobuf:"bytes,1,rep,name=dhx_mining,json=dhxMining,proto3" json:"dhx_mining,omitempty"`
}

func (x *DHXMiningHistoryResponse) Reset() {
	*x = DHXMiningHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_dhx_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXMiningHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXMiningHistoryResponse) ProtoMessage() {}

func (x *DHXMiningHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_dhx_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXMiningHistoryResponse.ProtoReflect.Descriptor instead.
func (*DHXMiningHistoryResponse) Descriptor() ([]byte, []int) {
	return file_m2m_dhx_proto_rawDescGZIP(), []int{22}
}

func (x *DHXMiningHistoryResponse) GetDhxMining() []*DHXMining {
	if x != nil {
		return x.DhxMining
	}
	return nil
}

var File_m2m_dhx_proto protoreflect.FileDescriptor

var file_m2m_dhx_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x32, 0x6d, 0x5f, 0x64, 0x68, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x14, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x17, 0x44, 0x48, 0x58, 0x47, 0x65, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0xe8, 0x03, 0x0a, 0x18, 0x44, 0x48, 0x58,
	0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x68, 0x78, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x64, 0x68, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x64, 0x68, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x68, 0x78, 0x44, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x72, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x5f, 0x64,
	0x68, 0x78, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6f, 0x72, 0x67, 0x44, 0x68, 0x78, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6f,
	0x72, 0x67, 0x5f, 0x64, 0x68, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x44, 0x68, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
	0x5f, 0x64, 0x68, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x44, 0x68, 0x78, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x22, 0x33,
	0x0a, 0x16, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x49, 0x64, 0x22, 0xaf, 0x01, 0x0a, 0x17, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62,
	0x6f, 0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x54, 0x0a, 0x18, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44,
	0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69,
	0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x4f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x70, 0x61, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x69, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x4d, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x64, 0x68, 0x78, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x68, 0x78, 0x52, 0x65, 0x76,
	0x65, 0x6e, 0x75, 0x65, 0x22, 0x52, 0x0a, 0x17, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x37, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x22, 0x4f, 0x0a, 0x14, 0x44, 0x48, 0x58, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x69, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x4f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0xe1, 0x02, 0x0a, 0x08, 0x44, 0x48,
	0x58, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x74, 0x69, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69,
	0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x68, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x68, 0x78, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x4d, 0x0a,
	0x15, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x22, 0x3f, 0x0a, 0x0e,
	0x44, 0x48, 0x58, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x11, 0x0a,
	0x0f, 0x44, 0x48, 0x58, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x41, 0x0a, 0x10, 0x44, 0x48, 0x58, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x48, 0x58, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0x0a, 0x12, 0x44, 0x48, 0x58, 0x42,
	0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x22, 0x5d, 0x0a, 0x0d, 0x44, 0x48, 0x58, 0x43, 0x6f, 0x6f, 0x6c,
	0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x22, 0x5c, 0x0a, 0x0c, 0x44, 0x48, 0x58, 0x55, 0x6e, 0x62, 0x6f, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x22, 0xc4, 0x02, 0x0a, 0x13, 0x44, 0x48, 0x58, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x68, 0x78, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x68, 0x78, 0x42, 0x6f, 0x6e, 0x64, 0x65, 0x64,
	0x12, 0x31, 0x0a, 0x15, 0x64, 0x68, 0x78, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x5f,
	0x6f, 0x66, 0x66, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x64, 0x68, 0x78, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0f, 0x64, 0x68, 0x78, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d,
	0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x66,
	0x66, 0x52, 0x0d, 0x64, 0x68, 0x78, 0x43, 0x6f, 0x6f, 0x6c, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x66,
	0x12, 0x2e, 0x0a, 0x13, 0x64, 0x68, 0x78, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64,
	0x68, 0x78, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x47, 0x0a, 0x0d, 0x64, 0x68, 0x78, 0x5f, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x48, 0x58, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x64, 0x68, 0x78,
	0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x90, 0x01, 0x0a, 0x17, 0x44, 0x48,
	0x58, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x22, 0xd3, 0x01, 0x0a,
	0x09, 0x44, 0x48, 0x58, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6f, 0x72, 0x67, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x5f,
	0x64, 0x68, 0x78, 0x5f, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6f, 0x72, 0x67, 0x44, 0x68, 0x78, 0x42, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x68, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x72, 0x67, 0x44, 0x68, 0x78, 0x4d, 0x69, 0x6e,
	0x65, 0x64, 0x22, 0x5a, 0x0a, 0x18, 0x44, 0x48, 0x58, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e,
	0x0a, 0x0a, 0x64, 0x68, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x09, 0x64, 0x68, 0x78, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x32, 0xc6,
	0x07, 0x0a, 0x0a, 0x44, 0x48, 0x58, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a,
	0x0e, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12,
	0x2b, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d,
	0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x10, 0x44, 0x48,
	0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x12, 0x2d,
	0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x63, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a,
	0x0f, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x73,
	0x12, 0x2c, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x63, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a,
	0x0d, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x12, 0x2a,
	0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6d, 0x32, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x10, 0x44, 0x48, 0x58, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x2d, 0x2e, 0x6d, 0x32,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x32, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x48, 0x58, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x44, 0x48,
	0x58, 0x42, 0x6f, 0x6e, 0x64, 0x12, 0x24, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58,
	0x42, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x32,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x42, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x5c, 0x0a, 0x09, 0x44, 0x48, 0x58, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x12,
	0x26, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x48, 0x58, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x62, 0x0a, 0x0b, 0x44, 0x48, 0x58, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x28, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x48, 0x58, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6d, 0x32, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x44, 0x48, 0x58, 0x42, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x71, 0x0a, 0x10, 0x44, 0x48, 0x58, 0x4d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2d, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x48, 0x58, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44,
	0x48, 0x58, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x78, 0x63, 0x2d, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x32, 0x6d, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_m2m_dhx_proto_rawDescOnce sync.Once
	file_m2m_dhx_proto_rawDescData = file_m2m_dhx_proto_rawDesc
)

func file_m2m_dhx_proto_rawDescGZIP() []byte {
	file_m2m_dhx_proto_rawDescOnce.Do(func() {
		file_m2m_dhx_proto_rawDescData = protoimpl.X.CompressGZIP(file_m2m_dhx_proto_rawDescData)
	})
	return file_m2m_dhx_proto_rawDescData
}

var file_m2m_dhx_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_m2m_dhx_proto_goTypes = []interface{}{
	(*DHXGetLastMiningRequest)(nil),  // 0: m2m_serves_appserver.DHXGetLastMiningRequest
	(*DHXGetLastMiningResponse)(nil), // 1: m2m_serves_appserver.DHXGetLastMiningResponse
	(*DHXCreateStakeRequest)(nil),    // 2: m2m_serves_appserver.DHXCreateStakeRequest
	(*DHXCreateStakeResponse)(nil),   // 3: m2m_serves_appserver.DHXCreateStakeResponse
	(*DHXCreateCouncilRequest)(nil),  // 4: m2m_serves_appserver.DHXCreateCouncilRequest
	(*DHXCreateCouncilResponse)(nil), // 5: m2m_serves_appserver.DHXCreateCouncilResponse
	(*DHXListCouncilsRequest)(nil),   // 6: m2m_serves_appserver.DHXListCouncilsRequest
	(*Council)(nil),                  // 7: m2m_serves_appserver.Council
	(*DHXListCouncilsResponse)(nil),  // 8: m2m_serves_appserver.DHXListCouncilsResponse
	(*DHXListStakesRequest)(nil),     // 9: m2m_serves_appserver.DHXListStakesRequest
	(*DHXStake)(nil),                 // 10: m2m_serves_appserver.DHXStake
	(*DHXListStakesResponse)(nil),    // 11: m2m_serves_appserver.DHXListStakesResponse
	(*DHXBondRequest)(nil),           // 12: m2m_serves_appserver.DHXBondRequest
	(*DHXBondResponse)(nil),          // 13: m2m_serves_appserver.DHXBondResponse
	(*DHXUnbondRequest)(nil),         // 14: m2m_serves_appserver.DHXUnbondRequest
	(*DHXUnbondResponse)(nil),        // 15: m2m_serves_appserver.DHXUnbondResponse
	(*DHXBondInfoRequest)(nil),       // 16: m2m_serves_appserver.DHXBondInfoRequest
	(*DHXCoolingOff)(nil),            // 17: m2m_serves_appserver.DHXCoolingOff
	(*DHXUnbonding)(nil),             // 18: m2m_serves_appserver.DHXUnbonding
	(*DHXBondInfoResponse)(nil),      // 19: m2m_serves_appserver.DHXBondInfoResponse
	(*DHXMiningHistoryRequest)(nil),  // 20: m2m_serves_appserver.DHXMiningHistoryRequest
	(*DHXMining)(nil),                // 21: m2m_serves_appserver.DHXMining
	(*DHXMiningHistoryResponse)(nil), // 22: m2m_serves_appserver.DHXMiningHistoryResponse
	(*timestamp.Timestamp)(nil),      // 23: google.protobuf.Timestamp
}
var file_m2m_dhx_proto_depIdxs = []int32{
	23, // 0: m2m_serves_appserver.DHXGetLastMiningResponse.date:type_name -> google.protobuf.Timestamp
	23, // 1: m2m_serves_appserver.Council.last_paid_date:type_name -> google.protobuf.Timestamp
	7,  // 2: m2m_serves_appserver.DHXListCouncilsResponse.council:type_name -> m2m_serves_appserver.Council
	23, // 3: m2m_serves_appserver.DHXStake.created:type_name -> google.protobuf.Timestamp
	23, // 4: m2m_serves_appserver.DHXStake.lock_till:type_name -> google.protobuf.Timestamp
	10, // 5: m2m_serves_appserver.DHXListStakesResponse.stake:type_name -> m2m_serves_appserver.DHXStake
	23, // 6: m2m_serves_appserver.DHXCoolingOff.created:type_name -> google.protobuf.Timestamp
	23, // 7: m2m_serves_appserver.DHXUnbonding.created:type_name -> google.protobuf.Timestamp
	17, // 8: m2m_serves_appserver.DHXBondInfoResponse.dhx_cooling_off:type_name -> m2m_serves_appserver.DHXCoolingOff
	18, // 9: m2m_serves_appserver.DHXBondInfoResponse.dhx_unbonding:type_name -> m2m_serves_appserver.DHXUnbonding
	23, // 10: m2m_serves_appserver.DHXMiningHistoryRequest.from:type_name -> google.protobuf.Timestamp
	23, // 11: m2m_serves_appserver.DHXMiningHistoryRequest.till:type_name -> google.protobuf.Timestamp
	23, // 12: m2m_serves_appserver.DHXMining.mining_date:type_name -> google.protobuf.Timestamp
	21, // 13: m2m_serves_appserver.DHXMiningHistoryResponse.dhx_mining:type_name -> m2m_serves_appserver.DHXMining
	2,  // 14: m2m_serves_appserver.DHXService.DHXCreateStake:input_type -> m2m_serves_appserver.DHXCreateStakeRequest
	4,  // 15: m2m_serves_appserver.DHXService.DHXCreateCouncil:input_type -> m2m_serves_appserver.DHXCreateCouncilRequest
	6,  // 16: m2m_serves_appserver.DHXService.DHXListCouncils:input_type -> m2m_serves_appserver.DHXListCouncilsRequest
	9,  // 17: m2m_serves_appserver.DHXService.DHXListStakes:input_type -> m2m_serves_appserver.DHXListStakesRequest
	0,  // 18: m2m_serves_appserver.DHXService.DHXGetLastMining:input_type -> m2m_serves_appserver.DHXGetLastMiningRequest
	12, // 19: m2m_serves_appserver.DHXService.DHXBond:input_type -> m2m_serves_appserver.DHXBondRequest
	14, // 20: m2m_serves_appserver.DHXService.DHXUnbond:input_type -> m2m_serves_appserver.DHXUnbondRequest
	16, // 21: m2m_serves_appserver.DHXService.DHXBondInfo:input_type -> m2m_serves_appserver.DHXBondInfoRequest
	20, // 22: m2m_serves_appserver.DHXService.DHXMiningHistory:input_type -> m2m_serves_appserver.DHXMiningHistoryRequest
	3,  // 23: m2m_serves_appserver.DHXService.DHXCreateStake:output_type -> m2m_serves_appserver.DHXCreateStakeResponse
	5,  // 24: m2m_serves_appserver.DHXService.DHXCreateCouncil:output_type -> m2m_serves_appserver.DHXCreateCouncilResponse
	8,  // 25: m2m_serves_appserver.DHXService.DHXListCouncils:output_type -> m2m_serves_appserver.DHXListCouncilsResponse
	11, // 26: m2m_serves_appserver.DHXService.DHXListStakes:output_type -> m2m_serves_appserver.DHXListStakesResponse
	1,  // 27: m2m_serves_appserver.DHXService.DHXGetLastMining:output_type -> m2m_serves_appserver.DHXGetLastMiningResponse
	13, // 28: m2m_serves_appserver.DHXService.DHXBond:output_type -> m2m_serves_appserver.DHXBondResponse
	15, // 29: m2m_serves_appserver.DHXService.DHXUnbond:output_type -> m2m_serves_appserver.DHXUnbondResponse
	19, // 30: m2m_serves_appserver.DHXService.DHXBondInfo:output_type -> m2m_serves_appserver.DHXBondInfoResponse
	22, // 31: m2m_serves_appserver.DHXService.DHXMiningHistory:output_type -> m2m_serves_appserver.DHXMiningHistoryResponse
	23, // [23:32] is the sub-list for method output_type
	14, // [14:23] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_m2m_dhx_proto_init() }
func file_m2m_dhx_proto_init() {
	if File_m2m_dhx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_m2m_dhx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXGetLastMiningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXGetLastMiningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXCreateStakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXCreateStakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXCreateCouncilRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXCreateCouncilResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXListCouncilsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Council); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXListCouncilsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXListStakesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXListStakesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXBondRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXBondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXUnbondRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXUnbondResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXBondInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXCoolingOff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXUnbonding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXBondInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXMiningHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXMining); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_dhx_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXMiningHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_m2m_dhx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_m2m_dhx_proto_goTypes,
		DependencyIndexes: file_m2m_dhx_proto_depIdxs,
		MessageInfos:      file_m2m_dhx_proto_msgTypes,
	}.Build()
	File_m2m_dhx_proto = out.File
	file_m2m_dhx_proto_rawDesc = nil
	file_m2m_dhx_proto_goTypes = nil
	file_m2m_dhx_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DHXServiceClient is the client API for DHXService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DHXServiceClient interface {
	// Request to lockdrop for DHX pre-mining
	DHXCreateStake(ctx context.Context, in *DHXCreateStakeRequest, opts ...grpc.CallOption) (*DHXCreateStakeResponse, error)
	// Request to create a new council
	DHXCreateCouncil(ctx context.Context, in *DHXCreateCouncilRequest, opts ...grpc.CallOption) (*DHXCreateCouncilResponse, error)
	// List all existing councils
	DHXListCouncils(ctx context.Context, in *DHXListCouncilsRequest, opts ...grpc.CallOption) (*DHXListCouncilsResponse, error)
	// List all dhx stakes for the organization
	DHXListStakes(ctx context.Context, in *DHXListStakesRequest, opts ...grpc.CallOption) (*DHXListStakesResponse, error)
	// Return info about the last paid day of DHX mining
	DHXGetLastMining(ctx context.Context, in *DHXGetLastMiningRequest, opts ...grpc.CallOption) (*DHXGetLastMiningResponse, error)
	// Bond DHX for mining
	DHXBond(ctx context.Context, in *DHXBondRequest, opts ...grpc.CallOption) (*DHXBondResponse, error)
	// Unbond bonded DHX
	DHXUnbond(ctx context.Context, in *DHXUnbondRequest, opts ...grpc.CallOption) (*DHXUnbondResponse, error)
	// DHXBondInfo returns info abount bonded DHX
	DHXBondInfo(ctx context.Context, in *DHXBondInfoRequest, opts ...grpc.CallOption) (*DHXBondInfoResponse, error)
	// DHXMiningHistory returns info about amounts of DHX mined during the specified period
	DHXMiningHistory(ctx context.Context, in *DHXMiningHistoryRequest, opts ...grpc.CallOption) (*DHXMiningHistoryResponse, error)
}

type dHXServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDHXServiceClient(cc grpc.ClientConnInterface) DHXServiceClient {
	return &dHXServiceClient{cc}
}

func (c *dHXServiceClient) DHXCreateStake(ctx context.Context, in *DHXCreateStakeRequest, opts ...grpc.CallOption) (*DHXCreateStakeResponse, error) {
	out := new(DHXCreateStakeResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DHXService/DHXCreateStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServiceClient) DHXCreateCouncil(ctx context.Context, in *DHXCreateCouncilRequest, opts ...grpc.CallOption) (*DHXCreateCouncilResponse, error) {
	out := new(DHXCreateCouncilResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DHXService/DHXCreateCouncil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServiceClient) DHXListCouncils(ctx context.Context, in *DHXListCouncilsRequest, opts ...grpc.CallOption) (*DHXListCouncilsResponse, error) {
	out := new(DHXListCouncilsResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DHXService/DHXListCouncils", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServiceClient) DHXListStakes(ctx context.Context, in *DHXListStakesRequest, opts ...grpc.CallOption) (*DHXListStakesResponse, error) {
	out := new(DHXListStakesResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DHXService/DHXListStakes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServiceClient) DHXGetLastMining(ctx context.Context, in *DHXGetLastMiningRequest, opts ...grpc.CallOption) (*DHXGetLastMiningResponse, error) {
	out := new(DHXGetLastMiningResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DHXService/DHXGetLastMining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServiceClient) DHXBond(ctx context.Context, in *DHXBondRequest, opts ...grpc.CallOption) (*DHXBondResponse, error) {
	out := new(DHXBondResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DHXService/DHXBond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServiceClient) DHXUnbond(ctx context.Context, in *DHXUnbondRequest, opts ...grpc.CallOption) (*DHXUnbondResponse, error) {
	out := new(DHXUnbondResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DHXService/DHXUnbond", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServiceClient) DHXBondInfo(ctx context.Context, in *DHXBondInfoRequest, opts ...grpc.CallOption) (*DHXBondInfoResponse, error) {
	out := new(DHXBondInfoResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DHXService/DHXBondInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServiceClient) DHXMiningHistory(ctx context.Context, in *DHXMiningHistoryRequest, opts ...grpc.CallOption) (*DHXMiningHistoryResponse, error) {
	out := new(DHXMiningHistoryResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.DHXService/DHXMiningHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHXServiceServer is the server API for DHXService service.
type DHXServiceServer interface {
	// Request to lockdrop for DHX pre-mining
	DHXCreateStake(context.Context, *DHXCreateStakeRequest) (*DHXCreateStakeResponse, error)
	// Request to create a new council
	DHXCreateCouncil(context.Context, *DHXCreateCouncilRequest) (*DHXCreateCouncilResponse, error)
	// List all existing councils
	DHXListCouncils(context.Context, *DHXListCouncilsRequest) (*DHXListCouncilsResponse, error)
	// List all dhx stakes for the organization
	DHXListStakes(context.Context, *DHXListStakesRequest) (*DHXListStakesResponse, error)
	// Return info about the last paid day of DHX mining
	DHXGetLastMining(context.Context, *DHXGetLastMiningRequest) (*DHXGetLastMiningResponse, error)
	// Bond DHX for mining
	DHXBond(context.Context, *DHXBondRequest) (*DHXBondResponse, error)
	// Unbond bonded DHX
	DHXUnbond(context.Context, *DHXUnbondRequest) (*DHXUnbondResponse, error)
	// DHXBondInfo returns info abount bonded DHX
	DHXBondInfo(context.Context, *DHXBondInfoRequest) (*DHXBondInfoResponse, error)
	// DHXMiningHistory returns info about amounts of DHX mined during the specified period
	DHXMiningHistory(context.Context, *DHXMiningHistoryRequest) (*DHXMiningHistoryResponse, error)
}

// UnimplementedDHXServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDHXServiceServer struct {
}

func (*UnimplementedDHXServiceServer) DHXCreateStake(context.Context, *DHXCreateStakeRequest) (*DHXCreateStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXCreateStake not implemented")
}
func (*UnimplementedDHXServiceServer) DHXCreateCouncil(context.Context, *DHXCreateCouncilRequest) (*DHXCreateCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXCreateCouncil not implemented")
}
func (*UnimplementedDHXServiceServer) DHXListCouncils(context.Context, *DHXListCouncilsRequest) (*DHXListCouncilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXListCouncils not implemented")
}
func (*UnimplementedDHXServiceServer) DHXListStakes(context.Context, *DHXListStakesRequest) (*DHXListStakesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXListStakes not implemented")
}
func (*UnimplementedDHXServiceServer) DHXGetLastMining(context.Context, *DHXGetLastMiningRequest) (*DHXGetLastMiningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXGetLastMining not implemented")
}
func (*UnimplementedDHXServiceServer) DHXBond(context.Context, *DHXBondRequest) (*DHXBondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXBond not implemented")
}
func (*UnimplementedDHXServiceServer) DHXUnbond(context.Context, *DHXUnbondRequest) (*DHXUnbondResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXUnbond not implemented")
}
func (*UnimplementedDHXServiceServer) DHXBondInfo(context.Context, *DHXBondInfoRequest) (*DHXBondInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXBondInfo not implemented")
}
func (*UnimplementedDHXServiceServer) DHXMiningHistory(context.Context, *DHXMiningHistoryRequest) (*DHXMiningHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXMiningHistory not implemented")
}

func RegisterDHXServiceServer(s *grpc.Server, srv DHXServiceServer) {
	s.RegisterService(&_DHXService_serviceDesc, srv)
}

func _DHXService_DHXCreateStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXCreateStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServiceServer).DHXCreateStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DHXService/DHXCreateStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServiceServer).DHXCreateStake(ctx, req.(*DHXCreateStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXService_DHXCreateCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXCreateCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServiceServer).DHXCreateCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DHXService/DHXCreateCouncil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServiceServer).DHXCreateCouncil(ctx, req.(*DHXCreateCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXService_DHXListCouncils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXListCouncilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServiceServer).DHXListCouncils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DHXService/DHXListCouncils",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServiceServer).DHXListCouncils(ctx, req.(*DHXListCouncilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXService_DHXListStakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXListStakesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServiceServer).DHXListStakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DHXService/DHXListStakes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServiceServer).DHXListStakes(ctx, req.(*DHXListStakesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXService_DHXGetLastMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXGetLastMiningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServiceServer).DHXGetLastMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DHXService/DHXGetLastMining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServiceServer).DHXGetLastMining(ctx, req.(*DHXGetLastMiningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXService_DHXBond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXBondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServiceServer).DHXBond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DHXService/DHXBond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServiceServer).DHXBond(ctx, req.(*DHXBondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXService_DHXUnbond_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXUnbondRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServiceServer).DHXUnbond(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DHXService/DHXUnbond",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServiceServer).DHXUnbond(ctx, req.(*DHXUnbondRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXService_DHXBondInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXBondInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServiceServer).DHXBondInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DHXService/DHXBondInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServiceServer).DHXBondInfo(ctx, req.(*DHXBondInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXService_DHXMiningHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXMiningHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServiceServer).DHXMiningHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.DHXService/DHXMiningHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServiceServer).DHXMiningHistory(ctx, req.(*DHXMiningHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DHXService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "m2m_serves_appserver.DHXService",
	HandlerType: (*DHXServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DHXCreateStake",
			Handler:    _DHXService_DHXCreateStake_Handler,
		},
		{
			MethodName: "DHXCreateCouncil",
			Handler:    _DHXService_DHXCreateCouncil_Handler,
		},
		{
			MethodName: "DHXListCouncils",
			Handler:    _DHXService_DHXListCouncils_Handler,
		},
		{
			MethodName: "DHXListStakes",
			Handler:    _DHXService_DHXListStakes_Handler,
		},
		{
			MethodName: "DHXGetLastMining",
			Handler:    _DHXService_DHXGetLastMining_Handler,
		},
		{
			MethodName: "DHXBond",
			Handler:    _DHXService_DHXBond_Handler,
		},
		{
			MethodName: "DHXUnbond",
			Handler:    _DHXService_DHXUnbond_Handler,
		},
		{
			MethodName: "DHXBondInfo",
			Handler:    _DHXService_DHXBondInfo_Handler,
		},
		{
			MethodName: "DHXMiningHistory",
			Handler:    _DHXService_DHXMiningHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "m2m_dhx.proto",
}
