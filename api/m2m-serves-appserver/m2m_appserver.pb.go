// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.2
// source: m2m_appserver.proto

package m2m_serves_appserver

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type SendStakeIncomeNotificationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakeIncomeAmount   string `protobuf:"bytes,1,opt,name=stake_income_amount,json=stakeIncomeAmount,proto3" json:"stake_income_amount,omitempty"`
	StakeAmount         string `protobuf:"bytes,2,opt,name=stake_amount,json=stakeAmount,proto3" json:"stake_amount,omitempty"`
	StakeIncomeInterest string `protobuf:"bytes,3,opt,name=stake_income_interest,json=stakeIncomeInterest,proto3" json:"stake_income_interest,omitempty"`
	StakeId             string `protobuf:"bytes,4,opt,name=stake_id,json=stakeId,proto3" json:"stake_id,omitempty"`
	StakeRevenueId      string `protobuf:"bytes,5,opt,name=stake_revenue_id,json=stakeRevenueId,proto3" json:"stake_revenue_id,omitempty"`
	StakeRevenueDate    string `protobuf:"bytes,6,opt,name=stake_revenue_date,json=stakeRevenueDate,proto3" json:"stake_revenue_date,omitempty"`
	StakeStartDate      string `protobuf:"bytes,7,opt,name=stake_start_date,json=stakeStartDate,proto3" json:"stake_start_date,omitempty"`
	OrganizationId      int64  `protobuf:"varint,8,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *SendStakeIncomeNotificationRequest) Reset() {
	*x = SendStakeIncomeNotificationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendStakeIncomeNotificationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStakeIncomeNotificationRequest) ProtoMessage() {}

func (x *SendStakeIncomeNotificationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStakeIncomeNotificationRequest.ProtoReflect.Descriptor instead.
func (*SendStakeIncomeNotificationRequest) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{0}
}

func (x *SendStakeIncomeNotificationRequest) GetStakeIncomeAmount() string {
	if x != nil {
		return x.StakeIncomeAmount
	}
	return ""
}

func (x *SendStakeIncomeNotificationRequest) GetStakeAmount() string {
	if x != nil {
		return x.StakeAmount
	}
	return ""
}

func (x *SendStakeIncomeNotificationRequest) GetStakeIncomeInterest() string {
	if x != nil {
		return x.StakeIncomeInterest
	}
	return ""
}

func (x *SendStakeIncomeNotificationRequest) GetStakeId() string {
	if x != nil {
		return x.StakeId
	}
	return ""
}

func (x *SendStakeIncomeNotificationRequest) GetStakeRevenueId() string {
	if x != nil {
		return x.StakeRevenueId
	}
	return ""
}

func (x *SendStakeIncomeNotificationRequest) GetStakeRevenueDate() string {
	if x != nil {
		return x.StakeRevenueDate
	}
	return ""
}

func (x *SendStakeIncomeNotificationRequest) GetStakeStartDate() string {
	if x != nil {
		return x.StakeStartDate
	}
	return ""
}

func (x *SendStakeIncomeNotificationRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

type SendStakeIncomeNotificationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SendStakeIncomeNotificationResponse) Reset() {
	*x = SendStakeIncomeNotificationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendStakeIncomeNotificationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendStakeIncomeNotificationResponse) ProtoMessage() {}

func (x *SendStakeIncomeNotificationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendStakeIncomeNotificationResponse.ProtoReflect.Descriptor instead.
func (*SendStakeIncomeNotificationResponse) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{1}
}

func (x *SendStakeIncomeNotificationResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type AppServerDeviceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevEui        string               `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	ApplicationId int64                `protobuf:"varint,2,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	Name          string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AppServerDeviceProfile) Reset() {
	*x = AppServerDeviceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppServerDeviceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppServerDeviceProfile) ProtoMessage() {}

func (x *AppServerDeviceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppServerDeviceProfile.ProtoReflect.Descriptor instead.
func (*AppServerDeviceProfile) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{2}
}

func (x *AppServerDeviceProfile) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *AppServerDeviceProfile) GetApplicationId() int64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

func (x *AppServerDeviceProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppServerDeviceProfile) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type AddDeviceInM2MServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      int64                   `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	DevProfile *AppServerDeviceProfile `protobuf:"bytes,2,opt,name=dev_profile,json=devProfile,proto3" json:"dev_profile,omitempty"`
}

func (x *AddDeviceInM2MServerRequest) Reset() {
	*x = AddDeviceInM2MServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDeviceInM2MServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDeviceInM2MServerRequest) ProtoMessage() {}

func (x *AddDeviceInM2MServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDeviceInM2MServerRequest.ProtoReflect.Descriptor instead.
func (*AddDeviceInM2MServerRequest) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{3}
}

func (x *AddDeviceInM2MServerRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *AddDeviceInM2MServerRequest) GetDevProfile() *AppServerDeviceProfile {
	if x != nil {
		return x.DevProfile
	}
	return nil
}

type AddDeviceInM2MServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevId int64 `protobuf:"varint,1,opt,name=dev_id,json=devId,proto3" json:"dev_id,omitempty"`
}

func (x *AddDeviceInM2MServerResponse) Reset() {
	*x = AddDeviceInM2MServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDeviceInM2MServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDeviceInM2MServerResponse) ProtoMessage() {}

func (x *AddDeviceInM2MServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDeviceInM2MServerResponse.ProtoReflect.Descriptor instead.
func (*AddDeviceInM2MServerResponse) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{4}
}

func (x *AddDeviceInM2MServerResponse) GetDevId() int64 {
	if x != nil {
		return x.DevId
	}
	return 0
}

type DeleteDeviceInM2MServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *DeleteDeviceInM2MServerRequest) Reset() {
	*x = DeleteDeviceInM2MServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceInM2MServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceInM2MServerRequest) ProtoMessage() {}

func (x *DeleteDeviceInM2MServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceInM2MServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceInM2MServerRequest) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteDeviceInM2MServerRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

type DeleteDeviceInM2MServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteDeviceInM2MServerResponse) Reset() {
	*x = DeleteDeviceInM2MServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceInM2MServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceInM2MServerResponse) ProtoMessage() {}

func (x *DeleteDeviceInM2MServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceInM2MServerResponse.ProtoReflect.Descriptor instead.
func (*DeleteDeviceInM2MServerResponse) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteDeviceInM2MServerResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type AppServerGatewayProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac         string               `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	OrgId       int64                `protobuf:"varint,2,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Description string               `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Name        string               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	CreatedAt   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AppServerGatewayProfile) Reset() {
	*x = AppServerGatewayProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppServerGatewayProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppServerGatewayProfile) ProtoMessage() {}

func (x *AppServerGatewayProfile) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppServerGatewayProfile.ProtoReflect.Descriptor instead.
func (*AppServerGatewayProfile) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{7}
}

func (x *AppServerGatewayProfile) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *AppServerGatewayProfile) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *AppServerGatewayProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AppServerGatewayProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppServerGatewayProfile) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type AddGatewayInM2MServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     int64                    `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	GwProfile *AppServerGatewayProfile `protobuf:"bytes,2,opt,name=gw_profile,json=gwProfile,proto3" json:"gw_profile,omitempty"`
}

func (x *AddGatewayInM2MServerRequest) Reset() {
	*x = AddGatewayInM2MServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGatewayInM2MServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGatewayInM2MServerRequest) ProtoMessage() {}

func (x *AddGatewayInM2MServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGatewayInM2MServerRequest.ProtoReflect.Descriptor instead.
func (*AddGatewayInM2MServerRequest) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{8}
}

func (x *AddGatewayInM2MServerRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *AddGatewayInM2MServerRequest) GetGwProfile() *AppServerGatewayProfile {
	if x != nil {
		return x.GwProfile
	}
	return nil
}

type AddGatewayInM2MServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GwId int64 `protobuf:"varint,1,opt,name=gw_id,json=gwId,proto3" json:"gw_id,omitempty"`
}

func (x *AddGatewayInM2MServerResponse) Reset() {
	*x = AddGatewayInM2MServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddGatewayInM2MServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddGatewayInM2MServerResponse) ProtoMessage() {}

func (x *AddGatewayInM2MServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddGatewayInM2MServerResponse.ProtoReflect.Descriptor instead.
func (*AddGatewayInM2MServerResponse) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{9}
}

func (x *AddGatewayInM2MServerResponse) GetGwId() int64 {
	if x != nil {
		return x.GwId
	}
	return 0
}

type DeleteGatewayInM2MServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress string `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
}

func (x *DeleteGatewayInM2MServerRequest) Reset() {
	*x = DeleteGatewayInM2MServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGatewayInM2MServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGatewayInM2MServerRequest) ProtoMessage() {}

func (x *DeleteGatewayInM2MServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGatewayInM2MServerRequest.ProtoReflect.Descriptor instead.
func (*DeleteGatewayInM2MServerRequest) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteGatewayInM2MServerRequest) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

type DeleteGatewayInM2MServerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteGatewayInM2MServerResponse) Reset() {
	*x = DeleteGatewayInM2MServerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGatewayInM2MServerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGatewayInM2MServerResponse) ProtoMessage() {}

func (x *DeleteGatewayInM2MServerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGatewayInM2MServerResponse.ProtoReflect.Descriptor instead.
func (*DeleteGatewayInM2MServerResponse) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteGatewayInM2MServerResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

type GetDeviceByDevEuiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *GetDeviceByDevEuiRequest) Reset() {
	*x = GetDeviceByDevEuiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceByDevEuiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceByDevEuiRequest) ProtoMessage() {}

func (x *GetDeviceByDevEuiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceByDevEuiRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceByDevEuiRequest) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{12}
}

func (x *GetDeviceByDevEuiRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

type GetDeviceByDevEuiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId      int64                   `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	DevProfile *AppServerDeviceProfile `protobuf:"bytes,2,opt,name=dev_profile,json=devProfile,proto3" json:"dev_profile,omitempty"`
}

func (x *GetDeviceByDevEuiResponse) Reset() {
	*x = GetDeviceByDevEuiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceByDevEuiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceByDevEuiResponse) ProtoMessage() {}

func (x *GetDeviceByDevEuiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceByDevEuiResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceByDevEuiResponse) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{13}
}

func (x *GetDeviceByDevEuiResponse) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetDeviceByDevEuiResponse) GetDevProfile() *AppServerDeviceProfile {
	if x != nil {
		return x.DevProfile
	}
	return nil
}

type GetGatewayByMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
}

func (x *GetGatewayByMacRequest) Reset() {
	*x = GetGatewayByMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayByMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayByMacRequest) ProtoMessage() {}

func (x *GetGatewayByMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayByMacRequest.ProtoReflect.Descriptor instead.
func (*GetGatewayByMacRequest) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{14}
}

func (x *GetGatewayByMacRequest) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

type GetGatewayByMacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId     int64                    `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	GwProfile *AppServerGatewayProfile `protobuf:"bytes,2,opt,name=gw_profile,json=gwProfile,proto3" json:"gw_profile,omitempty"`
}

func (x *GetGatewayByMacResponse) Reset() {
	*x = GetGatewayByMacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayByMacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayByMacResponse) ProtoMessage() {}

func (x *GetGatewayByMacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayByMacResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayByMacResponse) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{15}
}

func (x *GetGatewayByMacResponse) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetGatewayByMacResponse) GetGwProfile() *AppServerGatewayProfile {
	if x != nil {
		return x.GwProfile
	}
	return nil
}

type GetDeviceDevEuiListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevEui []string `protobuf:"bytes,1,rep,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *GetDeviceDevEuiListResponse) Reset() {
	*x = GetDeviceDevEuiListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceDevEuiListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceDevEuiListResponse) ProtoMessage() {}

func (x *GetDeviceDevEuiListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceDevEuiListResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceDevEuiListResponse) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{16}
}

func (x *GetDeviceDevEuiListResponse) GetDevEui() []string {
	if x != nil {
		return x.DevEui
	}
	return nil
}

type GetGatewayMacListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GatewayMac []string `protobuf:"bytes,1,rep,name=gateway_mac,json=gatewayMac,proto3" json:"gateway_mac,omitempty"`
}

func (x *GetGatewayMacListResponse) Reset() {
	*x = GetGatewayMacListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_appserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayMacListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayMacListResponse) ProtoMessage() {}

func (x *GetGatewayMacListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_appserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayMacListResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayMacListResponse) Descriptor() ([]byte, []int) {
	return file_m2m_appserver_proto_rawDescGZIP(), []int{17}
}

func (x *GetGatewayMacListResponse) GetGatewayMac() []string {
	if x != nil {
		return x.GatewayMac
	}
	return nil
}

var File_m2m_appserver_proto protoreflect.FileDescriptor

var file_m2m_appserver_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x32, 0x6d, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf1, 0x02, 0x0a, 0x22, 0x53, 0x65,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x63,
	0x6f, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x65,
	0x6e, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x3d, 0x0a,
	0x23, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa7, 0x01, 0x0a,
	0x16, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65,
	0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x41, 0x64, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x4d, 0x0a,
	0x0b, 0x64, 0x65, 0x76, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x35, 0x0a, 0x1c,
	0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65,
	0x76, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x1e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0x39,
	0x0a, 0x1f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x17, 0x41, 0x70,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x83, 0x01, 0x0a, 0x1c, 0x41, 0x64, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e,
	0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x67, 0x77, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x32,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x67, 0x77, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x34, 0x0a, 0x1d, 0x41, 0x64, 0x64, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x77, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x77, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x1f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x4d, 0x32,
	0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x3a, 0x0a, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x33, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x44, 0x65, 0x76, 0x45, 0x75, 0x69,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65,
	0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69,
	0x22, 0x81, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79,
	0x44, 0x65, 0x76, 0x45, 0x75, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x32, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x2a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x42, 0x79, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x22, 0x7e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x79,
	0x4d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x6f,
	0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67,
	0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0a, 0x67, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x70,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x67, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0x36, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x76,
	0x45, 0x75, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0x3c, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x61, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x5f, 0x6d, 0x61, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4d, 0x61, 0x63, 0x32, 0xa9, 0x04, 0x0a, 0x10, 0x4d, 0x32, 0x4d, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x7d, 0x0a, 0x14, 0x41,
	0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x31, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x4d, 0x32, 0x4d,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6d,
	0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x32, 0x2e,
	0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x35, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x36, 0x2e, 0x6d, 0x32, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49,
	0x6e, 0x4d, 0x32, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xcd, 0x04, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x44, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x2e, 0x2e, 0x6d,
	0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x44,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d,
	0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x44,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6e, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x79, 0x4d, 0x61, 0x63,
	0x12, 0x2c, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x42, 0x79, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x42, 0x79, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x76, 0x45, 0x75, 0x69,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x31, 0x2e, 0x6d,
	0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x76,
	0x45, 0x75, 0x69, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x61, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2f, 0x2e, 0x6d,
	0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x61,
	0x63, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x92, 0x01,
	0x0a, 0x1b, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d,
	0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x2e,
	0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x39, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x78, 0x63, 0x2d, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6d, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_m2m_appserver_proto_rawDescOnce sync.Once
	file_m2m_appserver_proto_rawDescData = file_m2m_appserver_proto_rawDesc
)

func file_m2m_appserver_proto_rawDescGZIP() []byte {
	file_m2m_appserver_proto_rawDescOnce.Do(func() {
		file_m2m_appserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_m2m_appserver_proto_rawDescData)
	})
	return file_m2m_appserver_proto_rawDescData
}

var file_m2m_appserver_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_m2m_appserver_proto_goTypes = []interface{}{
	(*SendStakeIncomeNotificationRequest)(nil),  // 0: m2m_serves_appserver.SendStakeIncomeNotificationRequest
	(*SendStakeIncomeNotificationResponse)(nil), // 1: m2m_serves_appserver.SendStakeIncomeNotificationResponse
	(*AppServerDeviceProfile)(nil),              // 2: m2m_serves_appserver.AppServerDeviceProfile
	(*AddDeviceInM2MServerRequest)(nil),         // 3: m2m_serves_appserver.AddDeviceInM2MServerRequest
	(*AddDeviceInM2MServerResponse)(nil),        // 4: m2m_serves_appserver.AddDeviceInM2MServerResponse
	(*DeleteDeviceInM2MServerRequest)(nil),      // 5: m2m_serves_appserver.DeleteDeviceInM2MServerRequest
	(*DeleteDeviceInM2MServerResponse)(nil),     // 6: m2m_serves_appserver.DeleteDeviceInM2MServerResponse
	(*AppServerGatewayProfile)(nil),             // 7: m2m_serves_appserver.AppServerGatewayProfile
	(*AddGatewayInM2MServerRequest)(nil),        // 8: m2m_serves_appserver.AddGatewayInM2MServerRequest
	(*AddGatewayInM2MServerResponse)(nil),       // 9: m2m_serves_appserver.AddGatewayInM2MServerResponse
	(*DeleteGatewayInM2MServerRequest)(nil),     // 10: m2m_serves_appserver.DeleteGatewayInM2MServerRequest
	(*DeleteGatewayInM2MServerResponse)(nil),    // 11: m2m_serves_appserver.DeleteGatewayInM2MServerResponse
	(*GetDeviceByDevEuiRequest)(nil),            // 12: m2m_serves_appserver.GetDeviceByDevEuiRequest
	(*GetDeviceByDevEuiResponse)(nil),           // 13: m2m_serves_appserver.GetDeviceByDevEuiResponse
	(*GetGatewayByMacRequest)(nil),              // 14: m2m_serves_appserver.GetGatewayByMacRequest
	(*GetGatewayByMacResponse)(nil),             // 15: m2m_serves_appserver.GetGatewayByMacResponse
	(*GetDeviceDevEuiListResponse)(nil),         // 16: m2m_serves_appserver.GetDeviceDevEuiListResponse
	(*GetGatewayMacListResponse)(nil),           // 17: m2m_serves_appserver.GetGatewayMacListResponse
	(*timestamp.Timestamp)(nil),                 // 18: google.protobuf.Timestamp
	(*empty.Empty)(nil),                         // 19: google.protobuf.Empty
}
var file_m2m_appserver_proto_depIdxs = []int32{
	18, // 0: m2m_serves_appserver.AppServerDeviceProfile.created_at:type_name -> google.protobuf.Timestamp
	2,  // 1: m2m_serves_appserver.AddDeviceInM2MServerRequest.dev_profile:type_name -> m2m_serves_appserver.AppServerDeviceProfile
	18, // 2: m2m_serves_appserver.AppServerGatewayProfile.created_at:type_name -> google.protobuf.Timestamp
	7,  // 3: m2m_serves_appserver.AddGatewayInM2MServerRequest.gw_profile:type_name -> m2m_serves_appserver.AppServerGatewayProfile
	2,  // 4: m2m_serves_appserver.GetDeviceByDevEuiResponse.dev_profile:type_name -> m2m_serves_appserver.AppServerDeviceProfile
	7,  // 5: m2m_serves_appserver.GetGatewayByMacResponse.gw_profile:type_name -> m2m_serves_appserver.AppServerGatewayProfile
	3,  // 6: m2m_serves_appserver.M2MServerService.AddDeviceInM2MServer:input_type -> m2m_serves_appserver.AddDeviceInM2MServerRequest
	5,  // 7: m2m_serves_appserver.M2MServerService.DeleteDeviceInM2MServer:input_type -> m2m_serves_appserver.DeleteDeviceInM2MServerRequest
	8,  // 8: m2m_serves_appserver.M2MServerService.AddGatewayInM2MServer:input_type -> m2m_serves_appserver.AddGatewayInM2MServerRequest
	10, // 9: m2m_serves_appserver.M2MServerService.DeleteGatewayInM2MServer:input_type -> m2m_serves_appserver.DeleteGatewayInM2MServerRequest
	12, // 10: m2m_serves_appserver.AppServerService.GetDeviceByDevEui:input_type -> m2m_serves_appserver.GetDeviceByDevEuiRequest
	14, // 11: m2m_serves_appserver.AppServerService.GetGatewayByMac:input_type -> m2m_serves_appserver.GetGatewayByMacRequest
	19, // 12: m2m_serves_appserver.AppServerService.GetDeviceDevEuiList:input_type -> google.protobuf.Empty
	19, // 13: m2m_serves_appserver.AppServerService.GetGatewayMacList:input_type -> google.protobuf.Empty
	0,  // 14: m2m_serves_appserver.AppServerService.SendStakeIncomeNotification:input_type -> m2m_serves_appserver.SendStakeIncomeNotificationRequest
	4,  // 15: m2m_serves_appserver.M2MServerService.AddDeviceInM2MServer:output_type -> m2m_serves_appserver.AddDeviceInM2MServerResponse
	6,  // 16: m2m_serves_appserver.M2MServerService.DeleteDeviceInM2MServer:output_type -> m2m_serves_appserver.DeleteDeviceInM2MServerResponse
	9,  // 17: m2m_serves_appserver.M2MServerService.AddGatewayInM2MServer:output_type -> m2m_serves_appserver.AddGatewayInM2MServerResponse
	11, // 18: m2m_serves_appserver.M2MServerService.DeleteGatewayInM2MServer:output_type -> m2m_serves_appserver.DeleteGatewayInM2MServerResponse
	13, // 19: m2m_serves_appserver.AppServerService.GetDeviceByDevEui:output_type -> m2m_serves_appserver.GetDeviceByDevEuiResponse
	15, // 20: m2m_serves_appserver.AppServerService.GetGatewayByMac:output_type -> m2m_serves_appserver.GetGatewayByMacResponse
	16, // 21: m2m_serves_appserver.AppServerService.GetDeviceDevEuiList:output_type -> m2m_serves_appserver.GetDeviceDevEuiListResponse
	17, // 22: m2m_serves_appserver.AppServerService.GetGatewayMacList:output_type -> m2m_serves_appserver.GetGatewayMacListResponse
	1,  // 23: m2m_serves_appserver.AppServerService.SendStakeIncomeNotification:output_type -> m2m_serves_appserver.SendStakeIncomeNotificationResponse
	15, // [15:24] is the sub-list for method output_type
	6,  // [6:15] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_m2m_appserver_proto_init() }
func file_m2m_appserver_proto_init() {
	if File_m2m_appserver_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_m2m_appserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendStakeIncomeNotificationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendStakeIncomeNotificationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppServerDeviceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDeviceInM2MServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDeviceInM2MServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceInM2MServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceInM2MServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppServerGatewayProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGatewayInM2MServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddGatewayInM2MServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGatewayInM2MServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGatewayInM2MServerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceByDevEuiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceByDevEuiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayByMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayByMacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceDevEuiListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_appserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayMacListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_m2m_appserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_m2m_appserver_proto_goTypes,
		DependencyIndexes: file_m2m_appserver_proto_depIdxs,
		MessageInfos:      file_m2m_appserver_proto_msgTypes,
	}.Build()
	File_m2m_appserver_proto = out.File
	file_m2m_appserver_proto_rawDesc = nil
	file_m2m_appserver_proto_goTypes = nil
	file_m2m_appserver_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// M2MServerServiceClient is the client API for M2MServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type M2MServerServiceClient interface {
	AddDeviceInM2MServer(ctx context.Context, in *AddDeviceInM2MServerRequest, opts ...grpc.CallOption) (*AddDeviceInM2MServerResponse, error)
	DeleteDeviceInM2MServer(ctx context.Context, in *DeleteDeviceInM2MServerRequest, opts ...grpc.CallOption) (*DeleteDeviceInM2MServerResponse, error)
	AddGatewayInM2MServer(ctx context.Context, in *AddGatewayInM2MServerRequest, opts ...grpc.CallOption) (*AddGatewayInM2MServerResponse, error)
	DeleteGatewayInM2MServer(ctx context.Context, in *DeleteGatewayInM2MServerRequest, opts ...grpc.CallOption) (*DeleteGatewayInM2MServerResponse, error)
}

type m2MServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewM2MServerServiceClient(cc grpc.ClientConnInterface) M2MServerServiceClient {
	return &m2MServerServiceClient{cc}
}

func (c *m2MServerServiceClient) AddDeviceInM2MServer(ctx context.Context, in *AddDeviceInM2MServerRequest, opts ...grpc.CallOption) (*AddDeviceInM2MServerResponse, error) {
	out := new(AddDeviceInM2MServerResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.M2MServerService/AddDeviceInM2MServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *m2MServerServiceClient) DeleteDeviceInM2MServer(ctx context.Context, in *DeleteDeviceInM2MServerRequest, opts ...grpc.CallOption) (*DeleteDeviceInM2MServerResponse, error) {
	out := new(DeleteDeviceInM2MServerResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.M2MServerService/DeleteDeviceInM2MServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *m2MServerServiceClient) AddGatewayInM2MServer(ctx context.Context, in *AddGatewayInM2MServerRequest, opts ...grpc.CallOption) (*AddGatewayInM2MServerResponse, error) {
	out := new(AddGatewayInM2MServerResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.M2MServerService/AddGatewayInM2MServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *m2MServerServiceClient) DeleteGatewayInM2MServer(ctx context.Context, in *DeleteGatewayInM2MServerRequest, opts ...grpc.CallOption) (*DeleteGatewayInM2MServerResponse, error) {
	out := new(DeleteGatewayInM2MServerResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.M2MServerService/DeleteGatewayInM2MServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// M2MServerServiceServer is the server API for M2MServerService service.
type M2MServerServiceServer interface {
	AddDeviceInM2MServer(context.Context, *AddDeviceInM2MServerRequest) (*AddDeviceInM2MServerResponse, error)
	DeleteDeviceInM2MServer(context.Context, *DeleteDeviceInM2MServerRequest) (*DeleteDeviceInM2MServerResponse, error)
	AddGatewayInM2MServer(context.Context, *AddGatewayInM2MServerRequest) (*AddGatewayInM2MServerResponse, error)
	DeleteGatewayInM2MServer(context.Context, *DeleteGatewayInM2MServerRequest) (*DeleteGatewayInM2MServerResponse, error)
}

// UnimplementedM2MServerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedM2MServerServiceServer struct {
}

func (*UnimplementedM2MServerServiceServer) AddDeviceInM2MServer(context.Context, *AddDeviceInM2MServerRequest) (*AddDeviceInM2MServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceInM2MServer not implemented")
}
func (*UnimplementedM2MServerServiceServer) DeleteDeviceInM2MServer(context.Context, *DeleteDeviceInM2MServerRequest) (*DeleteDeviceInM2MServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceInM2MServer not implemented")
}
func (*UnimplementedM2MServerServiceServer) AddGatewayInM2MServer(context.Context, *AddGatewayInM2MServerRequest) (*AddGatewayInM2MServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGatewayInM2MServer not implemented")
}
func (*UnimplementedM2MServerServiceServer) DeleteGatewayInM2MServer(context.Context, *DeleteGatewayInM2MServerRequest) (*DeleteGatewayInM2MServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGatewayInM2MServer not implemented")
}

func RegisterM2MServerServiceServer(s *grpc.Server, srv M2MServerServiceServer) {
	s.RegisterService(&_M2MServerService_serviceDesc, srv)
}

func _M2MServerService_AddDeviceInM2MServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceInM2MServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M2MServerServiceServer).AddDeviceInM2MServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.M2MServerService/AddDeviceInM2MServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M2MServerServiceServer).AddDeviceInM2MServer(ctx, req.(*AddDeviceInM2MServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _M2MServerService_DeleteDeviceInM2MServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceInM2MServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M2MServerServiceServer).DeleteDeviceInM2MServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.M2MServerService/DeleteDeviceInM2MServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M2MServerServiceServer).DeleteDeviceInM2MServer(ctx, req.(*DeleteDeviceInM2MServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _M2MServerService_AddGatewayInM2MServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGatewayInM2MServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M2MServerServiceServer).AddGatewayInM2MServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.M2MServerService/AddGatewayInM2MServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M2MServerServiceServer).AddGatewayInM2MServer(ctx, req.(*AddGatewayInM2MServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _M2MServerService_DeleteGatewayInM2MServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayInM2MServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(M2MServerServiceServer).DeleteGatewayInM2MServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.M2MServerService/DeleteGatewayInM2MServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(M2MServerServiceServer).DeleteGatewayInM2MServer(ctx, req.(*DeleteGatewayInM2MServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _M2MServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "m2m_serves_appserver.M2MServerService",
	HandlerType: (*M2MServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDeviceInM2MServer",
			Handler:    _M2MServerService_AddDeviceInM2MServer_Handler,
		},
		{
			MethodName: "DeleteDeviceInM2MServer",
			Handler:    _M2MServerService_DeleteDeviceInM2MServer_Handler,
		},
		{
			MethodName: "AddGatewayInM2MServer",
			Handler:    _M2MServerService_AddGatewayInM2MServer_Handler,
		},
		{
			MethodName: "DeleteGatewayInM2MServer",
			Handler:    _M2MServerService_DeleteGatewayInM2MServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "m2m_appserver.proto",
}

// AppServerServiceClient is the client API for AppServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AppServerServiceClient interface {
	GetDeviceByDevEui(ctx context.Context, in *GetDeviceByDevEuiRequest, opts ...grpc.CallOption) (*GetDeviceByDevEuiResponse, error)
	GetGatewayByMac(ctx context.Context, in *GetGatewayByMacRequest, opts ...grpc.CallOption) (*GetGatewayByMacResponse, error)
	GetDeviceDevEuiList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetDeviceDevEuiListResponse, error)
	GetGatewayMacList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetGatewayMacListResponse, error)
	SendStakeIncomeNotification(ctx context.Context, in *SendStakeIncomeNotificationRequest, opts ...grpc.CallOption) (*SendStakeIncomeNotificationResponse, error)
}

type appServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppServerServiceClient(cc grpc.ClientConnInterface) AppServerServiceClient {
	return &appServerServiceClient{cc}
}

func (c *appServerServiceClient) GetDeviceByDevEui(ctx context.Context, in *GetDeviceByDevEuiRequest, opts ...grpc.CallOption) (*GetDeviceByDevEuiResponse, error) {
	out := new(GetDeviceByDevEuiResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.AppServerService/GetDeviceByDevEui", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServerServiceClient) GetGatewayByMac(ctx context.Context, in *GetGatewayByMacRequest, opts ...grpc.CallOption) (*GetGatewayByMacResponse, error) {
	out := new(GetGatewayByMacResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.AppServerService/GetGatewayByMac", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServerServiceClient) GetDeviceDevEuiList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetDeviceDevEuiListResponse, error) {
	out := new(GetDeviceDevEuiListResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.AppServerService/GetDeviceDevEuiList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServerServiceClient) GetGatewayMacList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetGatewayMacListResponse, error) {
	out := new(GetGatewayMacListResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.AppServerService/GetGatewayMacList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appServerServiceClient) SendStakeIncomeNotification(ctx context.Context, in *SendStakeIncomeNotificationRequest, opts ...grpc.CallOption) (*SendStakeIncomeNotificationResponse, error) {
	out := new(SendStakeIncomeNotificationResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.AppServerService/SendStakeIncomeNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppServerServiceServer is the server API for AppServerService service.
type AppServerServiceServer interface {
	GetDeviceByDevEui(context.Context, *GetDeviceByDevEuiRequest) (*GetDeviceByDevEuiResponse, error)
	GetGatewayByMac(context.Context, *GetGatewayByMacRequest) (*GetGatewayByMacResponse, error)
	GetDeviceDevEuiList(context.Context, *empty.Empty) (*GetDeviceDevEuiListResponse, error)
	GetGatewayMacList(context.Context, *empty.Empty) (*GetGatewayMacListResponse, error)
	SendStakeIncomeNotification(context.Context, *SendStakeIncomeNotificationRequest) (*SendStakeIncomeNotificationResponse, error)
}

// UnimplementedAppServerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAppServerServiceServer struct {
}

func (*UnimplementedAppServerServiceServer) GetDeviceByDevEui(context.Context, *GetDeviceByDevEuiRequest) (*GetDeviceByDevEuiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceByDevEui not implemented")
}
func (*UnimplementedAppServerServiceServer) GetGatewayByMac(context.Context, *GetGatewayByMacRequest) (*GetGatewayByMacResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayByMac not implemented")
}
func (*UnimplementedAppServerServiceServer) GetDeviceDevEuiList(context.Context, *empty.Empty) (*GetDeviceDevEuiListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceDevEuiList not implemented")
}
func (*UnimplementedAppServerServiceServer) GetGatewayMacList(context.Context, *empty.Empty) (*GetGatewayMacListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayMacList not implemented")
}
func (*UnimplementedAppServerServiceServer) SendStakeIncomeNotification(context.Context, *SendStakeIncomeNotificationRequest) (*SendStakeIncomeNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendStakeIncomeNotification not implemented")
}

func RegisterAppServerServiceServer(s *grpc.Server, srv AppServerServiceServer) {
	s.RegisterService(&_AppServerService_serviceDesc, srv)
}

func _AppServerService_GetDeviceByDevEui_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceByDevEuiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServerServiceServer).GetDeviceByDevEui(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.AppServerService/GetDeviceByDevEui",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServerServiceServer).GetDeviceByDevEui(ctx, req.(*GetDeviceByDevEuiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppServerService_GetGatewayByMac_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayByMacRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServerServiceServer).GetGatewayByMac(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.AppServerService/GetGatewayByMac",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServerServiceServer).GetGatewayByMac(ctx, req.(*GetGatewayByMacRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppServerService_GetDeviceDevEuiList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServerServiceServer).GetDeviceDevEuiList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.AppServerService/GetDeviceDevEuiList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServerServiceServer).GetDeviceDevEuiList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppServerService_GetGatewayMacList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServerServiceServer).GetGatewayMacList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.AppServerService/GetGatewayMacList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServerServiceServer).GetGatewayMacList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppServerService_SendStakeIncomeNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendStakeIncomeNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppServerServiceServer).SendStakeIncomeNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.AppServerService/SendStakeIncomeNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppServerServiceServer).SendStakeIncomeNotification(ctx, req.(*SendStakeIncomeNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AppServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "m2m_serves_appserver.AppServerService",
	HandlerType: (*AppServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDeviceByDevEui",
			Handler:    _AppServerService_GetDeviceByDevEui_Handler,
		},
		{
			MethodName: "GetGatewayByMac",
			Handler:    _AppServerService_GetGatewayByMac_Handler,
		},
		{
			MethodName: "GetDeviceDevEuiList",
			Handler:    _AppServerService_GetDeviceDevEuiList_Handler,
		},
		{
			MethodName: "GetGatewayMacList",
			Handler:    _AppServerService_GetGatewayMacList_Handler,
		},
		{
			MethodName: "SendStakeIncomeNotification",
			Handler:    _AppServerService_SendStakeIncomeNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "m2m_appserver.proto",
}
