// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.2
// source: m2m_staking.proto

package m2m_serves_appserver

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type StakingRevenueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    int64                `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Currency string               `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	From     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Till     *timestamp.Timestamp `protobuf:"bytes,4,opt,name=till,proto3" json:"till,omitempty"`
}

func (x *StakingRevenueRequest) Reset() {
	*x = StakingRevenueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRevenueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRevenueRequest) ProtoMessage() {}

func (x *StakingRevenueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRevenueRequest.ProtoReflect.Descriptor instead.
func (*StakingRevenueRequest) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{0}
}

func (x *StakingRevenueRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *StakingRevenueRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *StakingRevenueRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *StakingRevenueRequest) GetTill() *timestamp.Timestamp {
	if x != nil {
		return x.Till
	}
	return nil
}

type StakingRevenueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount string `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *StakingRevenueResponse) Reset() {
	*x = StakingRevenueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingRevenueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingRevenueResponse) ProtoMessage() {}

func (x *StakingRevenueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingRevenueResponse.ProtoReflect.Descriptor instead.
func (*StakingRevenueResponse) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{1}
}

func (x *StakingRevenueResponse) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type StakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    int64  `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Amount   string `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency string `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *StakeRequest) Reset() {
	*x = StakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeRequest) ProtoMessage() {}

func (x *StakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeRequest.ProtoReflect.Descriptor instead.
func (*StakeRequest) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{2}
}

func (x *StakeRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *StakeRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StakeRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type StakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *StakeResponse) Reset() {
	*x = StakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakeResponse) ProtoMessage() {}

func (x *StakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakeResponse.ProtoReflect.Descriptor instead.
func (*StakeResponse) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{3}
}

func (x *StakeResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UnstakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    int64  `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *UnstakeRequest) Reset() {
	*x = UnstakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnstakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstakeRequest) ProtoMessage() {}

func (x *UnstakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstakeRequest.ProtoReflect.Descriptor instead.
func (*UnstakeRequest) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{4}
}

func (x *UnstakeRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *UnstakeRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type UnstakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UnstakeResponse) Reset() {
	*x = UnstakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnstakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstakeResponse) ProtoMessage() {}

func (x *UnstakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstakeResponse.ProtoReflect.Descriptor instead.
func (*UnstakeResponse) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{5}
}

func (x *UnstakeResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type GetActiveStakesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    int64  `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *GetActiveStakesRequest) Reset() {
	*x = GetActiveStakesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveStakesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveStakesRequest) ProtoMessage() {}

func (x *GetActiveStakesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveStakesRequest.ProtoReflect.Descriptor instead.
func (*GetActiveStakesRequest) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{6}
}

func (x *GetActiveStakesRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetActiveStakesRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type ActiveStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	StakeStatus string               `protobuf:"bytes,4,opt,name=stake_status,json=stakeStatus,proto3" json:"stake_status,omitempty"`
	StartTime   *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime     *timestamp.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Amount      string               `protobuf:"bytes,7,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *ActiveStake) Reset() {
	*x = ActiveStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveStake) ProtoMessage() {}

func (x *ActiveStake) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveStake.ProtoReflect.Descriptor instead.
func (*ActiveStake) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{7}
}

func (x *ActiveStake) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ActiveStake) GetStakeStatus() string {
	if x != nil {
		return x.StakeStatus
	}
	return ""
}

func (x *ActiveStake) GetStartTime() *timestamp.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *ActiveStake) GetEndTime() *timestamp.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *ActiveStake) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

type GetActiveStakesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActStake *ActiveStake `protobuf:"bytes,1,opt,name=act_stake,json=actStake,proto3" json:"act_stake,omitempty"`
}

func (x *GetActiveStakesResponse) Reset() {
	*x = GetActiveStakesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveStakesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveStakesResponse) ProtoMessage() {}

func (x *GetActiveStakesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveStakesResponse.ProtoReflect.Descriptor instead.
func (*GetActiveStakesResponse) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{8}
}

func (x *GetActiveStakesResponse) GetActStake() *ActiveStake {
	if x != nil {
		return x.ActStake
	}
	return nil
}

type StakingHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    int64                `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Currency string               `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	From     *timestamp.Timestamp `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
	Till     *timestamp.Timestamp `protobuf:"bytes,6,opt,name=till,proto3" json:"till,omitempty"`
}

func (x *StakingHistoryRequest) Reset() {
	*x = StakingHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingHistoryRequest) ProtoMessage() {}

func (x *StakingHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingHistoryRequest.ProtoReflect.Descriptor instead.
func (*StakingHistoryRequest) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{9}
}

func (x *StakingHistoryRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *StakingHistoryRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *StakingHistoryRequest) GetFrom() *timestamp.Timestamp {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *StakingHistoryRequest) GetTill() *timestamp.Timestamp {
	if x != nil {
		return x.Till
	}
	return nil
}

type StakingHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amount    string               `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Type      string               `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *StakingHistory) Reset() {
	*x = StakingHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingHistory) ProtoMessage() {}

func (x *StakingHistory) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingHistory.ProtoReflect.Descriptor instead.
func (*StakingHistory) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{10}
}

func (x *StakingHistory) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *StakingHistory) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *StakingHistory) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type StakingHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingHist []*StakingHistory `protobuf:"bytes,1,rep,name=staking_hist,json=stakingHist,proto3" json:"staking_hist,omitempty"`
}

func (x *StakingHistoryResponse) Reset() {
	*x = StakingHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingHistoryResponse) ProtoMessage() {}

func (x *StakingHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingHistoryResponse.ProtoReflect.Descriptor instead.
func (*StakingHistoryResponse) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{11}
}

func (x *StakingHistoryResponse) GetStakingHist() []*StakingHistory {
	if x != nil {
		return x.StakingHist
	}
	return nil
}

type StakingPercentageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId    int64  `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *StakingPercentageRequest) Reset() {
	*x = StakingPercentageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingPercentageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingPercentageRequest) ProtoMessage() {}

func (x *StakingPercentageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingPercentageRequest.ProtoReflect.Descriptor instead.
func (*StakingPercentageRequest) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{12}
}

func (x *StakingPercentageRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *StakingPercentageRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

type StakingPercentageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StakingPercentage float64 `protobuf:"fixed64,1,opt,name=staking_percentage,json=stakingPercentage,proto3" json:"staking_percentage,omitempty"`
}

func (x *StakingPercentageResponse) Reset() {
	*x = StakingPercentageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_staking_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StakingPercentageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StakingPercentageResponse) ProtoMessage() {}

func (x *StakingPercentageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_staking_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StakingPercentageResponse.ProtoReflect.Descriptor instead.
func (*StakingPercentageResponse) Descriptor() ([]byte, []int) {
	return file_m2m_staking_proto_rawDescGZIP(), []int{13}
}

func (x *StakingPercentageResponse) GetStakingPercentage() float64 {
	if x != nil {
		return x.StakingPercentage
	}
	return 0
}

var File_m2m_staking_proto protoreflect.FileDescriptor

var file_m2m_staking_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f,
	0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x15, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x22, 0x30, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x22, 0x27, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x43, 0x0a,
	0x0e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x22, 0x29, 0x0a, 0x0f, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4b, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xca, 0x01, 0x0a, 0x0b, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x59, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x08, 0x61, 0x63, 0x74, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x22, 0xaa, 0x01, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x6c, 0x22,
	0x76, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x47, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0b, 0x73,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x22, 0x4d, 0x0a, 0x18, 0x53, 0x74,
	0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x4a, 0x0a, 0x19, 0x53, 0x74, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x61, 0x67, 0x65, 0x32, 0x83, 0x05, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x22, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x07, 0x55, 0x6e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x24, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x55, 0x6e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6d, 0x32,
	0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x73, 0x12, 0x2c, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x2b, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x6b,
	0x69, 0x6e, 0x67, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x77, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x2e, 0x6d, 0x32, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x32, 0x6d,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x46, 0x5a, 0x44, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x78, 0x63, 0x2d, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x78, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_m2m_staking_proto_rawDescOnce sync.Once
	file_m2m_staking_proto_rawDescData = file_m2m_staking_proto_rawDesc
)

func file_m2m_staking_proto_rawDescGZIP() []byte {
	file_m2m_staking_proto_rawDescOnce.Do(func() {
		file_m2m_staking_proto_rawDescData = protoimpl.X.CompressGZIP(file_m2m_staking_proto_rawDescData)
	})
	return file_m2m_staking_proto_rawDescData
}

var file_m2m_staking_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_m2m_staking_proto_goTypes = []interface{}{
	(*StakingRevenueRequest)(nil),     // 0: m2m_serves_appserver.StakingRevenueRequest
	(*StakingRevenueResponse)(nil),    // 1: m2m_serves_appserver.StakingRevenueResponse
	(*StakeRequest)(nil),              // 2: m2m_serves_appserver.StakeRequest
	(*StakeResponse)(nil),             // 3: m2m_serves_appserver.StakeResponse
	(*UnstakeRequest)(nil),            // 4: m2m_serves_appserver.UnstakeRequest
	(*UnstakeResponse)(nil),           // 5: m2m_serves_appserver.UnstakeResponse
	(*GetActiveStakesRequest)(nil),    // 6: m2m_serves_appserver.GetActiveStakesRequest
	(*ActiveStake)(nil),               // 7: m2m_serves_appserver.ActiveStake
	(*GetActiveStakesResponse)(nil),   // 8: m2m_serves_appserver.GetActiveStakesResponse
	(*StakingHistoryRequest)(nil),     // 9: m2m_serves_appserver.StakingHistoryRequest
	(*StakingHistory)(nil),            // 10: m2m_serves_appserver.StakingHistory
	(*StakingHistoryResponse)(nil),    // 11: m2m_serves_appserver.StakingHistoryResponse
	(*StakingPercentageRequest)(nil),  // 12: m2m_serves_appserver.StakingPercentageRequest
	(*StakingPercentageResponse)(nil), // 13: m2m_serves_appserver.StakingPercentageResponse
	(*timestamp.Timestamp)(nil),       // 14: google.protobuf.Timestamp
}
var file_m2m_staking_proto_depIdxs = []int32{
	14, // 0: m2m_serves_appserver.StakingRevenueRequest.from:type_name -> google.protobuf.Timestamp
	14, // 1: m2m_serves_appserver.StakingRevenueRequest.till:type_name -> google.protobuf.Timestamp
	14, // 2: m2m_serves_appserver.ActiveStake.start_time:type_name -> google.protobuf.Timestamp
	14, // 3: m2m_serves_appserver.ActiveStake.end_time:type_name -> google.protobuf.Timestamp
	7,  // 4: m2m_serves_appserver.GetActiveStakesResponse.act_stake:type_name -> m2m_serves_appserver.ActiveStake
	14, // 5: m2m_serves_appserver.StakingHistoryRequest.from:type_name -> google.protobuf.Timestamp
	14, // 6: m2m_serves_appserver.StakingHistoryRequest.till:type_name -> google.protobuf.Timestamp
	14, // 7: m2m_serves_appserver.StakingHistory.timestamp:type_name -> google.protobuf.Timestamp
	10, // 8: m2m_serves_appserver.StakingHistoryResponse.staking_hist:type_name -> m2m_serves_appserver.StakingHistory
	2,  // 9: m2m_serves_appserver.StakingService.Stake:input_type -> m2m_serves_appserver.StakeRequest
	4,  // 10: m2m_serves_appserver.StakingService.Unstake:input_type -> m2m_serves_appserver.UnstakeRequest
	6,  // 11: m2m_serves_appserver.StakingService.GetActiveStakes:input_type -> m2m_serves_appserver.GetActiveStakesRequest
	0,  // 12: m2m_serves_appserver.StakingService.GetStakingRevenue:input_type -> m2m_serves_appserver.StakingRevenueRequest
	9,  // 13: m2m_serves_appserver.StakingService.GetStakingHistory:input_type -> m2m_serves_appserver.StakingHistoryRequest
	12, // 14: m2m_serves_appserver.StakingService.GetStakingPercentage:input_type -> m2m_serves_appserver.StakingPercentageRequest
	3,  // 15: m2m_serves_appserver.StakingService.Stake:output_type -> m2m_serves_appserver.StakeResponse
	5,  // 16: m2m_serves_appserver.StakingService.Unstake:output_type -> m2m_serves_appserver.UnstakeResponse
	8,  // 17: m2m_serves_appserver.StakingService.GetActiveStakes:output_type -> m2m_serves_appserver.GetActiveStakesResponse
	1,  // 18: m2m_serves_appserver.StakingService.GetStakingRevenue:output_type -> m2m_serves_appserver.StakingRevenueResponse
	11, // 19: m2m_serves_appserver.StakingService.GetStakingHistory:output_type -> m2m_serves_appserver.StakingHistoryResponse
	13, // 20: m2m_serves_appserver.StakingService.GetStakingPercentage:output_type -> m2m_serves_appserver.StakingPercentageResponse
	15, // [15:21] is the sub-list for method output_type
	9,  // [9:15] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_m2m_staking_proto_init() }
func file_m2m_staking_proto_init() {
	if File_m2m_staking_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_m2m_staking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRevenueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingRevenueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnstakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnstakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveStakesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveStakesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingPercentageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_staking_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StakingPercentageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_m2m_staking_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_m2m_staking_proto_goTypes,
		DependencyIndexes: file_m2m_staking_proto_depIdxs,
		MessageInfos:      file_m2m_staking_proto_msgTypes,
	}.Build()
	File_m2m_staking_proto = out.File
	file_m2m_staking_proto_rawDesc = nil
	file_m2m_staking_proto_goTypes = nil
	file_m2m_staking_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StakingServiceClient is the client API for StakingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StakingServiceClient interface {
	Stake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*StakeResponse, error)
	Unstake(ctx context.Context, in *UnstakeRequest, opts ...grpc.CallOption) (*UnstakeResponse, error)
	GetActiveStakes(ctx context.Context, in *GetActiveStakesRequest, opts ...grpc.CallOption) (*GetActiveStakesResponse, error)
	GetStakingRevenue(ctx context.Context, in *StakingRevenueRequest, opts ...grpc.CallOption) (*StakingRevenueResponse, error)
	GetStakingHistory(ctx context.Context, in *StakingHistoryRequest, opts ...grpc.CallOption) (*StakingHistoryResponse, error)
	GetStakingPercentage(ctx context.Context, in *StakingPercentageRequest, opts ...grpc.CallOption) (*StakingPercentageResponse, error)
}

type stakingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStakingServiceClient(cc grpc.ClientConnInterface) StakingServiceClient {
	return &stakingServiceClient{cc}
}

func (c *stakingServiceClient) Stake(ctx context.Context, in *StakeRequest, opts ...grpc.CallOption) (*StakeResponse, error) {
	out := new(StakeResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.StakingService/Stake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) Unstake(ctx context.Context, in *UnstakeRequest, opts ...grpc.CallOption) (*UnstakeResponse, error) {
	out := new(UnstakeResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.StakingService/Unstake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) GetActiveStakes(ctx context.Context, in *GetActiveStakesRequest, opts ...grpc.CallOption) (*GetActiveStakesResponse, error) {
	out := new(GetActiveStakesResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.StakingService/GetActiveStakes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) GetStakingRevenue(ctx context.Context, in *StakingRevenueRequest, opts ...grpc.CallOption) (*StakingRevenueResponse, error) {
	out := new(StakingRevenueResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.StakingService/GetStakingRevenue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) GetStakingHistory(ctx context.Context, in *StakingHistoryRequest, opts ...grpc.CallOption) (*StakingHistoryResponse, error) {
	out := new(StakingHistoryResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.StakingService/GetStakingHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stakingServiceClient) GetStakingPercentage(ctx context.Context, in *StakingPercentageRequest, opts ...grpc.CallOption) (*StakingPercentageResponse, error) {
	out := new(StakingPercentageResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.StakingService/GetStakingPercentage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StakingServiceServer is the server API for StakingService service.
type StakingServiceServer interface {
	Stake(context.Context, *StakeRequest) (*StakeResponse, error)
	Unstake(context.Context, *UnstakeRequest) (*UnstakeResponse, error)
	GetActiveStakes(context.Context, *GetActiveStakesRequest) (*GetActiveStakesResponse, error)
	GetStakingRevenue(context.Context, *StakingRevenueRequest) (*StakingRevenueResponse, error)
	GetStakingHistory(context.Context, *StakingHistoryRequest) (*StakingHistoryResponse, error)
	GetStakingPercentage(context.Context, *StakingPercentageRequest) (*StakingPercentageResponse, error)
}

// UnimplementedStakingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedStakingServiceServer struct {
}

func (*UnimplementedStakingServiceServer) Stake(context.Context, *StakeRequest) (*StakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stake not implemented")
}
func (*UnimplementedStakingServiceServer) Unstake(context.Context, *UnstakeRequest) (*UnstakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unstake not implemented")
}
func (*UnimplementedStakingServiceServer) GetActiveStakes(context.Context, *GetActiveStakesRequest) (*GetActiveStakesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveStakes not implemented")
}
func (*UnimplementedStakingServiceServer) GetStakingRevenue(context.Context, *StakingRevenueRequest) (*StakingRevenueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakingRevenue not implemented")
}
func (*UnimplementedStakingServiceServer) GetStakingHistory(context.Context, *StakingHistoryRequest) (*StakingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakingHistory not implemented")
}
func (*UnimplementedStakingServiceServer) GetStakingPercentage(context.Context, *StakingPercentageRequest) (*StakingPercentageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStakingPercentage not implemented")
}

func RegisterStakingServiceServer(s *grpc.Server, srv StakingServiceServer) {
	s.RegisterService(&_StakingService_serviceDesc, srv)
}

func _StakingService_Stake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).Stake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.StakingService/Stake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).Stake(ctx, req.(*StakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_Unstake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnstakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).Unstake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.StakingService/Unstake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).Unstake(ctx, req.(*UnstakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_GetActiveStakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveStakesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).GetActiveStakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.StakingService/GetActiveStakes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).GetActiveStakes(ctx, req.(*GetActiveStakesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_GetStakingRevenue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakingRevenueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).GetStakingRevenue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.StakingService/GetStakingRevenue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).GetStakingRevenue(ctx, req.(*StakingRevenueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_GetStakingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).GetStakingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.StakingService/GetStakingHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).GetStakingHistory(ctx, req.(*StakingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StakingService_GetStakingPercentage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StakingPercentageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StakingServiceServer).GetStakingPercentage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.StakingService/GetStakingPercentage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StakingServiceServer).GetStakingPercentage(ctx, req.(*StakingPercentageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StakingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "m2m_serves_appserver.StakingService",
	HandlerType: (*StakingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stake",
			Handler:    _StakingService_Stake_Handler,
		},
		{
			MethodName: "Unstake",
			Handler:    _StakingService_Unstake_Handler,
		},
		{
			MethodName: "GetActiveStakes",
			Handler:    _StakingService_GetActiveStakes_Handler,
		},
		{
			MethodName: "GetStakingRevenue",
			Handler:    _StakingService_GetStakingRevenue_Handler,
		},
		{
			MethodName: "GetStakingHistory",
			Handler:    _StakingService_GetStakingHistory_Handler,
		},
		{
			MethodName: "GetStakingPercentage",
			Handler:    _StakingService_GetStakingPercentage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "m2m_staking.proto",
}
