// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.2
// source: m2m_m2mserver_gateway.proto

package m2m_serves_appserver

import (
	context "context"
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GatewayMode int32

const (
	GatewayMode_GW_INACTIVE              GatewayMode = 0
	GatewayMode_GW_FREE_GATEWAYS_LIMITED GatewayMode = 1
	GatewayMode_GW_WHOLE_NETWORK         GatewayMode = 2
	GatewayMode_GW_DELETED               GatewayMode = 3
)

// Enum value maps for GatewayMode.
var (
	GatewayMode_name = map[int32]string{
		0: "GW_INACTIVE",
		1: "GW_FREE_GATEWAYS_LIMITED",
		2: "GW_WHOLE_NETWORK",
		3: "GW_DELETED",
	}
	GatewayMode_value = map[string]int32{
		"GW_INACTIVE":              0,
		"GW_FREE_GATEWAYS_LIMITED": 1,
		"GW_WHOLE_NETWORK":         2,
		"GW_DELETED":               3,
	}
)

func (x GatewayMode) Enum() *GatewayMode {
	p := new(GatewayMode)
	*p = x
	return p
}

func (x GatewayMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GatewayMode) Descriptor() protoreflect.EnumDescriptor {
	return file_m2m_m2mserver_gateway_proto_enumTypes[0].Descriptor()
}

func (GatewayMode) Type() protoreflect.EnumType {
	return &file_m2m_m2mserver_gateway_proto_enumTypes[0]
}

func (x GatewayMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GatewayMode.Descriptor instead.
func (GatewayMode) EnumDescriptor() ([]byte, []int) {
	return file_m2m_m2mserver_gateway_proto_rawDescGZIP(), []int{0}
}

type GetGatewayListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId  int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetGatewayListRequest) Reset() {
	*x = GetGatewayListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayListRequest) ProtoMessage() {}

func (x *GetGatewayListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayListRequest.ProtoReflect.Descriptor instead.
func (*GetGatewayListRequest) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *GetGatewayListRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetGatewayListRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGatewayListRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGatewayListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GwProfile []*GSGatewayProfile `protobuf:"bytes,1,rep,name=gw_profile,json=gwProfile,proto3" json:"gw_profile,omitempty"`
	Count     int64               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetGatewayListResponse) Reset() {
	*x = GetGatewayListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayListResponse) ProtoMessage() {}

func (x *GetGatewayListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayListResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayListResponse) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *GetGatewayListResponse) GetGwProfile() []*GSGatewayProfile {
	if x != nil {
		return x.GwProfile
	}
	return nil
}

func (x *GetGatewayListResponse) GetCount() int64 {
	if x != nil {
		return x.Count
	}
	return 0
}

type GetGSGatewayProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId  int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	GwId   int64 `protobuf:"varint,2,opt,name=gw_id,json=gwId,proto3" json:"gw_id,omitempty"`
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetGSGatewayProfileRequest) Reset() {
	*x = GetGSGatewayProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGSGatewayProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGSGatewayProfileRequest) ProtoMessage() {}

func (x *GetGSGatewayProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGSGatewayProfileRequest.ProtoReflect.Descriptor instead.
func (*GetGSGatewayProfileRequest) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *GetGSGatewayProfileRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetGSGatewayProfileRequest) GetGwId() int64 {
	if x != nil {
		return x.GwId
	}
	return 0
}

func (x *GetGSGatewayProfileRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGSGatewayProfileRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GSGatewayProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Mac         string      `protobuf:"bytes,2,opt,name=mac,proto3" json:"mac,omitempty"`
	FkGwNs      int64       `protobuf:"varint,3,opt,name=fk_gw_ns,json=fkGwNs,proto3" json:"fk_gw_ns,omitempty"`
	FkWallet    int64       `protobuf:"varint,4,opt,name=fk_wallet,json=fkWallet,proto3" json:"fk_wallet,omitempty"`
	Mode        GatewayMode `protobuf:"varint,5,opt,name=mode,proto3,enum=m2m_serves_appserver.GatewayMode" json:"mode,omitempty"`
	CreateAt    string      `protobuf:"bytes,6,opt,name=create_at,json=createAt,proto3" json:"create_at,omitempty"`
	LastSeenAt  string      `protobuf:"bytes,7,opt,name=last_seen_at,json=lastSeenAt,proto3" json:"last_seen_at,omitempty"`
	OrgId       int64       `protobuf:"varint,8,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Description string      `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	Name        string      `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GSGatewayProfile) Reset() {
	*x = GSGatewayProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GSGatewayProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GSGatewayProfile) ProtoMessage() {}

func (x *GSGatewayProfile) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GSGatewayProfile.ProtoReflect.Descriptor instead.
func (*GSGatewayProfile) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *GSGatewayProfile) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GSGatewayProfile) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *GSGatewayProfile) GetFkGwNs() int64 {
	if x != nil {
		return x.FkGwNs
	}
	return 0
}

func (x *GSGatewayProfile) GetFkWallet() int64 {
	if x != nil {
		return x.FkWallet
	}
	return 0
}

func (x *GSGatewayProfile) GetMode() GatewayMode {
	if x != nil {
		return x.Mode
	}
	return GatewayMode_GW_INACTIVE
}

func (x *GSGatewayProfile) GetCreateAt() string {
	if x != nil {
		return x.CreateAt
	}
	return ""
}

func (x *GSGatewayProfile) GetLastSeenAt() string {
	if x != nil {
		return x.LastSeenAt
	}
	return ""
}

func (x *GSGatewayProfile) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GSGatewayProfile) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GSGatewayProfile) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetGSGatewayProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GwProfile *GSGatewayProfile `protobuf:"bytes,1,opt,name=gw_profile,json=gwProfile,proto3" json:"gw_profile,omitempty"`
}

func (x *GetGSGatewayProfileResponse) Reset() {
	*x = GetGSGatewayProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGSGatewayProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGSGatewayProfileResponse) ProtoMessage() {}

func (x *GetGSGatewayProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGSGatewayProfileResponse.ProtoReflect.Descriptor instead.
func (*GetGSGatewayProfileResponse) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *GetGSGatewayProfileResponse) GetGwProfile() *GSGatewayProfile {
	if x != nil {
		return x.GwProfile
	}
	return nil
}

type GetGatewayHistoryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId  int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	GwId   int64 `protobuf:"varint,2,opt,name=gw_id,json=gwId,proto3" json:"gw_id,omitempty"`
	Offset int64 `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *GetGatewayHistoryRequest) Reset() {
	*x = GetGatewayHistoryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_gateway_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayHistoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayHistoryRequest) ProtoMessage() {}

func (x *GetGatewayHistoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_gateway_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayHistoryRequest.ProtoReflect.Descriptor instead.
func (*GetGatewayHistoryRequest) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_gateway_proto_rawDescGZIP(), []int{5}
}

func (x *GetGatewayHistoryRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *GetGatewayHistoryRequest) GetGwId() int64 {
	if x != nil {
		return x.GwId
	}
	return 0
}

func (x *GetGatewayHistoryRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetGatewayHistoryRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type GetGatewayHistoryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GwHistory string `protobuf:"bytes,1,opt,name=gw_history,json=gwHistory,proto3" json:"gw_history,omitempty"`
}

func (x *GetGatewayHistoryResponse) Reset() {
	*x = GetGatewayHistoryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_gateway_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayHistoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayHistoryResponse) ProtoMessage() {}

func (x *GetGatewayHistoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_gateway_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayHistoryResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayHistoryResponse) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_gateway_proto_rawDescGZIP(), []int{6}
}

func (x *GetGatewayHistoryResponse) GetGwHistory() string {
	if x != nil {
		return x.GwHistory
	}
	return ""
}

type SetGatewayModeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId  int64       `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	GwId   int64       `protobuf:"varint,2,opt,name=gw_id,json=gwId,proto3" json:"gw_id,omitempty"`
	GwMode GatewayMode `protobuf:"varint,3,opt,name=gw_mode,json=gwMode,proto3,enum=m2m_serves_appserver.GatewayMode" json:"gw_mode,omitempty"`
}

func (x *SetGatewayModeRequest) Reset() {
	*x = SetGatewayModeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_gateway_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGatewayModeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGatewayModeRequest) ProtoMessage() {}

func (x *SetGatewayModeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_gateway_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGatewayModeRequest.ProtoReflect.Descriptor instead.
func (*SetGatewayModeRequest) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_gateway_proto_rawDescGZIP(), []int{7}
}

func (x *SetGatewayModeRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *SetGatewayModeRequest) GetGwId() int64 {
	if x != nil {
		return x.GwId
	}
	return 0
}

func (x *SetGatewayModeRequest) GetGwMode() GatewayMode {
	if x != nil {
		return x.GwMode
	}
	return GatewayMode_GW_INACTIVE
}

type SetGatewayModeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status bool `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SetGatewayModeResponse) Reset() {
	*x = SetGatewayModeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_m2m_m2mserver_gateway_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetGatewayModeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetGatewayModeResponse) ProtoMessage() {}

func (x *SetGatewayModeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_m2m_m2mserver_gateway_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetGatewayModeResponse.ProtoReflect.Descriptor instead.
func (*SetGatewayModeResponse) Descriptor() ([]byte, []int) {
	return file_m2m_m2mserver_gateway_proto_rawDescGZIP(), []int{8}
}

func (x *SetGatewayModeResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

var File_m2m_m2mserver_gateway_proto protoreflect.FileDescriptor

var file_m2m_m2mserver_gateway_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6d, 0x32, 0x6d, 0x5f, 0x6d, 0x32, 0x6d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x6d,
	0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0x5c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72,
	0x67, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x67,
	0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x53, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x67, 0x77, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x76, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47,
	0x53, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x13, 0x0a,
	0x05, 0x67, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x77,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xae, 0x02, 0x0a, 0x10, 0x47, 0x53, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x18, 0x0a, 0x08, 0x66, 0x6b, 0x5f, 0x67, 0x77,
	0x5f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x6b, 0x47, 0x77, 0x4e,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6b, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x66, 0x6b, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x35,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6d,
	0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x64, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x47, 0x53, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x45, 0x0a, 0x0a, 0x67, 0x77, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x53, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x67, 0x77,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x74, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x77,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x77, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x3a, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x77,
	0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x77, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x7f, 0x0a, 0x15, 0x53, 0x65, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x77, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x07, 0x67, 0x77, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x6f,
	0x64, 0x65, 0x52, 0x06, 0x67, 0x77, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x30, 0x0a, 0x16, 0x53, 0x65,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x62, 0x0a, 0x0b,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x47,
	0x57, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x47, 0x57, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x57, 0x41, 0x59, 0x53,
	0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x57,
	0x5f, 0x57, 0x48, 0x4f, 0x4c, 0x45, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x47, 0x57, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x03,
	0x32, 0xdc, 0x03, 0x0a, 0x10, 0x47, 0x53, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x78, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x30, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x47, 0x53, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6d, 0x32, 0x6d, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x53, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x74, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x2e, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x78,
	0x63, 0x2d, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x78, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x32, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x61, 0x70,
	0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_m2m_m2mserver_gateway_proto_rawDescOnce sync.Once
	file_m2m_m2mserver_gateway_proto_rawDescData = file_m2m_m2mserver_gateway_proto_rawDesc
)

func file_m2m_m2mserver_gateway_proto_rawDescGZIP() []byte {
	file_m2m_m2mserver_gateway_proto_rawDescOnce.Do(func() {
		file_m2m_m2mserver_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_m2m_m2mserver_gateway_proto_rawDescData)
	})
	return file_m2m_m2mserver_gateway_proto_rawDescData
}

var file_m2m_m2mserver_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_m2m_m2mserver_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_m2m_m2mserver_gateway_proto_goTypes = []interface{}{
	(GatewayMode)(0),                    // 0: m2m_serves_appserver.GatewayMode
	(*GetGatewayListRequest)(nil),       // 1: m2m_serves_appserver.GetGatewayListRequest
	(*GetGatewayListResponse)(nil),      // 2: m2m_serves_appserver.GetGatewayListResponse
	(*GetGSGatewayProfileRequest)(nil),  // 3: m2m_serves_appserver.GetGSGatewayProfileRequest
	(*GSGatewayProfile)(nil),            // 4: m2m_serves_appserver.GSGatewayProfile
	(*GetGSGatewayProfileResponse)(nil), // 5: m2m_serves_appserver.GetGSGatewayProfileResponse
	(*GetGatewayHistoryRequest)(nil),    // 6: m2m_serves_appserver.GetGatewayHistoryRequest
	(*GetGatewayHistoryResponse)(nil),   // 7: m2m_serves_appserver.GetGatewayHistoryResponse
	(*SetGatewayModeRequest)(nil),       // 8: m2m_serves_appserver.SetGatewayModeRequest
	(*SetGatewayModeResponse)(nil),      // 9: m2m_serves_appserver.SetGatewayModeResponse
}
var file_m2m_m2mserver_gateway_proto_depIdxs = []int32{
	4, // 0: m2m_serves_appserver.GetGatewayListResponse.gw_profile:type_name -> m2m_serves_appserver.GSGatewayProfile
	0, // 1: m2m_serves_appserver.GSGatewayProfile.mode:type_name -> m2m_serves_appserver.GatewayMode
	4, // 2: m2m_serves_appserver.GetGSGatewayProfileResponse.gw_profile:type_name -> m2m_serves_appserver.GSGatewayProfile
	0, // 3: m2m_serves_appserver.SetGatewayModeRequest.gw_mode:type_name -> m2m_serves_appserver.GatewayMode
	1, // 4: m2m_serves_appserver.GSGatewayService.GetGatewayList:input_type -> m2m_serves_appserver.GetGatewayListRequest
	3, // 5: m2m_serves_appserver.GSGatewayService.GetGatewayProfile:input_type -> m2m_serves_appserver.GetGSGatewayProfileRequest
	6, // 6: m2m_serves_appserver.GSGatewayService.GetGatewayHistory:input_type -> m2m_serves_appserver.GetGatewayHistoryRequest
	8, // 7: m2m_serves_appserver.GSGatewayService.SetGatewayMode:input_type -> m2m_serves_appserver.SetGatewayModeRequest
	2, // 8: m2m_serves_appserver.GSGatewayService.GetGatewayList:output_type -> m2m_serves_appserver.GetGatewayListResponse
	5, // 9: m2m_serves_appserver.GSGatewayService.GetGatewayProfile:output_type -> m2m_serves_appserver.GetGSGatewayProfileResponse
	7, // 10: m2m_serves_appserver.GSGatewayService.GetGatewayHistory:output_type -> m2m_serves_appserver.GetGatewayHistoryResponse
	9, // 11: m2m_serves_appserver.GSGatewayService.SetGatewayMode:output_type -> m2m_serves_appserver.SetGatewayModeResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_m2m_m2mserver_gateway_proto_init() }
func file_m2m_m2mserver_gateway_proto_init() {
	if File_m2m_m2mserver_gateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_m2m_m2mserver_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGSGatewayProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GSGatewayProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGSGatewayProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_gateway_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayHistoryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_gateway_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayHistoryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_gateway_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGatewayModeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_m2m_m2mserver_gateway_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetGatewayModeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_m2m_m2mserver_gateway_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_m2m_m2mserver_gateway_proto_goTypes,
		DependencyIndexes: file_m2m_m2mserver_gateway_proto_depIdxs,
		EnumInfos:         file_m2m_m2mserver_gateway_proto_enumTypes,
		MessageInfos:      file_m2m_m2mserver_gateway_proto_msgTypes,
	}.Build()
	File_m2m_m2mserver_gateway_proto = out.File
	file_m2m_m2mserver_gateway_proto_rawDesc = nil
	file_m2m_m2mserver_gateway_proto_goTypes = nil
	file_m2m_m2mserver_gateway_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GSGatewayServiceClient is the client API for GSGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GSGatewayServiceClient interface {
	GetGatewayList(ctx context.Context, in *GetGatewayListRequest, opts ...grpc.CallOption) (*GetGatewayListResponse, error)
	GetGatewayProfile(ctx context.Context, in *GetGSGatewayProfileRequest, opts ...grpc.CallOption) (*GetGSGatewayProfileResponse, error)
	GetGatewayHistory(ctx context.Context, in *GetGatewayHistoryRequest, opts ...grpc.CallOption) (*GetGatewayHistoryResponse, error)
	SetGatewayMode(ctx context.Context, in *SetGatewayModeRequest, opts ...grpc.CallOption) (*SetGatewayModeResponse, error)
}

type gSGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGSGatewayServiceClient(cc grpc.ClientConnInterface) GSGatewayServiceClient {
	return &gSGatewayServiceClient{cc}
}

func (c *gSGatewayServiceClient) GetGatewayList(ctx context.Context, in *GetGatewayListRequest, opts ...grpc.CallOption) (*GetGatewayListResponse, error) {
	out := new(GetGatewayListResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.GSGatewayService/GetGatewayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSGatewayServiceClient) GetGatewayProfile(ctx context.Context, in *GetGSGatewayProfileRequest, opts ...grpc.CallOption) (*GetGSGatewayProfileResponse, error) {
	out := new(GetGSGatewayProfileResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.GSGatewayService/GetGatewayProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSGatewayServiceClient) GetGatewayHistory(ctx context.Context, in *GetGatewayHistoryRequest, opts ...grpc.CallOption) (*GetGatewayHistoryResponse, error) {
	out := new(GetGatewayHistoryResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.GSGatewayService/GetGatewayHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gSGatewayServiceClient) SetGatewayMode(ctx context.Context, in *SetGatewayModeRequest, opts ...grpc.CallOption) (*SetGatewayModeResponse, error) {
	out := new(SetGatewayModeResponse)
	err := c.cc.Invoke(ctx, "/m2m_serves_appserver.GSGatewayService/SetGatewayMode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GSGatewayServiceServer is the server API for GSGatewayService service.
type GSGatewayServiceServer interface {
	GetGatewayList(context.Context, *GetGatewayListRequest) (*GetGatewayListResponse, error)
	GetGatewayProfile(context.Context, *GetGSGatewayProfileRequest) (*GetGSGatewayProfileResponse, error)
	GetGatewayHistory(context.Context, *GetGatewayHistoryRequest) (*GetGatewayHistoryResponse, error)
	SetGatewayMode(context.Context, *SetGatewayModeRequest) (*SetGatewayModeResponse, error)
}

// UnimplementedGSGatewayServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGSGatewayServiceServer struct {
}

func (*UnimplementedGSGatewayServiceServer) GetGatewayList(context.Context, *GetGatewayListRequest) (*GetGatewayListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayList not implemented")
}
func (*UnimplementedGSGatewayServiceServer) GetGatewayProfile(context.Context, *GetGSGatewayProfileRequest) (*GetGSGatewayProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayProfile not implemented")
}
func (*UnimplementedGSGatewayServiceServer) GetGatewayHistory(context.Context, *GetGatewayHistoryRequest) (*GetGatewayHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayHistory not implemented")
}
func (*UnimplementedGSGatewayServiceServer) SetGatewayMode(context.Context, *SetGatewayModeRequest) (*SetGatewayModeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGatewayMode not implemented")
}

func RegisterGSGatewayServiceServer(s *grpc.Server, srv GSGatewayServiceServer) {
	s.RegisterService(&_GSGatewayService_serviceDesc, srv)
}

func _GSGatewayService_GetGatewayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSGatewayServiceServer).GetGatewayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.GSGatewayService/GetGatewayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSGatewayServiceServer).GetGatewayList(ctx, req.(*GetGatewayListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSGatewayService_GetGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGSGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSGatewayServiceServer).GetGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.GSGatewayService/GetGatewayProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSGatewayServiceServer).GetGatewayProfile(ctx, req.(*GetGSGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSGatewayService_GetGatewayHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSGatewayServiceServer).GetGatewayHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.GSGatewayService/GetGatewayHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSGatewayServiceServer).GetGatewayHistory(ctx, req.(*GetGatewayHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GSGatewayService_SetGatewayMode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGatewayModeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GSGatewayServiceServer).SetGatewayMode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/m2m_serves_appserver.GSGatewayService/SetGatewayMode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GSGatewayServiceServer).SetGatewayMode(ctx, req.(*SetGatewayModeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GSGatewayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "m2m_serves_appserver.GSGatewayService",
	HandlerType: (*GSGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGatewayList",
			Handler:    _GSGatewayService_GetGatewayList_Handler,
		},
		{
			MethodName: "GetGatewayProfile",
			Handler:    _GSGatewayService_GetGatewayProfile_Handler,
		},
		{
			MethodName: "GetGatewayHistory",
			Handler:    _GSGatewayService_GetGatewayHistory_Handler,
		},
		{
			MethodName: "SetGatewayMode",
			Handler:    _GSGatewayService_SetGatewayMode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "m2m_m2mserver_gateway.proto",
}
