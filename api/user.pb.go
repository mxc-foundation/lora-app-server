// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type User struct {
	// User ID.
	// Will be set automatically on create.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Username of the user.
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	// The session timeout, in minutes.
	SessionTtl int32 `protobuf:"varint,3,opt,name=session_ttl,json=sessionTTL" json:"session_ttl,omitempty"`
	// Set to true to make the user a global administrator.
	IsAdmin bool `protobuf:"varint,4,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
	// Set to false to disable the user.
	IsActive bool `protobuf:"varint,5,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	// E-mail of the user.
	Email string `protobuf:"bytes,6,opt,name=email" json:"email,omitempty"`
	// Optional note to store with the user.
	Note string `protobuf:"bytes,7,opt,name=note" json:"note,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *User) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *User) GetSessionTtl() int32 {
	if m != nil {
		return m.SessionTtl
	}
	return 0
}

func (m *User) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *User) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *User) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *User) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type UserListItem struct {
	// User ID.
	// Will be set automatically on create.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Username of the user.
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	// The session timeout, in minutes.
	SessionTtl int32 `protobuf:"varint,3,opt,name=session_ttl,json=sessionTTL" json:"session_ttl,omitempty"`
	// Set to true to make the user a global administrator.
	IsAdmin bool `protobuf:"varint,4,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
	// Set to false to disable the user.
	IsActive bool `protobuf:"varint,5,opt,name=is_active,json=isActive" json:"is_active,omitempty"`
	// Created at timestamp.
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *UserListItem) Reset()                    { *m = UserListItem{} }
func (m *UserListItem) String() string            { return proto.CompactTextString(m) }
func (*UserListItem) ProtoMessage()               {}
func (*UserListItem) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *UserListItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserListItem) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserListItem) GetSessionTtl() int32 {
	if m != nil {
		return m.SessionTtl
	}
	return 0
}

func (m *UserListItem) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *UserListItem) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *UserListItem) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *UserListItem) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type UserOrganization struct {
	// Organization ID.
	OrganizationId int64 `protobuf:"varint,1,opt,name=organization_id,json=organizationID" json:"organization_id,omitempty"`
	// User is admin within the context of the organization.
	// There is no need to set the is_device_admin and is_gateway_admin flags.
	IsAdmin bool `protobuf:"varint,2,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
	// User is able to modify device related resources (applications,
	// device-profiles, devices, multicast-groups).
	IsDeviceAdmin bool `protobuf:"varint,3,opt,name=is_device_admin,json=isDeviceAdmin" json:"is_device_admin,omitempty"`
	// User is able to modify gateways.
	IsGatewayAdmin bool `protobuf:"varint,4,opt,name=is_gateway_admin,json=isGatewayAdmin" json:"is_gateway_admin,omitempty"`
}

func (m *UserOrganization) Reset()                    { *m = UserOrganization{} }
func (m *UserOrganization) String() string            { return proto.CompactTextString(m) }
func (*UserOrganization) ProtoMessage()               {}
func (*UserOrganization) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *UserOrganization) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *UserOrganization) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *UserOrganization) GetIsDeviceAdmin() bool {
	if m != nil {
		return m.IsDeviceAdmin
	}
	return false
}

func (m *UserOrganization) GetIsGatewayAdmin() bool {
	if m != nil {
		return m.IsGatewayAdmin
	}
	return false
}

type CreateUserRequest struct {
	// User object to create.
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	// Password of the user.
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	// Add the user to the following organizations.
	Organizations []*UserOrganization `protobuf:"bytes,3,rep,name=organizations" json:"organizations,omitempty"`
}

func (m *CreateUserRequest) Reset()                    { *m = CreateUserRequest{} }
func (m *CreateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateUserRequest) ProtoMessage()               {}
func (*CreateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *CreateUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CreateUserRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *CreateUserRequest) GetOrganizations() []*UserOrganization {
	if m != nil {
		return m.Organizations
	}
	return nil
}

type CreateUserResponse struct {
	// User ID.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateUserResponse) Reset()                    { *m = CreateUserResponse{} }
func (m *CreateUserResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateUserResponse) ProtoMessage()               {}
func (*CreateUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *CreateUserResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetUserRequest struct {
	// User ID.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetUserRequest) Reset()                    { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()               {}
func (*GetUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *GetUserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetUserResponse struct {
	// User object.
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	// Created at timestamp.
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *GetUserResponse) Reset()                    { *m = GetUserResponse{} }
func (m *GetUserResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUserResponse) ProtoMessage()               {}
func (*GetUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *GetUserResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *GetUserResponse) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *GetUserResponse) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type UpdateUserRequest struct {
	// User object to update.
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *UpdateUserRequest) Reset()                    { *m = UpdateUserRequest{} }
func (m *UpdateUserRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserRequest) ProtoMessage()               {}
func (*UpdateUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *UpdateUserRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

type DeleteUserRequest struct {
	// User ID.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteUserRequest) Reset()                    { *m = DeleteUserRequest{} }
func (m *DeleteUserRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserRequest) ProtoMessage()               {}
func (*DeleteUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *DeleteUserRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListUserRequest struct {
	// Max number of user to return in the result-set.
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// When provided, the given string will be used to search on username.
	Search string `protobuf:"bytes,3,opt,name=search" json:"search,omitempty"`
}

func (m *ListUserRequest) Reset()                    { *m = ListUserRequest{} }
func (m *ListUserRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUserRequest) ProtoMessage()               {}
func (*ListUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *ListUserRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListUserRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListUserRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

type ListUserResponse struct {
	// Total number of users.
	TotalCount int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	// Result-set.
	Result []*UserListItem `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListUserResponse) Reset()                    { *m = ListUserResponse{} }
func (m *ListUserResponse) String() string            { return proto.CompactTextString(m) }
func (*ListUserResponse) ProtoMessage()               {}
func (*ListUserResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *ListUserResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListUserResponse) GetResult() []*UserListItem {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateUserPasswordRequest struct {
	// User ID.
	UserId int64 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// New pasword.
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *UpdateUserPasswordRequest) Reset()                    { *m = UpdateUserPasswordRequest{} }
func (m *UpdateUserPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateUserPasswordRequest) ProtoMessage()               {}
func (*UpdateUserPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *UpdateUserPasswordRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateUserPasswordRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*User)(nil), "api.User")
	proto.RegisterType((*UserListItem)(nil), "api.UserListItem")
	proto.RegisterType((*UserOrganization)(nil), "api.UserOrganization")
	proto.RegisterType((*CreateUserRequest)(nil), "api.CreateUserRequest")
	proto.RegisterType((*CreateUserResponse)(nil), "api.CreateUserResponse")
	proto.RegisterType((*GetUserRequest)(nil), "api.GetUserRequest")
	proto.RegisterType((*GetUserResponse)(nil), "api.GetUserResponse")
	proto.RegisterType((*UpdateUserRequest)(nil), "api.UpdateUserRequest")
	proto.RegisterType((*DeleteUserRequest)(nil), "api.DeleteUserRequest")
	proto.RegisterType((*ListUserRequest)(nil), "api.ListUserRequest")
	proto.RegisterType((*ListUserResponse)(nil), "api.ListUserResponse")
	proto.RegisterType((*UpdateUserPasswordRequest)(nil), "api.UpdateUserPasswordRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UserService service

type UserServiceClient interface {
	// Get user list.
	List(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	// Get data for a particular user.
	Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	// Create a new user.
	Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// Update an existing user.
	Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// Delete a user.
	Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// UpdatePassword updates a password.
	UpdatePassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) List(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := grpc.Invoke(ctx, "/api.UserService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := grpc.Invoke(ctx, "/api.UserService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Create(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := grpc.Invoke(ctx, "/api.UserService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Update(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.UserService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) Delete(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.UserService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdatePassword(ctx context.Context, in *UpdateUserPasswordRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.UserService/UpdatePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	// Get user list.
	List(context.Context, *ListUserRequest) (*ListUserResponse, error)
	// Get data for a particular user.
	Get(context.Context, *GetUserRequest) (*GetUserResponse, error)
	// Create a new user.
	Create(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// Update an existing user.
	Update(context.Context, *UpdateUserRequest) (*google_protobuf2.Empty, error)
	// Delete a user.
	Delete(context.Context, *DeleteUserRequest) (*google_protobuf2.Empty, error)
	// UpdatePassword updates a password.
	UpdatePassword(context.Context, *UpdateUserPasswordRequest) (*google_protobuf2.Empty, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).List(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Get(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Create(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Update(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Delete(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdatePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdatePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/UpdatePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdatePassword(ctx, req.(*UpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _UserService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _UserService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _UserService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserService_Delete_Handler,
		},
		{
			MethodName: "UpdatePassword",
			Handler:    _UserService_UpdatePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}

func init() { proto.RegisterFile("user.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x55, 0x4d, 0x6f, 0xe2, 0x46,
	0x18, 0x96, 0x31, 0x38, 0xf0, 0x92, 0x40, 0x98, 0x92, 0xc4, 0xb8, 0x4d, 0x83, 0xdc, 0xaa, 0x75,
	0x73, 0x00, 0x89, 0x9e, 0x9a, 0x9e, 0x50, 0x52, 0x21, 0xa4, 0x48, 0x4d, 0xdd, 0x44, 0x55, 0x2f,
	0xb5, 0x26, 0x78, 0x42, 0x47, 0xc2, 0x1f, 0xf5, 0x0c, 0x89, 0xd2, 0x2a, 0x97, 0xde, 0xaa, 0x1e,
	0x57, 0xfb, 0x17, 0x56, 0xfb, 0x07, 0xf6, 0x97, 0xec, 0x5f, 0xd8, 0x1f, 0xb2, 0x9a, 0xf1, 0x18,
	0x6c, 0xa3, 0x6c, 0x76, 0xf7, 0xb4, 0x17, 0xc4, 0xfb, 0xcc, 0xf3, 0x3e, 0xef, 0xc7, 0x3c, 0x03,
	0x00, 0x4b, 0x46, 0x92, 0x41, 0x9c, 0x44, 0x3c, 0x42, 0x3a, 0x8e, 0xa9, 0xf5, 0xc5, 0x3c, 0x8a,
	0xe6, 0x0b, 0x32, 0xc4, 0x31, 0x1d, 0xe2, 0x30, 0x8c, 0x38, 0xe6, 0x34, 0x0a, 0x59, 0x4a, 0xb1,
	0x7a, 0x9c, 0x06, 0x84, 0x71, 0x1c, 0xc4, 0xc3, 0xd5, 0x37, 0x75, 0xd4, 0x21, 0x41, 0xcc, 0xef,
	0x87, 0xf2, 0x33, 0x85, 0xec, 0x57, 0x1a, 0x54, 0xaf, 0x18, 0x49, 0x50, 0x0b, 0x2a, 0xd4, 0x37,
	0xb5, 0xbe, 0xe6, 0xe8, 0x6e, 0x85, 0xfa, 0xc8, 0x82, 0xba, 0xa8, 0x1b, 0xe2, 0x80, 0x98, 0x95,
	0xbe, 0xe6, 0x34, 0xdc, 0x55, 0x8c, 0x8e, 0xa0, 0xc9, 0x08, 0x63, 0x34, 0x0a, 0x3d, 0xce, 0x17,
	0xa6, 0xde, 0xd7, 0x9c, 0x9a, 0x0b, 0x0a, 0xba, 0xbc, 0x3c, 0x47, 0x3d, 0xa8, 0x53, 0xe6, 0x61,
	0x3f, 0xa0, 0xa1, 0x59, 0xed, 0x6b, 0x4e, 0xdd, 0xdd, 0xa2, 0x6c, 0x2c, 0x42, 0xf4, 0x39, 0x34,
	0xc4, 0xd1, 0x8c, 0xd3, 0x5b, 0x62, 0xd6, 0xe4, 0x59, 0x9d, 0xb2, 0xb1, 0x8c, 0x51, 0x17, 0x6a,
	0x24, 0xc0, 0x74, 0x61, 0x1a, 0xb2, 0x62, 0x1a, 0x20, 0x04, 0xd5, 0x30, 0xe2, 0xc4, 0xdc, 0x92,
	0xa0, 0xfc, 0x6e, 0xff, 0x57, 0x81, 0x6d, 0xd1, 0xf7, 0x39, 0x65, 0x7c, 0xca, 0x49, 0xf0, 0x69,
	0xf4, 0xff, 0x03, 0xc0, 0x2c, 0x21, 0x98, 0x13, 0xdf, 0xc3, 0xdc, 0xac, 0xf7, 0x35, 0xa7, 0x39,
	0xb2, 0x06, 0xe9, 0x75, 0xa5, 0x0b, 0xbf, 0x5e, 0xde, 0x0c, 0x2e, 0xb3, 0x6b, 0x71, 0x1b, 0x8a,
	0x3d, 0xe6, 0x22, 0x75, 0x19, 0xfb, 0x59, 0x6a, 0xe3, 0xe9, 0x54, 0xc5, 0x1e, 0x73, 0xfb, 0xa5,
	0x06, 0xbb, 0x62, 0x17, 0x3f, 0x27, 0x73, 0x1c, 0xd2, 0xbf, 0xa5, 0x1b, 0xd0, 0xb7, 0xd0, 0x8e,
	0x72, 0xb1, 0xb7, 0x5a, 0x4e, 0x2b, 0x0f, 0x4f, 0xcf, 0x0a, 0xb3, 0x56, 0x8a, 0xb3, 0x7e, 0x03,
	0x6d, 0xca, 0x3c, 0x9f, 0xdc, 0xd2, 0x19, 0x51, 0x0c, 0x5d, 0x32, 0x76, 0x28, 0x3b, 0x93, 0x68,
	0xca, 0x73, 0x60, 0x97, 0x32, 0x6f, 0x8e, 0x39, 0xb9, 0xc3, 0xf7, 0x85, 0xb5, 0xb5, 0x28, 0x9b,
	0xa4, 0xb0, 0x64, 0xda, 0xff, 0x6b, 0xd0, 0x39, 0x95, 0x33, 0x8b, 0x86, 0x5d, 0xf2, 0xd7, 0x92,
	0x30, 0x8e, 0x0e, 0xa1, 0x2a, 0xee, 0x46, 0x36, 0xd8, 0x1c, 0x35, 0x06, 0x38, 0xa6, 0x03, 0x79,
	0x2e, 0x61, 0x71, 0x95, 0x31, 0x66, 0xec, 0x2e, 0x4a, 0xfc, 0xec, 0x2a, 0xb3, 0x18, 0xfd, 0x08,
	0x3b, 0xf9, 0x79, 0x98, 0xa9, 0xf7, 0x75, 0xa7, 0x39, 0xda, 0x5b, 0x69, 0xe4, 0x97, 0xe2, 0x16,
	0xb9, 0xf6, 0xd7, 0x80, 0xf2, 0xcd, 0xb0, 0x38, 0x0a, 0x19, 0x29, 0x3b, 0xc9, 0xee, 0x43, 0x6b,
	0x42, 0x78, 0xbe, 0xdf, 0x32, 0xe3, 0x85, 0x06, 0xed, 0x15, 0x45, 0xa9, 0x3c, 0x31, 0x53, 0xd1,
	0x29, 0x95, 0x8f, 0x77, 0x8a, 0xfe, 0x21, 0x4e, 0x19, 0x41, 0xe7, 0x4a, 0x06, 0xef, 0xbf, 0x7d,
	0xfb, 0x2b, 0xe8, 0x9c, 0x91, 0x05, 0x29, 0xe6, 0x94, 0x37, 0xf0, 0x1b, 0xb4, 0xc5, 0x4b, 0xcc,
	0x53, 0xba, 0x50, 0x5b, 0xd0, 0x80, 0x72, 0xc5, 0x4a, 0x03, 0xb4, 0x0f, 0x46, 0x74, 0x73, 0xc3,
	0x48, 0x3a, 0xb3, 0xee, 0xaa, 0x48, 0xe0, 0x8c, 0xe0, 0x64, 0xf6, 0xa7, 0x1c, 0xa8, 0xe1, 0xaa,
	0xc8, 0xfe, 0x03, 0x76, 0xd7, 0xc2, 0x6a, 0xb5, 0x47, 0xd0, 0xe4, 0x11, 0xc7, 0x0b, 0x6f, 0x16,
	0x2d, 0xc3, 0x4c, 0x1f, 0x24, 0x74, 0x2a, 0x10, 0xf4, 0x1d, 0x18, 0x09, 0x61, 0xcb, 0x85, 0x28,
	0x22, 0xdc, 0xd0, 0x59, 0xcd, 0x94, 0xfd, 0x5c, 0xb8, 0x8a, 0x60, 0x5f, 0x40, 0x6f, 0xbd, 0x91,
	0x0b, 0xe5, 0xaa, 0x6c, 0x84, 0x03, 0xd8, 0x12, 0x2b, 0x58, 0xbf, 0x1d, 0x43, 0x84, 0x53, 0xff,
	0x5d, 0x8e, 0x1c, 0x3d, 0xaf, 0x42, 0x53, 0x88, 0xfd, 0x4a, 0x12, 0xf1, 0x42, 0xd0, 0x04, 0xaa,
	0xa2, 0x2a, 0xea, 0xca, 0x26, 0x4a, 0x5b, 0xb2, 0xf6, 0x4a, 0x68, 0x3a, 0xa2, 0x8d, 0xfe, 0x7d,
	0xfd, 0xe6, 0x59, 0x65, 0x1b, 0x81, 0xfc, 0x91, 0x17, 0x55, 0x19, 0x9a, 0x82, 0x3e, 0x21, 0x1c,
	0x7d, 0x26, 0x33, 0x8a, 0x8e, 0xb4, 0xba, 0x45, 0x50, 0xa9, 0x1c, 0x48, 0x95, 0x0e, 0x6a, 0xaf,
	0x55, 0x86, 0xff, 0x50, 0xff, 0x01, 0x5d, 0x80, 0x91, 0x1a, 0x1f, 0xed, 0xcb, 0xc4, 0x8d, 0x27,
	0x69, 0x1d, 0x6c, 0xe0, 0x4a, 0x73, 0x4f, 0x6a, 0xb6, 0xed, 0x5c, 0x67, 0x27, 0xda, 0x31, 0xfa,
	0x1d, 0x8c, 0x74, 0x8f, 0x4a, 0x71, 0xc3, 0x66, 0xd6, 0xfe, 0x86, 0x45, 0x7f, 0x12, 0xff, 0x43,
	0xf6, 0x91, 0x14, 0xec, 0x59, 0xdd, 0x7c, 0x93, 0xf2, 0x2f, 0x8f, 0xfa, 0x0f, 0x42, 0xfa, 0x17,
	0x30, 0x52, 0x03, 0x2a, 0xe9, 0x0d, 0x37, 0x3e, 0x2a, 0xad, 0xe6, 0x3f, 0xde, 0x98, 0x3f, 0x81,
	0x56, 0xda, 0x60, 0x76, 0xe3, 0xe8, 0xcb, 0x52, 0xd7, 0x25, 0x2b, 0x3c, 0x5a, 0xc2, 0x91, 0x25,
	0x6c, 0xeb, 0xb0, 0xdc, 0xbd, 0x47, 0xfd, 0x87, 0x61, 0x66, 0x8a, 0x13, 0xed, 0xf8, 0xda, 0x90,
	0x99, 0xdf, 0xbf, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x42, 0xe0, 0x0b, 0xb4, 0xcf, 0x07, 0x00, 0x00,
}
