// Code generated by protoc-gen-go. DO NOT EDIT.
// source: multicastGroup.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MulticastGroupType int32

const (
	// Class-C.
	MulticastGroupType_CLASS_C MulticastGroupType = 0
	// Class-B.
	MulticastGroupType_CLASS_B MulticastGroupType = 1
)

var MulticastGroupType_name = map[int32]string{
	0: "CLASS_C",
	1: "CLASS_B",
}
var MulticastGroupType_value = map[string]int32{
	"CLASS_C": 0,
	"CLASS_B": 1,
}

func (x MulticastGroupType) String() string {
	return proto.EnumName(MulticastGroupType_name, int32(x))
}
func (MulticastGroupType) EnumDescriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

type MulticastGroup struct {
	// ID (string formatted UUID).
	// This will be generated automatically on create.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Multicast-group name.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Multicast address (HEX encoded DevAddr).
	McAddr string `protobuf:"bytes,3,opt,name=mc_addr,json=mcAddr" json:"mc_addr,omitempty"`
	// Multicast network session key (HEX encoded AES128 key).
	McNwkSKey string `protobuf:"bytes,4,opt,name=mc_nwk_s_key,json=mcNwkSKey" json:"mc_nwk_s_key,omitempty"`
	// Multicast application session key (HEX encoded AES128 key).
	McAppSKey string `protobuf:"bytes,5,opt,name=mc_app_s_key,json=mcAppSKey" json:"mc_app_s_key,omitempty"`
	// Frame-counter.
	FCnt uint32 `protobuf:"varint,6,opt,name=f_cnt,json=fCnt" json:"f_cnt,omitempty"`
	// Multicast type.
	GroupType MulticastGroupType `protobuf:"varint,7,opt,name=group_type,json=groupType,enum=api.MulticastGroupType" json:"group_type,omitempty"`
	// Data-rate.
	Dr uint32 `protobuf:"varint,8,opt,name=dr" json:"dr,omitempty"`
	// Frequency (Hz).
	Frequency uint32 `protobuf:"varint,9,opt,name=frequency" json:"frequency,omitempty"`
	// Ping-slot period.
	// Mandatory for Class-B multicast groups.
	PingSlotPeriod uint32 `protobuf:"varint,10,opt,name=ping_slot_period,json=pingSlotPeriod" json:"ping_slot_period,omitempty"`
	// Service-profile ID.
	// After creation, this can not be updated.
	ServiceProfileId string `protobuf:"bytes,11,opt,name=service_profile_id,json=serviceProfileID" json:"service_profile_id,omitempty"`
}

func (m *MulticastGroup) Reset()                    { *m = MulticastGroup{} }
func (m *MulticastGroup) String() string            { return proto.CompactTextString(m) }
func (*MulticastGroup) ProtoMessage()               {}
func (*MulticastGroup) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *MulticastGroup) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MulticastGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MulticastGroup) GetMcAddr() string {
	if m != nil {
		return m.McAddr
	}
	return ""
}

func (m *MulticastGroup) GetMcNwkSKey() string {
	if m != nil {
		return m.McNwkSKey
	}
	return ""
}

func (m *MulticastGroup) GetMcAppSKey() string {
	if m != nil {
		return m.McAppSKey
	}
	return ""
}

func (m *MulticastGroup) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *MulticastGroup) GetGroupType() MulticastGroupType {
	if m != nil {
		return m.GroupType
	}
	return MulticastGroupType_CLASS_C
}

func (m *MulticastGroup) GetDr() uint32 {
	if m != nil {
		return m.Dr
	}
	return 0
}

func (m *MulticastGroup) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *MulticastGroup) GetPingSlotPeriod() uint32 {
	if m != nil {
		return m.PingSlotPeriod
	}
	return 0
}

func (m *MulticastGroup) GetServiceProfileId() string {
	if m != nil {
		return m.ServiceProfileId
	}
	return ""
}

type MulticastGroupListItem struct {
	// ID (string formatted UUID).
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Multicast-group name.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Service-profile ID (string formatted UUID).
	ServiceProfileId string `protobuf:"bytes,3,opt,name=service_profile_id,json=serviceProfileID" json:"service_profile_id,omitempty"`
	// Service-profile name.
	ServiceProfileName string `protobuf:"bytes,4,opt,name=service_profile_name,json=serviceProfileName" json:"service_profile_name,omitempty"`
}

func (m *MulticastGroupListItem) Reset()                    { *m = MulticastGroupListItem{} }
func (m *MulticastGroupListItem) String() string            { return proto.CompactTextString(m) }
func (*MulticastGroupListItem) ProtoMessage()               {}
func (*MulticastGroupListItem) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *MulticastGroupListItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *MulticastGroupListItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MulticastGroupListItem) GetServiceProfileId() string {
	if m != nil {
		return m.ServiceProfileId
	}
	return ""
}

func (m *MulticastGroupListItem) GetServiceProfileName() string {
	if m != nil {
		return m.ServiceProfileName
	}
	return ""
}

type CreateMulticastGroupRequest struct {
	// Multicast-group object to create.
	MulticastGroup *MulticastGroup `protobuf:"bytes,1,opt,name=multicast_group,json=multicastGroup" json:"multicast_group,omitempty"`
}

func (m *CreateMulticastGroupRequest) Reset()                    { *m = CreateMulticastGroupRequest{} }
func (m *CreateMulticastGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateMulticastGroupRequest) ProtoMessage()               {}
func (*CreateMulticastGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{2} }

func (m *CreateMulticastGroupRequest) GetMulticastGroup() *MulticastGroup {
	if m != nil {
		return m.MulticastGroup
	}
	return nil
}

type CreateMulticastGroupResponse struct {
	// ID of created group (string formatted UUID).
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateMulticastGroupResponse) Reset()                    { *m = CreateMulticastGroupResponse{} }
func (m *CreateMulticastGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateMulticastGroupResponse) ProtoMessage()               {}
func (*CreateMulticastGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{3} }

func (m *CreateMulticastGroupResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetMulticastGroupRequest struct {
	// ID (string formatted UUID).
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetMulticastGroupRequest) Reset()                    { *m = GetMulticastGroupRequest{} }
func (m *GetMulticastGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GetMulticastGroupRequest) ProtoMessage()               {}
func (*GetMulticastGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{4} }

func (m *GetMulticastGroupRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetMulticastGroupResponse struct {
	// Multicast-group object.
	MulticastGroup *MulticastGroup `protobuf:"bytes,1,opt,name=multicast_group,json=multicastGroup" json:"multicast_group,omitempty"`
	// Created at timestamp.
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *GetMulticastGroupResponse) Reset()                    { *m = GetMulticastGroupResponse{} }
func (m *GetMulticastGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GetMulticastGroupResponse) ProtoMessage()               {}
func (*GetMulticastGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{5} }

func (m *GetMulticastGroupResponse) GetMulticastGroup() *MulticastGroup {
	if m != nil {
		return m.MulticastGroup
	}
	return nil
}

func (m *GetMulticastGroupResponse) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *GetMulticastGroupResponse) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type UpdateMulticastGroupRequest struct {
	// Multicast-group object to update.
	MulticastGroup *MulticastGroup `protobuf:"bytes,1,opt,name=multicast_group,json=multicastGroup" json:"multicast_group,omitempty"`
}

func (m *UpdateMulticastGroupRequest) Reset()                    { *m = UpdateMulticastGroupRequest{} }
func (m *UpdateMulticastGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateMulticastGroupRequest) ProtoMessage()               {}
func (*UpdateMulticastGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{6} }

func (m *UpdateMulticastGroupRequest) GetMulticastGroup() *MulticastGroup {
	if m != nil {
		return m.MulticastGroup
	}
	return nil
}

type DeleteMulticastGroupRequest struct {
	// ID (string formatted UUID).
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteMulticastGroupRequest) Reset()                    { *m = DeleteMulticastGroupRequest{} }
func (m *DeleteMulticastGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteMulticastGroupRequest) ProtoMessage()               {}
func (*DeleteMulticastGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{7} }

func (m *DeleteMulticastGroupRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type AddDeviceToMulticastGroupRequest struct {
	// Multicast-group ID (string formatted UUID).
	MulticastGroupId string `protobuf:"bytes,1,opt,name=multicast_group_id,json=multicastGroupID" json:"multicast_group_id,omitempty"`
	// Device EUI (HEX encoded string).
	// Note that the device must be under the same service-profile as the
	// multicast-group.
	DevEui string `protobuf:"bytes,2,opt,name=dev_eui,json=devEUI" json:"dev_eui,omitempty"`
}

func (m *AddDeviceToMulticastGroupRequest) Reset()         { *m = AddDeviceToMulticastGroupRequest{} }
func (m *AddDeviceToMulticastGroupRequest) String() string { return proto.CompactTextString(m) }
func (*AddDeviceToMulticastGroupRequest) ProtoMessage()    {}
func (*AddDeviceToMulticastGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{8}
}

func (m *AddDeviceToMulticastGroupRequest) GetMulticastGroupId() string {
	if m != nil {
		return m.MulticastGroupId
	}
	return ""
}

func (m *AddDeviceToMulticastGroupRequest) GetDevEui() string {
	if m != nil {
		return m.DevEui
	}
	return ""
}

type RemoveDeviceFromMulticastGroupRequest struct {
	// Multicast-group ID (string formatted UUID).
	MulticastGroupId string `protobuf:"bytes,1,opt,name=multicast_group_id,json=multicastGroupID" json:"multicast_group_id,omitempty"`
	// Device EUI (HEX encoded string).
	DevEui string `protobuf:"bytes,2,opt,name=dev_eui,json=devEUI" json:"dev_eui,omitempty"`
}

func (m *RemoveDeviceFromMulticastGroupRequest) Reset()         { *m = RemoveDeviceFromMulticastGroupRequest{} }
func (m *RemoveDeviceFromMulticastGroupRequest) String() string { return proto.CompactTextString(m) }
func (*RemoveDeviceFromMulticastGroupRequest) ProtoMessage()    {}
func (*RemoveDeviceFromMulticastGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{9}
}

func (m *RemoveDeviceFromMulticastGroupRequest) GetMulticastGroupId() string {
	if m != nil {
		return m.MulticastGroupId
	}
	return ""
}

func (m *RemoveDeviceFromMulticastGroupRequest) GetDevEui() string {
	if m != nil {
		return m.DevEui
	}
	return ""
}

type ListMulticastGroupRequest struct {
	// Max number of items to return.
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// Organization id to filter on.
	OrganizationId int64 `protobuf:"varint,3,opt,name=organization_id,json=organizationID" json:"organization_id,omitempty"`
	// Device EUI (HEX encoded string) to filter on.
	DevEui string `protobuf:"bytes,4,opt,name=dev_eui,json=devEUI" json:"dev_eui,omitempty"`
	// Service-profile ID to filter on.
	ServiceProfileId string `protobuf:"bytes,5,opt,name=service_profile_id,json=serviceProfileID" json:"service_profile_id,omitempty"`
	// Search can be used to search on the multicast-group name.
	Search string `protobuf:"bytes,6,opt,name=search" json:"search,omitempty"`
}

func (m *ListMulticastGroupRequest) Reset()                    { *m = ListMulticastGroupRequest{} }
func (m *ListMulticastGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ListMulticastGroupRequest) ProtoMessage()               {}
func (*ListMulticastGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{10} }

func (m *ListMulticastGroupRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListMulticastGroupRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListMulticastGroupRequest) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *ListMulticastGroupRequest) GetDevEui() string {
	if m != nil {
		return m.DevEui
	}
	return ""
}

func (m *ListMulticastGroupRequest) GetServiceProfileId() string {
	if m != nil {
		return m.ServiceProfileId
	}
	return ""
}

func (m *ListMulticastGroupRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

type ListMulticastGroupResponse struct {
	// Total number of multicast-groups.
	TotalCount int64                     `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	Result     []*MulticastGroupListItem `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListMulticastGroupResponse) Reset()                    { *m = ListMulticastGroupResponse{} }
func (m *ListMulticastGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*ListMulticastGroupResponse) ProtoMessage()               {}
func (*ListMulticastGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{11} }

func (m *ListMulticastGroupResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListMulticastGroupResponse) GetResult() []*MulticastGroupListItem {
	if m != nil {
		return m.Result
	}
	return nil
}

type MulticastQueueItem struct {
	// Multicast-group ID (string formatted UUID).
	MulticastGroupId string `protobuf:"bytes,1,opt,name=multicast_group_id,json=multicastGroupID" json:"multicast_group_id,omitempty"`
	// Downlink frame-counter.
	// This will be automatically set on enqueue.
	FCnt uint32 `protobuf:"varint,2,opt,name=f_cnt,json=fCnt" json:"f_cnt,omitempty"`
	// FPort used (must be > 0).
	FPort uint32 `protobuf:"varint,3,opt,name=f_port,json=fPort" json:"f_port,omitempty"`
	// Base64 encoded data.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MulticastQueueItem) Reset()                    { *m = MulticastQueueItem{} }
func (m *MulticastQueueItem) String() string            { return proto.CompactTextString(m) }
func (*MulticastQueueItem) ProtoMessage()               {}
func (*MulticastQueueItem) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{12} }

func (m *MulticastQueueItem) GetMulticastGroupId() string {
	if m != nil {
		return m.MulticastGroupId
	}
	return ""
}

func (m *MulticastQueueItem) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *MulticastQueueItem) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *MulticastQueueItem) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type EnqueueMulticastQueueItemRequest struct {
	// Multicast queue-item object to enqueue.
	MulticastQueueItem *MulticastQueueItem `protobuf:"bytes,1,opt,name=multicast_queue_item,json=multicastQueueItem" json:"multicast_queue_item,omitempty"`
}

func (m *EnqueueMulticastQueueItemRequest) Reset()         { *m = EnqueueMulticastQueueItemRequest{} }
func (m *EnqueueMulticastQueueItemRequest) String() string { return proto.CompactTextString(m) }
func (*EnqueueMulticastQueueItemRequest) ProtoMessage()    {}
func (*EnqueueMulticastQueueItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{13}
}

func (m *EnqueueMulticastQueueItemRequest) GetMulticastQueueItem() *MulticastQueueItem {
	if m != nil {
		return m.MulticastQueueItem
	}
	return nil
}

type EnqueueMulticastQueueItemResponse struct {
	// Frame-counter for the enqueued payload.
	FCnt uint32 `protobuf:"varint,1,opt,name=f_cnt,json=fCnt" json:"f_cnt,omitempty"`
}

func (m *EnqueueMulticastQueueItemResponse) Reset()         { *m = EnqueueMulticastQueueItemResponse{} }
func (m *EnqueueMulticastQueueItemResponse) String() string { return proto.CompactTextString(m) }
func (*EnqueueMulticastQueueItemResponse) ProtoMessage()    {}
func (*EnqueueMulticastQueueItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{14}
}

func (m *EnqueueMulticastQueueItemResponse) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

type FlushMulticastGroupQueueItemsRequest struct {
	// Multicast-group ID (string formatted UUID).
	MulticastGroupId string `protobuf:"bytes,1,opt,name=multicast_group_id,json=multicastGroupID" json:"multicast_group_id,omitempty"`
}

func (m *FlushMulticastGroupQueueItemsRequest) Reset()         { *m = FlushMulticastGroupQueueItemsRequest{} }
func (m *FlushMulticastGroupQueueItemsRequest) String() string { return proto.CompactTextString(m) }
func (*FlushMulticastGroupQueueItemsRequest) ProtoMessage()    {}
func (*FlushMulticastGroupQueueItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{15}
}

func (m *FlushMulticastGroupQueueItemsRequest) GetMulticastGroupId() string {
	if m != nil {
		return m.MulticastGroupId
	}
	return ""
}

type ListMulticastGroupQueueItemsRequest struct {
	// Multicast-group ID (string formatted UUID).
	MulticastGroupId string `protobuf:"bytes,1,opt,name=multicast_group_id,json=multicastGroupID" json:"multicast_group_id,omitempty"`
}

func (m *ListMulticastGroupQueueItemsRequest) Reset()         { *m = ListMulticastGroupQueueItemsRequest{} }
func (m *ListMulticastGroupQueueItemsRequest) String() string { return proto.CompactTextString(m) }
func (*ListMulticastGroupQueueItemsRequest) ProtoMessage()    {}
func (*ListMulticastGroupQueueItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{16}
}

func (m *ListMulticastGroupQueueItemsRequest) GetMulticastGroupId() string {
	if m != nil {
		return m.MulticastGroupId
	}
	return ""
}

type ListMulticastGroupQueueItemsResponse struct {
	MulticastQueueItems []*MulticastQueueItem `protobuf:"bytes,1,rep,name=multicast_queue_items,json=multicastQueueItems" json:"multicast_queue_items,omitempty"`
}

func (m *ListMulticastGroupQueueItemsResponse) Reset()         { *m = ListMulticastGroupQueueItemsResponse{} }
func (m *ListMulticastGroupQueueItemsResponse) String() string { return proto.CompactTextString(m) }
func (*ListMulticastGroupQueueItemsResponse) ProtoMessage()    {}
func (*ListMulticastGroupQueueItemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor12, []int{17}
}

func (m *ListMulticastGroupQueueItemsResponse) GetMulticastQueueItems() []*MulticastQueueItem {
	if m != nil {
		return m.MulticastQueueItems
	}
	return nil
}

func init() {
	proto.RegisterType((*MulticastGroup)(nil), "api.MulticastGroup")
	proto.RegisterType((*MulticastGroupListItem)(nil), "api.MulticastGroupListItem")
	proto.RegisterType((*CreateMulticastGroupRequest)(nil), "api.CreateMulticastGroupRequest")
	proto.RegisterType((*CreateMulticastGroupResponse)(nil), "api.CreateMulticastGroupResponse")
	proto.RegisterType((*GetMulticastGroupRequest)(nil), "api.GetMulticastGroupRequest")
	proto.RegisterType((*GetMulticastGroupResponse)(nil), "api.GetMulticastGroupResponse")
	proto.RegisterType((*UpdateMulticastGroupRequest)(nil), "api.UpdateMulticastGroupRequest")
	proto.RegisterType((*DeleteMulticastGroupRequest)(nil), "api.DeleteMulticastGroupRequest")
	proto.RegisterType((*AddDeviceToMulticastGroupRequest)(nil), "api.AddDeviceToMulticastGroupRequest")
	proto.RegisterType((*RemoveDeviceFromMulticastGroupRequest)(nil), "api.RemoveDeviceFromMulticastGroupRequest")
	proto.RegisterType((*ListMulticastGroupRequest)(nil), "api.ListMulticastGroupRequest")
	proto.RegisterType((*ListMulticastGroupResponse)(nil), "api.ListMulticastGroupResponse")
	proto.RegisterType((*MulticastQueueItem)(nil), "api.MulticastQueueItem")
	proto.RegisterType((*EnqueueMulticastQueueItemRequest)(nil), "api.EnqueueMulticastQueueItemRequest")
	proto.RegisterType((*EnqueueMulticastQueueItemResponse)(nil), "api.EnqueueMulticastQueueItemResponse")
	proto.RegisterType((*FlushMulticastGroupQueueItemsRequest)(nil), "api.FlushMulticastGroupQueueItemsRequest")
	proto.RegisterType((*ListMulticastGroupQueueItemsRequest)(nil), "api.ListMulticastGroupQueueItemsRequest")
	proto.RegisterType((*ListMulticastGroupQueueItemsResponse)(nil), "api.ListMulticastGroupQueueItemsResponse")
	proto.RegisterEnum("api.MulticastGroupType", MulticastGroupType_name, MulticastGroupType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MulticastGroupService service

type MulticastGroupServiceClient interface {
	// Create creates the given multicast-group.
	Create(ctx context.Context, in *CreateMulticastGroupRequest, opts ...grpc.CallOption) (*CreateMulticastGroupResponse, error)
	// Get returns a multicast-group given an ID.
	Get(ctx context.Context, in *GetMulticastGroupRequest, opts ...grpc.CallOption) (*GetMulticastGroupResponse, error)
	// Update updates the given multicast-group.
	Update(ctx context.Context, in *UpdateMulticastGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// Delete deletes a multicast-group given an ID.
	Delete(ctx context.Context, in *DeleteMulticastGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// List lists the available multicast-groups.
	List(ctx context.Context, in *ListMulticastGroupRequest, opts ...grpc.CallOption) (*ListMulticastGroupResponse, error)
	// AddDevice adds the given device to the multicast-group.
	AddDevice(ctx context.Context, in *AddDeviceToMulticastGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// RemoveDevice removes the given device from the multicast-group.
	RemoveDevice(ctx context.Context, in *RemoveDeviceFromMulticastGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// Enqueue adds the given item to the multicast-queue.
	Enqueue(ctx context.Context, in *EnqueueMulticastQueueItemRequest, opts ...grpc.CallOption) (*EnqueueMulticastQueueItemResponse, error)
	// FlushQueue flushes the multicast-group queue.
	FlushQueue(ctx context.Context, in *FlushMulticastGroupQueueItemsRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// ListQueue lists the items in the multicast-group queue.
	ListQueue(ctx context.Context, in *ListMulticastGroupQueueItemsRequest, opts ...grpc.CallOption) (*ListMulticastGroupQueueItemsResponse, error)
}

type multicastGroupServiceClient struct {
	cc *grpc.ClientConn
}

func NewMulticastGroupServiceClient(cc *grpc.ClientConn) MulticastGroupServiceClient {
	return &multicastGroupServiceClient{cc}
}

func (c *multicastGroupServiceClient) Create(ctx context.Context, in *CreateMulticastGroupRequest, opts ...grpc.CallOption) (*CreateMulticastGroupResponse, error) {
	out := new(CreateMulticastGroupResponse)
	err := grpc.Invoke(ctx, "/api.MulticastGroupService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastGroupServiceClient) Get(ctx context.Context, in *GetMulticastGroupRequest, opts ...grpc.CallOption) (*GetMulticastGroupResponse, error) {
	out := new(GetMulticastGroupResponse)
	err := grpc.Invoke(ctx, "/api.MulticastGroupService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastGroupServiceClient) Update(ctx context.Context, in *UpdateMulticastGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.MulticastGroupService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastGroupServiceClient) Delete(ctx context.Context, in *DeleteMulticastGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.MulticastGroupService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastGroupServiceClient) List(ctx context.Context, in *ListMulticastGroupRequest, opts ...grpc.CallOption) (*ListMulticastGroupResponse, error) {
	out := new(ListMulticastGroupResponse)
	err := grpc.Invoke(ctx, "/api.MulticastGroupService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastGroupServiceClient) AddDevice(ctx context.Context, in *AddDeviceToMulticastGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.MulticastGroupService/AddDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastGroupServiceClient) RemoveDevice(ctx context.Context, in *RemoveDeviceFromMulticastGroupRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.MulticastGroupService/RemoveDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastGroupServiceClient) Enqueue(ctx context.Context, in *EnqueueMulticastQueueItemRequest, opts ...grpc.CallOption) (*EnqueueMulticastQueueItemResponse, error) {
	out := new(EnqueueMulticastQueueItemResponse)
	err := grpc.Invoke(ctx, "/api.MulticastGroupService/Enqueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastGroupServiceClient) FlushQueue(ctx context.Context, in *FlushMulticastGroupQueueItemsRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.MulticastGroupService/FlushQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multicastGroupServiceClient) ListQueue(ctx context.Context, in *ListMulticastGroupQueueItemsRequest, opts ...grpc.CallOption) (*ListMulticastGroupQueueItemsResponse, error) {
	out := new(ListMulticastGroupQueueItemsResponse)
	err := grpc.Invoke(ctx, "/api.MulticastGroupService/ListQueue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MulticastGroupService service

type MulticastGroupServiceServer interface {
	// Create creates the given multicast-group.
	Create(context.Context, *CreateMulticastGroupRequest) (*CreateMulticastGroupResponse, error)
	// Get returns a multicast-group given an ID.
	Get(context.Context, *GetMulticastGroupRequest) (*GetMulticastGroupResponse, error)
	// Update updates the given multicast-group.
	Update(context.Context, *UpdateMulticastGroupRequest) (*google_protobuf2.Empty, error)
	// Delete deletes a multicast-group given an ID.
	Delete(context.Context, *DeleteMulticastGroupRequest) (*google_protobuf2.Empty, error)
	// List lists the available multicast-groups.
	List(context.Context, *ListMulticastGroupRequest) (*ListMulticastGroupResponse, error)
	// AddDevice adds the given device to the multicast-group.
	AddDevice(context.Context, *AddDeviceToMulticastGroupRequest) (*google_protobuf2.Empty, error)
	// RemoveDevice removes the given device from the multicast-group.
	RemoveDevice(context.Context, *RemoveDeviceFromMulticastGroupRequest) (*google_protobuf2.Empty, error)
	// Enqueue adds the given item to the multicast-queue.
	Enqueue(context.Context, *EnqueueMulticastQueueItemRequest) (*EnqueueMulticastQueueItemResponse, error)
	// FlushQueue flushes the multicast-group queue.
	FlushQueue(context.Context, *FlushMulticastGroupQueueItemsRequest) (*google_protobuf2.Empty, error)
	// ListQueue lists the items in the multicast-group queue.
	ListQueue(context.Context, *ListMulticastGroupQueueItemsRequest) (*ListMulticastGroupQueueItemsResponse, error)
}

func RegisterMulticastGroupServiceServer(s *grpc.Server, srv MulticastGroupServiceServer) {
	s.RegisterService(&_MulticastGroupService_serviceDesc, srv)
}

func _MulticastGroupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastGroupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MulticastGroupService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastGroupServiceServer).Create(ctx, req.(*CreateMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MulticastGroupService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastGroupServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MulticastGroupService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastGroupServiceServer).Get(ctx, req.(*GetMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MulticastGroupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastGroupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MulticastGroupService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastGroupServiceServer).Update(ctx, req.(*UpdateMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MulticastGroupService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastGroupServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MulticastGroupService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastGroupServiceServer).Delete(ctx, req.(*DeleteMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MulticastGroupService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastGroupServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MulticastGroupService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastGroupServiceServer).List(ctx, req.(*ListMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MulticastGroupService_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceToMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastGroupServiceServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MulticastGroupService/AddDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastGroupServiceServer).AddDevice(ctx, req.(*AddDeviceToMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MulticastGroupService_RemoveDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeviceFromMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastGroupServiceServer).RemoveDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MulticastGroupService/RemoveDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastGroupServiceServer).RemoveDevice(ctx, req.(*RemoveDeviceFromMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MulticastGroupService_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueMulticastQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastGroupServiceServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MulticastGroupService/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastGroupServiceServer).Enqueue(ctx, req.(*EnqueueMulticastQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MulticastGroupService_FlushQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushMulticastGroupQueueItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastGroupServiceServer).FlushQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MulticastGroupService/FlushQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastGroupServiceServer).FlushQueue(ctx, req.(*FlushMulticastGroupQueueItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MulticastGroupService_ListQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMulticastGroupQueueItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MulticastGroupServiceServer).ListQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MulticastGroupService/ListQueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MulticastGroupServiceServer).ListQueue(ctx, req.(*ListMulticastGroupQueueItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MulticastGroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.MulticastGroupService",
	HandlerType: (*MulticastGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _MulticastGroupService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _MulticastGroupService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MulticastGroupService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MulticastGroupService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MulticastGroupService_List_Handler,
		},
		{
			MethodName: "AddDevice",
			Handler:    _MulticastGroupService_AddDevice_Handler,
		},
		{
			MethodName: "RemoveDevice",
			Handler:    _MulticastGroupService_RemoveDevice_Handler,
		},
		{
			MethodName: "Enqueue",
			Handler:    _MulticastGroupService_Enqueue_Handler,
		},
		{
			MethodName: "FlushQueue",
			Handler:    _MulticastGroupService_FlushQueue_Handler,
		},
		{
			MethodName: "ListQueue",
			Handler:    _MulticastGroupService_ListQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "multicastGroup.proto",
}

func init() { proto.RegisterFile("multicastGroup.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 1170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xdb, 0xc6,
	0x13, 0xff, 0x53, 0xb2, 0xe5, 0xbf, 0x46, 0x8e, 0xe2, 0xae, 0xbf, 0x68, 0xda, 0xa9, 0x15, 0x36,
	0x69, 0x15, 0x21, 0x91, 0x02, 0x05, 0x6d, 0xd3, 0x22, 0x2d, 0xa0, 0xda, 0x8e, 0xe1, 0x26, 0x0d,
	0x5c, 0xca, 0x39, 0xf5, 0x40, 0x30, 0xe2, 0x4a, 0x5e, 0x58, 0xe4, 0x32, 0xe4, 0xd2, 0x81, 0x1a,
	0xf8, 0x92, 0x5b, 0xce, 0xbd, 0x14, 0x45, 0x9f, 0xa0, 0x8f, 0xd0, 0x97, 0x28, 0x8a, 0xbe, 0x41,
	0xd1, 0x07, 0x29, 0x38, 0x5c, 0x51, 0x1f, 0x26, 0x65, 0xbb, 0x41, 0x2e, 0x02, 0x77, 0x76, 0x76,
	0xe6, 0x37, 0xbf, 0xf9, 0x12, 0xac, 0x38, 0x61, 0x5f, 0xb0, 0x8e, 0x15, 0x88, 0x7d, 0x9f, 0x87,
	0x5e, 0xdd, 0xf3, 0xb9, 0xe0, 0x24, 0x6f, 0x79, 0x4c, 0xdb, 0xea, 0x71, 0xde, 0xeb, 0xd3, 0x86,
	0xe5, 0xb1, 0x86, 0xe5, 0xba, 0x5c, 0x58, 0x82, 0x71, 0x37, 0x88, 0x55, 0xb4, 0x0d, 0xc1, 0x1c,
	0x1a, 0x08, 0xcb, 0xf1, 0x1a, 0xc9, 0x97, 0xbc, 0xfa, 0x80, 0x3a, 0x9e, 0x18, 0x34, 0xf0, 0x37,
	0x16, 0xe9, 0x7f, 0xe7, 0xa0, 0xfc, 0xdd, 0x84, 0x27, 0x52, 0x86, 0x1c, 0xb3, 0x55, 0xa5, 0xa2,
	0x54, 0x8b, 0x46, 0x8e, 0xd9, 0x84, 0xc0, 0x9c, 0x6b, 0x39, 0x54, 0xcd, 0xa1, 0x04, 0xbf, 0xc9,
	0x3a, 0x2c, 0x38, 0x1d, 0xd3, 0xb2, 0x6d, 0x5f, 0xcd, 0xa3, 0xb8, 0xe0, 0x74, 0x5a, 0xb6, 0xed,
	0x93, 0x6d, 0x58, 0x74, 0x3a, 0xa6, 0xfb, 0xea, 0xc4, 0x0c, 0xcc, 0x13, 0x3a, 0x50, 0xe7, 0xf0,
	0xb6, 0xe8, 0x74, 0x9e, 0xbd, 0x3a, 0x69, 0x3f, 0xa1, 0x03, 0xa9, 0x60, 0x79, 0x9e, 0x54, 0x98,
	0x1f, 0x2a, 0xb4, 0x3c, 0x0f, 0x15, 0x96, 0x61, 0xbe, 0x6b, 0x76, 0x5c, 0xa1, 0x16, 0x2a, 0x4a,
	0xf5, 0x9a, 0x31, 0xd7, 0xdd, 0x71, 0x05, 0xf9, 0x0c, 0xa0, 0x17, 0x81, 0x33, 0xc5, 0xc0, 0xa3,
	0xea, 0x42, 0x45, 0xa9, 0x96, 0x9b, 0xeb, 0x75, 0xcb, 0x63, 0xf5, 0x49, 0xf0, 0x47, 0x03, 0x8f,
	0x1a, 0xc5, 0xde, 0xf0, 0x33, 0x8a, 0xc5, 0xf6, 0xd5, 0xff, 0xa3, 0xa5, 0x9c, 0xed, 0x93, 0x2d,
	0x28, 0x76, 0x7d, 0xfa, 0x32, 0xa4, 0x6e, 0x67, 0xa0, 0x16, 0x51, 0x3c, 0x12, 0x90, 0x2a, 0x2c,
	0x79, 0xcc, 0xed, 0x99, 0x41, 0x9f, 0x0b, 0xd3, 0xa3, 0x3e, 0xe3, 0xb6, 0x0a, 0xa8, 0x54, 0x8e,
	0xe4, 0xed, 0x3e, 0x17, 0x87, 0x28, 0x25, 0x77, 0x81, 0x04, 0xd4, 0x3f, 0x65, 0x1d, 0x6a, 0x7a,
	0x3e, 0xef, 0xb2, 0x3e, 0x35, 0x99, 0xad, 0x96, 0x30, 0x96, 0x25, 0x79, 0x73, 0x18, 0x5f, 0x1c,
	0xec, 0xea, 0xbf, 0x2a, 0xb0, 0x36, 0x89, 0xf3, 0x29, 0x0b, 0xc4, 0x81, 0xa0, 0xce, 0xa5, 0xc8,
	0x4e, 0x77, 0x96, 0x4f, 0x77, 0x46, 0xee, 0xc3, 0xca, 0xb4, 0x36, 0x5a, 0x8c, 0x33, 0x41, 0x26,
	0xf5, 0x9f, 0x59, 0x0e, 0xd5, 0x7f, 0x80, 0xcd, 0x1d, 0x9f, 0x5a, 0x82, 0x4e, 0x62, 0x34, 0x22,
	0x5a, 0x02, 0x41, 0x1e, 0xc1, 0xf5, 0xa4, 0x16, 0x4d, 0xa4, 0x16, 0xf1, 0x96, 0x9a, 0xcb, 0x29,
	0x09, 0x30, 0xca, 0x93, 0x75, 0xab, 0xd7, 0x61, 0x2b, 0xdd, 0x78, 0xe0, 0x71, 0x37, 0xa0, 0xd3,
	0x04, 0xe8, 0x35, 0x50, 0xf7, 0xa9, 0x48, 0x47, 0x32, 0xad, 0xfb, 0x87, 0x02, 0x1b, 0x29, 0xca,
	0xd2, 0xf2, 0x3b, 0xe1, 0x26, 0x5f, 0x00, 0x74, 0x10, 0xb7, 0x6d, 0x5a, 0x02, 0xd3, 0x51, 0x6a,
	0x6a, 0xf5, 0xb8, 0xf3, 0xe2, 0xde, 0x79, 0x11, 0x76, 0xeb, 0x47, 0xc3, 0x0e, 0x33, 0x8a, 0x52,
	0xbb, 0x25, 0xa2, 0xa7, 0xa1, 0x67, 0x0f, 0x9f, 0xe6, 0x2f, 0x7e, 0x2a, 0xb5, 0x5b, 0x22, 0x4a,
	0xc5, 0x73, 0x3c, 0xbc, 0x8f, 0x54, 0xdc, 0x83, 0xcd, 0x5d, 0xda, 0xa7, 0x59, 0xc6, 0xa7, 0xd9,
	0x65, 0x50, 0x69, 0xd9, 0xf6, 0x2e, 0x8d, 0xca, 0xe5, 0x88, 0xa7, 0xbf, 0xb9, 0x0b, 0x64, 0x0a,
	0x90, 0x99, 0xd8, 0x58, 0x9a, 0x74, 0x7f, 0xb0, 0x1b, 0x4d, 0x0d, 0x9b, 0x9e, 0x9a, 0x34, 0x64,
	0xb2, 0xbe, 0x0b, 0x36, 0x3d, 0xdd, 0x7b, 0x7e, 0xa0, 0xbb, 0x70, 0xdb, 0xa0, 0x0e, 0x3f, 0xa5,
	0xb1, 0xb7, 0xc7, 0x3e, 0x77, 0xde, 0xab, 0xbf, 0x3f, 0x15, 0xd8, 0x88, 0x5a, 0x30, 0xdd, 0xc9,
	0x0a, 0xcc, 0xf7, 0x99, 0xc3, 0x04, 0xda, 0xcd, 0x1b, 0xf1, 0x81, 0xac, 0x41, 0x81, 0x77, 0xbb,
	0x01, 0x8d, 0x8b, 0x21, 0x6f, 0xc8, 0x13, 0xf9, 0x04, 0xae, 0x73, 0xbf, 0x67, 0xb9, 0xec, 0x47,
	0x1c, 0xc3, 0xc3, 0xd6, 0xcc, 0x1b, 0xe5, 0x71, 0xf1, 0x24, 0x9a, 0xb9, 0x71, 0x34, 0x19, 0xfd,
	0x3d, 0x9f, 0xd1, 0xdf, 0x6b, 0x50, 0x08, 0xa8, 0xe5, 0x77, 0x8e, 0x71, 0x40, 0x16, 0x0d, 0x79,
	0xd2, 0x7d, 0xd0, 0xd2, 0x42, 0x92, 0xcd, 0xb0, 0x0d, 0x25, 0xc1, 0x85, 0xd5, 0x37, 0x3b, 0x3c,
	0x74, 0x87, 0x91, 0x01, 0x8a, 0x76, 0x22, 0x09, 0x79, 0x00, 0x05, 0x9f, 0x06, 0x61, 0x3f, 0x0a,
	0x2f, 0x5f, 0x2d, 0x35, 0x37, 0x53, 0x2a, 0x6a, 0x38, 0xb5, 0x0c, 0xa9, 0xaa, 0xbf, 0x51, 0x80,
	0x24, 0x2a, 0xdf, 0x87, 0x34, 0xa4, 0x38, 0xd4, 0xae, 0x96, 0xa5, 0x64, 0xe0, 0xe7, 0xc6, 0x06,
	0xfe, 0x2a, 0x14, 0xba, 0xa6, 0xc7, 0xfd, 0xb8, 0x7f, 0xae, 0x19, 0xf3, 0xdd, 0x43, 0xee, 0x8b,
	0x68, 0x3c, 0xda, 0x96, 0xb0, 0x90, 0xc0, 0x45, 0x03, 0xbf, 0x75, 0x07, 0x2a, 0x7b, 0xee, 0xcb,
	0xc8, 0xf9, 0x79, 0x28, 0xc3, 0x94, 0x1e, 0x8c, 0xed, 0x53, 0x13, 0x75, 0x4d, 0x26, 0xa8, 0x23,
	0xbb, 0x67, 0x6a, 0x93, 0x8c, 0x5e, 0x8f, 0xc2, 0x48, 0x64, 0xfa, 0x43, 0xb8, 0x39, 0xc3, 0x9d,
	0xa4, 0x3b, 0x89, 0x49, 0x19, 0xc5, 0xa4, 0x1f, 0xc1, 0xad, 0xc7, 0xfd, 0x30, 0x38, 0x9e, 0x24,
	0x35, 0x79, 0x1c, 0xfc, 0xa7, 0x22, 0xd7, 0xdb, 0xf0, 0xd1, 0xf9, 0xbc, 0xbf, 0xab, 0xd1, 0x00,
	0x6e, 0xcd, 0x36, 0x2a, 0xe3, 0x7c, 0x02, 0xab, 0x69, 0xbc, 0x06, 0xaa, 0x82, 0x45, 0x94, 0x49,
	0xec, 0xf2, 0x79, 0x62, 0x83, 0x5a, 0x7d, 0xac, 0x98, 0x92, 0x6d, 0x4e, 0x4a, 0xb0, 0xb0, 0xf3,
	0xb4, 0xd5, 0x6e, 0x9b, 0x3b, 0x4b, 0xff, 0x1b, 0x1d, 0xbe, 0x59, 0x52, 0x9a, 0xbf, 0x03, 0xac,
	0x4e, 0x3e, 0x68, 0xc7, 0xcd, 0x42, 0x38, 0x14, 0xe2, 0xa5, 0x43, 0x2a, 0x88, 0x60, 0xc6, 0x7a,
	0xd3, 0x6e, 0xce, 0xd0, 0x88, 0xa3, 0xd4, 0x2b, 0x6f, 0xfe, 0xfa, 0xe7, 0xa7, 0x9c, 0xa6, 0xaf,
	0xe2, 0x5f, 0xae, 0x04, 0xfa, 0x3d, 0xa4, 0x31, 0xf8, 0x52, 0xa9, 0x91, 0x63, 0xc8, 0xef, 0x53,
	0x41, 0x6e, 0xa0, 0xad, 0xac, 0xfd, 0xa5, 0x7d, 0x98, 0x75, 0x2d, 0xfd, 0xe8, 0xe8, 0x67, 0x8b,
	0x68, 0xa9, 0x7e, 0x1a, 0xaf, 0x99, 0x7d, 0x46, 0x06, 0x50, 0x88, 0x37, 0x84, 0x0c, 0x6d, 0xc6,
	0xba, 0xd0, 0xd6, 0xce, 0x2d, 0x9d, 0xbd, 0xe8, 0xaf, 0x9f, 0xfe, 0x29, 0xfa, 0x69, 0x68, 0xb5,
	0x0c, 0x3f, 0x53, 0x85, 0x52, 0x67, 0xf6, 0x59, 0x14, 0x64, 0x17, 0x0a, 0xf1, 0xfe, 0x90, 0xae,
	0x67, 0x2c, 0x93, 0x4c, 0xd7, 0x32, 0xc4, 0xda, 0xac, 0x10, 0xbb, 0x30, 0x17, 0x15, 0x1f, 0x89,
	0xe9, 0xca, 0x9c, 0xd3, 0xda, 0x76, 0xe6, 0xbd, 0xe4, 0xf3, 0x06, 0x3a, 0x5b, 0x27, 0xe9, 0x79,
	0x23, 0x6f, 0x15, 0x28, 0x26, 0x1b, 0x8e, 0xdc, 0x46, 0x6b, 0x17, 0x6d, 0xbc, 0xcc, 0xc0, 0xbe,
	0x42, 0x5f, 0x9f, 0xeb, 0xcd, 0xcb, 0x71, 0x6a, 0x32, 0xfb, 0xac, 0x61, 0xa3, 0x27, 0x2c, 0xa0,
	0x9f, 0x15, 0x58, 0x1c, 0x5f, 0x81, 0xa4, 0x86, 0x70, 0x2e, 0xb5, 0x15, 0x33, 0x31, 0xed, 0x22,
	0xa6, 0xaf, 0x6b, 0x8f, 0xae, 0x8e, 0xa9, 0xf1, 0x5a, 0xee, 0xaa, 0x33, 0xf2, 0x9b, 0x02, 0x0b,
	0x72, 0xe2, 0x49, 0x92, 0x2e, 0x1a, 0xb7, 0xda, 0xc7, 0x17, 0xa9, 0xc9, 0x04, 0x1d, 0x22, 0xc0,
	0x6f, 0xf5, 0xbd, 0x0b, 0x01, 0x8e, 0x66, 0x4b, 0x3d, 0x0d, 0x35, 0x5e, 0x47, 0x3c, 0xbe, 0x55,
	0x00, 0x70, 0xc8, 0xa2, 0x33, 0x72, 0x07, 0x81, 0x5c, 0x66, 0xea, 0x66, 0x92, 0xf8, 0x10, 0x31,
	0x36, 0x6b, 0xf7, 0xaf, 0x40, 0x62, 0x4c, 0xd6, 0x2f, 0x0a, 0x14, 0xa3, 0xea, 0x8c, 0xa1, 0x54,
	0x33, 0xaa, 0xf5, 0x3c, 0x92, 0x3b, 0x97, 0xd0, 0x94, 0x04, 0x4a, 0x70, 0xe4, 0xca, 0xe0, 0x5e,
	0x14, 0x30, 0xcc, 0x07, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x57, 0xe6, 0xfb, 0x68, 0x0e,
	0x00, 0x00,
}
