syntax = "proto3";

package appserver_serves_ui;

import "google/api/annotations.proto";
import "internal.proto";
import "google/protobuf/timestamp.proto";

service StakingService {
    rpc Stake (StakeRequest) returns (StakeResponse) {
        option (google.api.http) = {
            post: "/api/staking/{org_id}/stake"
            body: "*"
        };
    };

    rpc Unstake (UnstakeRequest) returns (UnstakeResponse) {
        option (google.api.http) = {
            post: "/api/staking/{org_id}/unstake"
            body: "*"
        };
    };

    rpc GetActiveStakes (GetActiveStakesRequest) returns (GetActiveStakesResponse) {
        option (google.api.http) = {
            get: "/api/staking/{org_id}/activestakes"
        };
    };

    rpc GetStakingRevenue (StakingRevenueRequest) returns (StakingRevenueResponse) {
        option (google.api.http) = {
            get: "/api/staking/{org_id}/revenue"
        };
    };

    rpc GetStakingHistory (StakingHistoryRequest) returns (StakingHistoryResponse) {
        option (google.api.http) = {
            get: "/api/staking/{org_id}/history"
        };
    };

    rpc GetStakingPercentage (StakingPercentageRequest) returns (StakingPercentageResponse) {
        option (google.api.http) = {
            get: "/api/staking/{org_id}/staking_percentage"
        };
    }
}

message StakingRevenueRequest {
    int64 org_id = 1;
    string currency = 2;
    google.protobuf.Timestamp from = 3;
    google.protobuf.Timestamp till = 4;
}

message StakingRevenueResponse {
    string amount = 1;
}

message StakeRequest {
    int64 org_id = 1;
    string amount = 2;
    string currency = 3;
}

message StakeResponse {
    string status = 1;
    ProfileResponse user_profile = 2;
}

message UnstakeRequest {
    int64 org_id = 1;
    string currency = 2;
}

message UnstakeResponse {
    string status = 1;
    ProfileResponse user_profile = 2;
}

message GetActiveStakesRequest {
    int64 org_id = 1;
    string currency = 2;
}

message ActiveStake {
    int64 id = 1;
    string amount = 3;
    string stake_status = 4;
    google.protobuf.Timestamp start_time = 5;
    google.protobuf.Timestamp end_time = 6;
}

message GetActiveStakesResponse {
    ActiveStake act_stake = 1;
    ProfileResponse user_profile = 2;
}

message StakingHistoryRequest {
    int64 org_id = 1;
    string currency = 4;
    google.protobuf.Timestamp from = 5;
    google.protobuf.Timestamp till = 6;
}

message Stake {
    int64 id = 1;
    google.protobuf.Timestamp start_time = 2;
    google.protobuf.Timestamp end_time = 3;
    string amount = 4;
    bool active = 5;
}

message StakingHistory {
    google.protobuf.Timestamp timestamp = 1;
    string amount = 2;
    string type = 3;
    Stake stake = 4;
}

message StakingHistoryResponse {
    ProfileResponse user_profile = 1;
    repeated StakingHistory staking_hist = 2;
    int64 count = 3;
}

message StakingPercentageRequest {
    int64 org_id = 1;
    string currency = 2;
}

message StakingPercentageResponse {
    double staking_percentage = 1;
}
