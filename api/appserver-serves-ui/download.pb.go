// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: download.proto

package appserver_serves_ui

import (
	context "context"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetFiatCurrencyListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetFiatCurrencyListRequest) Reset() {
	*x = GetFiatCurrencyListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_download_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyListRequest) ProtoMessage() {}

func (x *GetFiatCurrencyListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_download_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyListRequest.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyListRequest) Descriptor() ([]byte, []int) {
	return file_download_proto_rawDescGZIP(), []int{0}
}

type FiatCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *FiatCurrency) Reset() {
	*x = FiatCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_download_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiatCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiatCurrency) ProtoMessage() {}

func (x *FiatCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_download_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiatCurrency.ProtoReflect.Descriptor instead.
func (*FiatCurrency) Descriptor() ([]byte, []int) {
	return file_download_proto_rawDescGZIP(), []int{1}
}

func (x *FiatCurrency) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FiatCurrency) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type GetFiatCurrencyListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FiatCurrencyList []*FiatCurrency `protobuf:"bytes,1,rep,name=fiat_currency_list,json=fiatCurrencyList,proto3" json:"fiat_currency_list,omitempty"`
}

func (x *GetFiatCurrencyListResponse) Reset() {
	*x = GetFiatCurrencyListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_download_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFiatCurrencyListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFiatCurrencyListResponse) ProtoMessage() {}

func (x *GetFiatCurrencyListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_download_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFiatCurrencyListResponse.ProtoReflect.Descriptor instead.
func (*GetFiatCurrencyListResponse) Descriptor() ([]byte, []int) {
	return file_download_proto_rawDescGZIP(), []int{2}
}

func (x *GetFiatCurrencyListResponse) GetFiatCurrencyList() []*FiatCurrency {
	if x != nil {
		return x.FiatCurrencyList
	}
	return nil
}

type MiningReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId int64 `protobuf:"varint,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// accept string array for example: ETH_MXC or ETH_MXC\nDHX or DHX
	Currency     []string             `protobuf:"bytes,2,rep,name=currency,proto3" json:"currency,omitempty"`
	FiatCurrency string               `protobuf:"bytes,3,opt,name=fiat_currency,json=fiatCurrency,proto3" json:"fiat_currency,omitempty"`
	Start        *timestamp.Timestamp `protobuf:"bytes,4,opt,name=start,proto3" json:"start,omitempty"`
	End          *timestamp.Timestamp `protobuf:"bytes,5,opt,name=end,proto3" json:"end,omitempty"`
	Decimals     int32                `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
}

func (x *MiningReportRequest) Reset() {
	*x = MiningReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_download_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiningReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningReportRequest) ProtoMessage() {}

func (x *MiningReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_download_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningReportRequest.ProtoReflect.Descriptor instead.
func (*MiningReportRequest) Descriptor() ([]byte, []int) {
	return file_download_proto_rawDescGZIP(), []int{3}
}

func (x *MiningReportRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *MiningReportRequest) GetCurrency() []string {
	if x != nil {
		return x.Currency
	}
	return nil
}

func (x *MiningReportRequest) GetFiatCurrency() string {
	if x != nil {
		return x.FiatCurrency
	}
	return ""
}

func (x *MiningReportRequest) GetStart() *timestamp.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *MiningReportRequest) GetEnd() *timestamp.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *MiningReportRequest) GetDecimals() int32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

type MiningReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReportUri string `protobuf:"bytes,1,opt,name=report_uri,json=reportUri,proto3" json:"report_uri,omitempty"`
}

func (x *MiningReportResponse) Reset() {
	*x = MiningReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_download_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MiningReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MiningReportResponse) ProtoMessage() {}

func (x *MiningReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_download_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MiningReportResponse.ProtoReflect.Descriptor instead.
func (*MiningReportResponse) Descriptor() ([]byte, []int) {
	return file_download_proto_rawDescGZIP(), []int{4}
}

func (x *MiningReportResponse) GetReportUri() string {
	if x != nil {
		return x.ReportUri
	}
	return ""
}

var File_download_proto protoreflect.FileDescriptor

var file_download_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x13, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x75, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x40, 0x0a, 0x0c, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6e, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x12, 0x66, 0x69, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x52, 0x10, 0x66, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x13, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x61, 0x74, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x61, 0x74, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x73, 0x22, 0x35, 0x0a, 0x14, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x72, 0x69, 0x32, 0xef, 0x03, 0x0a, 0x0f, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xa9, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x46,
	0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x61, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29,
	0x12, 0x27, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2d, 0x66, 0x69, 0x61, 0x74, 0x2d, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x53, 0x56, 0x12, 0x28, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x5f, 0x75, 0x69, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x4d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x2d, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65, 0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x63,
	0x73, 0x76, 0x12, 0x96, 0x01, 0x0a, 0x0f, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x44, 0x46, 0x12, 0x28, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2e, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x2f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2d, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x65,
	0x2d, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x70, 0x64, 0x66, 0x42, 0x58, 0x5a, 0x56, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x78, 0x63, 0x2d, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x70, 0x77, 0x61, 0x6e, 0x2d, 0x61,
	0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70,
	0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x2d, 0x75,
	0x69, 0x3b, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x75, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_download_proto_rawDescOnce sync.Once
	file_download_proto_rawDescData = file_download_proto_rawDesc
)

func file_download_proto_rawDescGZIP() []byte {
	file_download_proto_rawDescOnce.Do(func() {
		file_download_proto_rawDescData = protoimpl.X.CompressGZIP(file_download_proto_rawDescData)
	})
	return file_download_proto_rawDescData
}

var file_download_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_download_proto_goTypes = []interface{}{
	(*GetFiatCurrencyListRequest)(nil),  // 0: appserver_serves_ui.GetFiatCurrencyListRequest
	(*FiatCurrency)(nil),                // 1: appserver_serves_ui.FiatCurrency
	(*GetFiatCurrencyListResponse)(nil), // 2: appserver_serves_ui.GetFiatCurrencyListResponse
	(*MiningReportRequest)(nil),         // 3: appserver_serves_ui.MiningReportRequest
	(*MiningReportResponse)(nil),        // 4: appserver_serves_ui.MiningReportResponse
	(*timestamp.Timestamp)(nil),         // 5: google.protobuf.Timestamp
}
var file_download_proto_depIdxs = []int32{
	1, // 0: appserver_serves_ui.GetFiatCurrencyListResponse.fiat_currency_list:type_name -> appserver_serves_ui.FiatCurrency
	5, // 1: appserver_serves_ui.MiningReportRequest.start:type_name -> google.protobuf.Timestamp
	5, // 2: appserver_serves_ui.MiningReportRequest.end:type_name -> google.protobuf.Timestamp
	0, // 3: appserver_serves_ui.DownloadService.GetFiatCurrencyList:input_type -> appserver_serves_ui.GetFiatCurrencyListRequest
	3, // 4: appserver_serves_ui.DownloadService.MiningReportCSV:input_type -> appserver_serves_ui.MiningReportRequest
	3, // 5: appserver_serves_ui.DownloadService.MiningReportPDF:input_type -> appserver_serves_ui.MiningReportRequest
	2, // 6: appserver_serves_ui.DownloadService.GetFiatCurrencyList:output_type -> appserver_serves_ui.GetFiatCurrencyListResponse
	4, // 7: appserver_serves_ui.DownloadService.MiningReportCSV:output_type -> appserver_serves_ui.MiningReportResponse
	4, // 8: appserver_serves_ui.DownloadService.MiningReportPDF:output_type -> appserver_serves_ui.MiningReportResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_download_proto_init() }
func file_download_proto_init() {
	if File_download_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_download_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_download_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiatCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_download_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFiatCurrencyListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_download_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiningReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_download_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MiningReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_download_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_download_proto_goTypes,
		DependencyIndexes: file_download_proto_depIdxs,
		MessageInfos:      file_download_proto_msgTypes,
	}.Build()
	File_download_proto = out.File
	file_download_proto_rawDesc = nil
	file_download_proto_goTypes = nil
	file_download_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DownloadServiceClient is the client API for DownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DownloadServiceClient interface {
	// Get support fiat currency list
	GetFiatCurrencyList(ctx context.Context, in *GetFiatCurrencyListRequest, opts ...grpc.CallOption) (*GetFiatCurrencyListResponse, error)
	// Request to download miningReport in csv format filtered by date
	MiningReportCSV(ctx context.Context, in *MiningReportRequest, opts ...grpc.CallOption) (*MiningReportResponse, error)
	// Request to download miningReport in pdf filtered by date
	MiningReportPDF(ctx context.Context, in *MiningReportRequest, opts ...grpc.CallOption) (*MiningReportResponse, error)
}

type downloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadServiceClient(cc grpc.ClientConnInterface) DownloadServiceClient {
	return &downloadServiceClient{cc}
}

func (c *downloadServiceClient) GetFiatCurrencyList(ctx context.Context, in *GetFiatCurrencyListRequest, opts ...grpc.CallOption) (*GetFiatCurrencyListResponse, error) {
	out := new(GetFiatCurrencyListResponse)
	err := c.cc.Invoke(ctx, "/appserver_serves_ui.DownloadService/GetFiatCurrencyList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) MiningReportCSV(ctx context.Context, in *MiningReportRequest, opts ...grpc.CallOption) (*MiningReportResponse, error) {
	out := new(MiningReportResponse)
	err := c.cc.Invoke(ctx, "/appserver_serves_ui.DownloadService/MiningReportCSV", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downloadServiceClient) MiningReportPDF(ctx context.Context, in *MiningReportRequest, opts ...grpc.CallOption) (*MiningReportResponse, error) {
	out := new(MiningReportResponse)
	err := c.cc.Invoke(ctx, "/appserver_serves_ui.DownloadService/MiningReportPDF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadServiceServer is the server API for DownloadService service.
type DownloadServiceServer interface {
	// Get support fiat currency list
	GetFiatCurrencyList(context.Context, *GetFiatCurrencyListRequest) (*GetFiatCurrencyListResponse, error)
	// Request to download miningReport in csv format filtered by date
	MiningReportCSV(context.Context, *MiningReportRequest) (*MiningReportResponse, error)
	// Request to download miningReport in pdf filtered by date
	MiningReportPDF(context.Context, *MiningReportRequest) (*MiningReportResponse, error)
}

// UnimplementedDownloadServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDownloadServiceServer struct {
}

func (*UnimplementedDownloadServiceServer) GetFiatCurrencyList(context.Context, *GetFiatCurrencyListRequest) (*GetFiatCurrencyListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFiatCurrencyList not implemented")
}
func (*UnimplementedDownloadServiceServer) MiningReportCSV(context.Context, *MiningReportRequest) (*MiningReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiningReportCSV not implemented")
}
func (*UnimplementedDownloadServiceServer) MiningReportPDF(context.Context, *MiningReportRequest) (*MiningReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MiningReportPDF not implemented")
}

func RegisterDownloadServiceServer(s *grpc.Server, srv DownloadServiceServer) {
	s.RegisterService(&_DownloadService_serviceDesc, srv)
}

func _DownloadService_GetFiatCurrencyList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFiatCurrencyListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).GetFiatCurrencyList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appserver_serves_ui.DownloadService/GetFiatCurrencyList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).GetFiatCurrencyList(ctx, req.(*GetFiatCurrencyListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_MiningReportCSV_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiningReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).MiningReportCSV(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appserver_serves_ui.DownloadService/MiningReportCSV",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).MiningReportCSV(ctx, req.(*MiningReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DownloadService_MiningReportPDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MiningReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).MiningReportPDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appserver_serves_ui.DownloadService/MiningReportPDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).MiningReportPDF(ctx, req.(*MiningReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DownloadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appserver_serves_ui.DownloadService",
	HandlerType: (*DownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFiatCurrencyList",
			Handler:    _DownloadService_GetFiatCurrencyList_Handler,
		},
		{
			MethodName: "MiningReportCSV",
			Handler:    _DownloadService_MiningReportCSV_Handler,
		},
		{
			MethodName: "MiningReportPDF",
			Handler:    _DownloadService_MiningReportPDF_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "download.proto",
}
