// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: dhx.proto

package appserver_serves_ui

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DHXGetLastMiningRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// organization id. If specified return details for the given organization and the council it chairs
	OrgId int64 `protobuf:"varint,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (x *DHXGetLastMiningRequest) Reset() {
	*x = DHXGetLastMiningRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXGetLastMiningRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXGetLastMiningRequest) ProtoMessage() {}

func (x *DHXGetLastMiningRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXGetLastMiningRequest.ProtoReflect.Descriptor instead.
func (*DHXGetLastMiningRequest) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{0}
}

func (x *DHXGetLastMiningRequest) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

type DHXGetLastMiningResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the last date for which mining has been paid
	Date *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	// the calculated mining power of the supernode for this day
	MiningPower string `protobuf:"bytes,2,opt,name=mining_power,json=miningPower,proto3" json:"mining_power,omitempty"`
	// the amount of DHX that supernode has received
	DhxAmount string `protobuf:"bytes,3,opt,name=dhx_amount,json=dhxAmount,proto3" json:"dhx_amount,omitempty"`
	// organization id, mining power and revenue (if requested)
	OrgId          int64  `protobuf:"varint,4,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	OrgMiningPower string `protobuf:"bytes,5,opt,name=org_mining_power,json=orgMiningPower,proto3" json:"org_mining_power,omitempty"`
	OrgDhxAmount   string `protobuf:"bytes,6,opt,name=org_dhx_amount,json=orgDhxAmount,proto3" json:"org_dhx_amount,omitempty"`
	// council id, name, mining power and revenue (if the org chairs one)
	CouncilId          int64  `protobuf:"varint,7,opt,name=council_id,json=councilId,proto3" json:"council_id,omitempty"`
	CouncilName        string `protobuf:"bytes,8,opt,name=council_name,json=councilName,proto3" json:"council_name,omitempty"`
	CouncilMiningPower string `protobuf:"bytes,9,opt,name=council_mining_power,json=councilMiningPower,proto3" json:"council_mining_power,omitempty"`
	CouncilDhxAmount   string `protobuf:"bytes,10,opt,name=council_dhx_amount,json=councilDhxAmount,proto3" json:"council_dhx_amount,omitempty"`
}

func (x *DHXGetLastMiningResponse) Reset() {
	*x = DHXGetLastMiningResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXGetLastMiningResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXGetLastMiningResponse) ProtoMessage() {}

func (x *DHXGetLastMiningResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXGetLastMiningResponse.ProtoReflect.Descriptor instead.
func (*DHXGetLastMiningResponse) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{1}
}

func (x *DHXGetLastMiningResponse) GetDate() *timestamp.Timestamp {
	if x != nil {
		return x.Date
	}
	return nil
}

func (x *DHXGetLastMiningResponse) GetMiningPower() string {
	if x != nil {
		return x.MiningPower
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetDhxAmount() string {
	if x != nil {
		return x.DhxAmount
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetOrgId() int64 {
	if x != nil {
		return x.OrgId
	}
	return 0
}

func (x *DHXGetLastMiningResponse) GetOrgMiningPower() string {
	if x != nil {
		return x.OrgMiningPower
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetOrgDhxAmount() string {
	if x != nil {
		return x.OrgDhxAmount
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetCouncilId() int64 {
	if x != nil {
		return x.CouncilId
	}
	return 0
}

func (x *DHXGetLastMiningResponse) GetCouncilName() string {
	if x != nil {
		return x.CouncilName
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetCouncilMiningPower() string {
	if x != nil {
		return x.CouncilMiningPower
	}
	return ""
}

func (x *DHXGetLastMiningResponse) GetCouncilDhxAmount() string {
	if x != nil {
		return x.CouncilDhxAmount
	}
	return ""
}

type DHXCreateStakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// in which council to create the lockdrop
	CouncilId int64  `protobuf:"varint,1,opt,name=council_id,json=councilId,proto3" json:"council_id,omitempty"`
	Amount    string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency  string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	// for how many months the stake should be locked
	LockMonths int64 `protobuf:"varint,4,opt,name=lock_months,json=lockMonths,proto3" json:"lock_months,omitempty"`
	// the boost that user expects
	Boost          string `protobuf:"bytes,5,opt,name=boost,proto3" json:"boost,omitempty"`
	OrganizationId int64  `protobuf:"varint,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *DHXCreateStakeRequest) Reset() {
	*x = DHXCreateStakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXCreateStakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXCreateStakeRequest) ProtoMessage() {}

func (x *DHXCreateStakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXCreateStakeRequest.ProtoReflect.Descriptor instead.
func (*DHXCreateStakeRequest) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{2}
}

func (x *DHXCreateStakeRequest) GetCouncilId() int64 {
	if x != nil {
		return x.CouncilId
	}
	return 0
}

func (x *DHXCreateStakeRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DHXCreateStakeRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DHXCreateStakeRequest) GetLockMonths() int64 {
	if x != nil {
		return x.LockMonths
	}
	return 0
}

func (x *DHXCreateStakeRequest) GetBoost() string {
	if x != nil {
		return x.Boost
	}
	return ""
}

func (x *DHXCreateStakeRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

type DHXCreateStakeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created stake
	StakeId int64 `protobuf:"varint,1,opt,name=stake_id,json=stakeId,proto3" json:"stake_id,omitempty"`
}

func (x *DHXCreateStakeResponse) Reset() {
	*x = DHXCreateStakeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXCreateStakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXCreateStakeResponse) ProtoMessage() {}

func (x *DHXCreateStakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXCreateStakeResponse.ProtoReflect.Descriptor instead.
func (*DHXCreateStakeResponse) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{3}
}

func (x *DHXCreateStakeResponse) GetStakeId() int64 {
	if x != nil {
		return x.StakeId
	}
	return 0
}

type DHXCreateCouncilRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// organization that will chair the council
	OrganizationId int64 `protobuf:"varint,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// amount that shall be staked then the council is created
	Amount   string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency string `protobuf:"bytes,3,opt,name=currency,proto3" json:"currency,omitempty"`
	// for how many months the stake should be locked
	LockMonths int64 `protobuf:"varint,4,opt,name=lock_months,json=lockMonths,proto3" json:"lock_months,omitempty"`
	// the boost that user expects
	Boost string `protobuf:"bytes,5,opt,name=boost,proto3" json:"boost,omitempty"`
	// the name of the council
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DHXCreateCouncilRequest) Reset() {
	*x = DHXCreateCouncilRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXCreateCouncilRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXCreateCouncilRequest) ProtoMessage() {}

func (x *DHXCreateCouncilRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXCreateCouncilRequest.ProtoReflect.Descriptor instead.
func (*DHXCreateCouncilRequest) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{4}
}

func (x *DHXCreateCouncilRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *DHXCreateCouncilRequest) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DHXCreateCouncilRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DHXCreateCouncilRequest) GetLockMonths() int64 {
	if x != nil {
		return x.LockMonths
	}
	return 0
}

func (x *DHXCreateCouncilRequest) GetBoost() string {
	if x != nil {
		return x.Boost
	}
	return ""
}

func (x *DHXCreateCouncilRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DHXCreateCouncilResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the council create request in the table
	CouncilId int64 `protobuf:"varint,1,opt,name=council_id,json=councilId,proto3" json:"council_id,omitempty"`
	// id of the stake that was created while creating the council
	StakeId int64 `protobuf:"varint,2,opt,name=stake_id,json=stakeId,proto3" json:"stake_id,omitempty"`
}

func (x *DHXCreateCouncilResponse) Reset() {
	*x = DHXCreateCouncilResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXCreateCouncilResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXCreateCouncilResponse) ProtoMessage() {}

func (x *DHXCreateCouncilResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXCreateCouncilResponse.ProtoReflect.Descriptor instead.
func (*DHXCreateCouncilResponse) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{5}
}

func (x *DHXCreateCouncilResponse) GetCouncilId() int64 {
	if x != nil {
		return x.CouncilId
	}
	return 0
}

func (x *DHXCreateCouncilResponse) GetStakeId() int64 {
	if x != nil {
		return x.StakeId
	}
	return 0
}

type DHXListCouncilsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DHXListCouncilsRequest) Reset() {
	*x = DHXListCouncilsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXListCouncilsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXListCouncilsRequest) ProtoMessage() {}

func (x *DHXListCouncilsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXListCouncilsRequest.ProtoReflect.Descriptor instead.
func (*DHXListCouncilsRequest) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{6}
}

// Information about the council
type Council struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// numerical council ID
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the organization that chaires the council
	ChairOrgId int64 `protobuf:"varint,2,opt,name=chair_org_id,json=chairOrgId,proto3" json:"chair_org_id,omitempty"`
	// name of the council unique on this supernode
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// the date when council was last paid revenues
	LastPaidDate *timestamp.Timestamp `protobuf:"bytes,4,opt,name=last_paid_date,json=lastPaidDate,proto3" json:"last_paid_date,omitempty"`
	// councils mpower when it was paid last time
	LastMpower string `protobuf:"bytes,5,opt,name=last_mpower,json=lastMpower,proto3" json:"last_mpower,omitempty"`
	// councils DHX revenue when it was paid last time
	LastDhxRevenue string `protobuf:"bytes,6,opt,name=last_dhx_revenue,json=lastDhxRevenue,proto3" json:"last_dhx_revenue,omitempty"`
}

func (x *Council) Reset() {
	*x = Council{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Council) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Council) ProtoMessage() {}

func (x *Council) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Council.ProtoReflect.Descriptor instead.
func (*Council) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{7}
}

func (x *Council) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Council) GetChairOrgId() int64 {
	if x != nil {
		return x.ChairOrgId
	}
	return 0
}

func (x *Council) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Council) GetLastPaidDate() *timestamp.Timestamp {
	if x != nil {
		return x.LastPaidDate
	}
	return nil
}

func (x *Council) GetLastMpower() string {
	if x != nil {
		return x.LastMpower
	}
	return ""
}

func (x *Council) GetLastDhxRevenue() string {
	if x != nil {
		return x.LastDhxRevenue
	}
	return ""
}

type DHXListCouncilsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Council []*Council `protobuf:"bytes,1,rep,name=council,proto3" json:"council,omitempty"`
}

func (x *DHXListCouncilsResponse) Reset() {
	*x = DHXListCouncilsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXListCouncilsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXListCouncilsResponse) ProtoMessage() {}

func (x *DHXListCouncilsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXListCouncilsResponse.ProtoReflect.Descriptor instead.
func (*DHXListCouncilsResponse) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{8}
}

func (x *DHXListCouncilsResponse) GetCouncil() []*Council {
	if x != nil {
		return x.Council
	}
	return nil
}

// chair_org_id or organization_id must be set. Only supernode admin should be able to
// request with both set to 0
type DHXListStakesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// if not 0 then return stakes for the council chaired by the specified
	// org. Only the council chair should be able to request this
	ChairOrgId int64 `protobuf:"varint,1,opt,name=chair_org_id,json=chairOrgId,proto3" json:"chair_org_id,omitempty"`
	// if not 0 then return stakes of the given organization. Only the org user
	// should be able to request this
	OrganizationId int64 `protobuf:"varint,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *DHXListStakesRequest) Reset() {
	*x = DHXListStakesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXListStakesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXListStakesRequest) ProtoMessage() {}

func (x *DHXListStakesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXListStakesRequest.ProtoReflect.Descriptor instead.
func (*DHXListStakesRequest) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{9}
}

func (x *DHXListStakesRequest) GetChairOrgId() int64 {
	if x != nil {
		return x.ChairOrgId
	}
	return 0
}

func (x *DHXListStakesRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

type DHXStake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	OrganizationId int64                `protobuf:"varint,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Amount         string               `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency       string               `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	CouncilId      int64                `protobuf:"varint,5,opt,name=council_id,json=councilId,proto3" json:"council_id,omitempty"`
	CouncilName    string               `protobuf:"bytes,6,opt,name=council_name,json=councilName,proto3" json:"council_name,omitempty"`
	Created        *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created,proto3" json:"created,omitempty"`
	LockTill       *timestamp.Timestamp `protobuf:"bytes,8,opt,name=lock_till,json=lockTill,proto3" json:"lock_till,omitempty"`
	Boost          string               `protobuf:"bytes,9,opt,name=boost,proto3" json:"boost,omitempty"`
	Closed         bool                 `protobuf:"varint,10,opt,name=closed,proto3" json:"closed,omitempty"`
	DhxMined       string               `protobuf:"bytes,11,opt,name=dhx_mined,json=dhxMined,proto3" json:"dhx_mined,omitempty"`
}

func (x *DHXStake) Reset() {
	*x = DHXStake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXStake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXStake) ProtoMessage() {}

func (x *DHXStake) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXStake.ProtoReflect.Descriptor instead.
func (*DHXStake) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{10}
}

func (x *DHXStake) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DHXStake) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *DHXStake) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *DHXStake) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *DHXStake) GetCouncilId() int64 {
	if x != nil {
		return x.CouncilId
	}
	return 0
}

func (x *DHXStake) GetCouncilName() string {
	if x != nil {
		return x.CouncilName
	}
	return ""
}

func (x *DHXStake) GetCreated() *timestamp.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *DHXStake) GetLockTill() *timestamp.Timestamp {
	if x != nil {
		return x.LockTill
	}
	return nil
}

func (x *DHXStake) GetBoost() string {
	if x != nil {
		return x.Boost
	}
	return ""
}

func (x *DHXStake) GetClosed() bool {
	if x != nil {
		return x.Closed
	}
	return false
}

func (x *DHXStake) GetDhxMined() string {
	if x != nil {
		return x.DhxMined
	}
	return ""
}

type DHXListStakesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stake []*DHXStake `protobuf:"bytes,1,rep,name=stake,proto3" json:"stake,omitempty"`
}

func (x *DHXListStakesResponse) Reset() {
	*x = DHXListStakesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dhx_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DHXListStakesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DHXListStakesResponse) ProtoMessage() {}

func (x *DHXListStakesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dhx_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DHXListStakesResponse.ProtoReflect.Descriptor instead.
func (*DHXListStakesResponse) Descriptor() ([]byte, []int) {
	return file_dhx_proto_rawDescGZIP(), []int{11}
}

func (x *DHXListStakesResponse) GetStake() []*DHXStake {
	if x != nil {
		return x.Stake
	}
	return nil
}

var File_dhx_proto protoreflect.FileDescriptor

var file_dhx_proto_rawDesc = []byte{
	0x0a, 0x09, 0x64, 0x68, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x30, 0x0a, 0x17, 0x44, 0x48, 0x58, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49,
	0x64, 0x22, 0x95, 0x03, 0x0a, 0x18, 0x44, 0x48, 0x58, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x68, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x68, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x5f, 0x6d,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x5f, 0x64, 0x68, 0x78, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x44, 0x68,
	0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x63,
	0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x63, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x63, 0x69, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x75,
	0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
	0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x64, 0x68, 0x78, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
	0x44, 0x68, 0x78, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x15, 0x44, 0x48,
	0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63,
	0x6b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x16, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x49, 0x64, 0x22, 0xc1, 0x01, 0x0a, 0x17,
	0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x6b, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x54, 0x0a, 0x18, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x63, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74,
	0x61, 0x6b, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a, 0x16, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xdc, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63,
	0x68, 0x61, 0x69, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x69, 0x64, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6d, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x64, 0x68, 0x78,
	0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x44, 0x68, 0x78, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x22, 0x51,
	0x0a, 0x17, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x63, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69,
	0x6c, 0x22, 0x61, 0x0a, 0x14, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x69, 0x72, 0x5f, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x68, 0x61, 0x69, 0x72, 0x4f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0xf3, 0x02, 0x0a, 0x08, 0x44, 0x48, 0x58, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74,
	0x69, 0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6c, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x6f, 0x6f, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x68, 0x78, 0x5f, 0x6d, 0x69, 0x6e, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x68, 0x78, 0x4d, 0x69, 0x6e, 0x65, 0x64, 0x22, 0x4c, 0x0a, 0x15, 0x44, 0x48,
	0x58, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x44, 0x48, 0x58, 0x53, 0x74, 0x61, 0x6b,
	0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x32, 0xf9, 0x05, 0x0a, 0x0a, 0x44, 0x48, 0x58,
	0x53, 0x65, 0x72, 0x76, 0x63, 0x69, 0x65, 0x12, 0x92, 0x01, 0x0a, 0x0e, 0x44, 0x48, 0x58, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69,
	0x2e, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x44, 0x48, 0x58,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x68, 0x78, 0x2d, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x2d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x9a, 0x01, 0x0a,
	0x10, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69,
	0x6c, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x44, 0x48, 0x58, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x29,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x68, 0x78,
	0x2d, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2d, 0x63,
	0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x93, 0x01, 0x0a, 0x0f, 0x44, 0x48,
	0x58, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x73, 0x12, 0x2b, 0x2e,
	0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73,
	0x5f, 0x75, 0x69, 0x2e, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x63,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x70,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69,
	0x2e, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f,
	0x12, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x68, 0x78, 0x2d, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x63, 0x6f, 0x75, 0x6e, 0x63, 0x69, 0x6c, 0x73, 0x12,
	0x8b, 0x01, 0x0a, 0x0d, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x73, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x74, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61,
	0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f,
	0x75, 0x69, 0x2e, 0x44, 0x48, 0x58, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x68, 0x78, 0x2d, 0x6d, 0x69, 0x6e, 0x69, 0x6e,
	0x67, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2d, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x73, 0x12, 0x94, 0x01,
	0x0a, 0x10, 0x44, 0x48, 0x58, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x2c, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x44, 0x48, 0x58, 0x47, 0x65, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x2e, 0x44, 0x48, 0x58, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x68,
	0x78, 0x2d, 0x6d, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x2f, 0x6c, 0x61, 0x73, 0x74, 0x2d, 0x6d, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x42, 0x58, 0x5a, 0x56, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6d, 0x78, 0x63, 0x2d, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6c, 0x70, 0x77, 0x61, 0x6e, 0x2d, 0x61, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x70, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x2d, 0x75, 0x69, 0x3b, 0x61, 0x70, 0x70, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x73, 0x5f, 0x75, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dhx_proto_rawDescOnce sync.Once
	file_dhx_proto_rawDescData = file_dhx_proto_rawDesc
)

func file_dhx_proto_rawDescGZIP() []byte {
	file_dhx_proto_rawDescOnce.Do(func() {
		file_dhx_proto_rawDescData = protoimpl.X.CompressGZIP(file_dhx_proto_rawDescData)
	})
	return file_dhx_proto_rawDescData
}

var file_dhx_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_dhx_proto_goTypes = []interface{}{
	(*DHXGetLastMiningRequest)(nil),  // 0: appserver_serves_ui.DHXGetLastMiningRequest
	(*DHXGetLastMiningResponse)(nil), // 1: appserver_serves_ui.DHXGetLastMiningResponse
	(*DHXCreateStakeRequest)(nil),    // 2: appserver_serves_ui.DHXCreateStakeRequest
	(*DHXCreateStakeResponse)(nil),   // 3: appserver_serves_ui.DHXCreateStakeResponse
	(*DHXCreateCouncilRequest)(nil),  // 4: appserver_serves_ui.DHXCreateCouncilRequest
	(*DHXCreateCouncilResponse)(nil), // 5: appserver_serves_ui.DHXCreateCouncilResponse
	(*DHXListCouncilsRequest)(nil),   // 6: appserver_serves_ui.DHXListCouncilsRequest
	(*Council)(nil),                  // 7: appserver_serves_ui.Council
	(*DHXListCouncilsResponse)(nil),  // 8: appserver_serves_ui.DHXListCouncilsResponse
	(*DHXListStakesRequest)(nil),     // 9: appserver_serves_ui.DHXListStakesRequest
	(*DHXStake)(nil),                 // 10: appserver_serves_ui.DHXStake
	(*DHXListStakesResponse)(nil),    // 11: appserver_serves_ui.DHXListStakesResponse
	(*timestamp.Timestamp)(nil),      // 12: google.protobuf.Timestamp
}
var file_dhx_proto_depIdxs = []int32{
	12, // 0: appserver_serves_ui.DHXGetLastMiningResponse.date:type_name -> google.protobuf.Timestamp
	12, // 1: appserver_serves_ui.Council.last_paid_date:type_name -> google.protobuf.Timestamp
	7,  // 2: appserver_serves_ui.DHXListCouncilsResponse.council:type_name -> appserver_serves_ui.Council
	12, // 3: appserver_serves_ui.DHXStake.created:type_name -> google.protobuf.Timestamp
	12, // 4: appserver_serves_ui.DHXStake.lock_till:type_name -> google.protobuf.Timestamp
	10, // 5: appserver_serves_ui.DHXListStakesResponse.stake:type_name -> appserver_serves_ui.DHXStake
	2,  // 6: appserver_serves_ui.DHXServcie.DHXCreateStake:input_type -> appserver_serves_ui.DHXCreateStakeRequest
	4,  // 7: appserver_serves_ui.DHXServcie.DHXCreateCouncil:input_type -> appserver_serves_ui.DHXCreateCouncilRequest
	6,  // 8: appserver_serves_ui.DHXServcie.DHXListCouncils:input_type -> appserver_serves_ui.DHXListCouncilsRequest
	9,  // 9: appserver_serves_ui.DHXServcie.DHXListStakes:input_type -> appserver_serves_ui.DHXListStakesRequest
	0,  // 10: appserver_serves_ui.DHXServcie.DHXGetLastMining:input_type -> appserver_serves_ui.DHXGetLastMiningRequest
	3,  // 11: appserver_serves_ui.DHXServcie.DHXCreateStake:output_type -> appserver_serves_ui.DHXCreateStakeResponse
	5,  // 12: appserver_serves_ui.DHXServcie.DHXCreateCouncil:output_type -> appserver_serves_ui.DHXCreateCouncilResponse
	8,  // 13: appserver_serves_ui.DHXServcie.DHXListCouncils:output_type -> appserver_serves_ui.DHXListCouncilsResponse
	11, // 14: appserver_serves_ui.DHXServcie.DHXListStakes:output_type -> appserver_serves_ui.DHXListStakesResponse
	1,  // 15: appserver_serves_ui.DHXServcie.DHXGetLastMining:output_type -> appserver_serves_ui.DHXGetLastMiningResponse
	11, // [11:16] is the sub-list for method output_type
	6,  // [6:11] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_dhx_proto_init() }
func file_dhx_proto_init() {
	if File_dhx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dhx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXGetLastMiningRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXGetLastMiningResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXCreateStakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXCreateStakeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXCreateCouncilRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXCreateCouncilResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXListCouncilsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhx_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Council); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhx_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXListCouncilsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhx_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXListStakesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhx_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXStake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dhx_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DHXListStakesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dhx_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dhx_proto_goTypes,
		DependencyIndexes: file_dhx_proto_depIdxs,
		MessageInfos:      file_dhx_proto_msgTypes,
	}.Build()
	File_dhx_proto = out.File
	file_dhx_proto_rawDesc = nil
	file_dhx_proto_goTypes = nil
	file_dhx_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DHXServcieClient is the client API for DHXServcie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DHXServcieClient interface {
	// Request to lockdrop for DHX pre-mining
	DHXCreateStake(ctx context.Context, in *DHXCreateStakeRequest, opts ...grpc.CallOption) (*DHXCreateStakeResponse, error)
	// Request to create a new council
	DHXCreateCouncil(ctx context.Context, in *DHXCreateCouncilRequest, opts ...grpc.CallOption) (*DHXCreateCouncilResponse, error)
	// List all existing councils
	DHXListCouncils(ctx context.Context, in *DHXListCouncilsRequest, opts ...grpc.CallOption) (*DHXListCouncilsResponse, error)
	// List all dhx stakes for the organization
	DHXListStakes(ctx context.Context, in *DHXListStakesRequest, opts ...grpc.CallOption) (*DHXListStakesResponse, error)
	// Return info about the last paid day of DHX mining
	DHXGetLastMining(ctx context.Context, in *DHXGetLastMiningRequest, opts ...grpc.CallOption) (*DHXGetLastMiningResponse, error)
}

type dHXServcieClient struct {
	cc grpc.ClientConnInterface
}

func NewDHXServcieClient(cc grpc.ClientConnInterface) DHXServcieClient {
	return &dHXServcieClient{cc}
}

func (c *dHXServcieClient) DHXCreateStake(ctx context.Context, in *DHXCreateStakeRequest, opts ...grpc.CallOption) (*DHXCreateStakeResponse, error) {
	out := new(DHXCreateStakeResponse)
	err := c.cc.Invoke(ctx, "/appserver_serves_ui.DHXServcie/DHXCreateStake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServcieClient) DHXCreateCouncil(ctx context.Context, in *DHXCreateCouncilRequest, opts ...grpc.CallOption) (*DHXCreateCouncilResponse, error) {
	out := new(DHXCreateCouncilResponse)
	err := c.cc.Invoke(ctx, "/appserver_serves_ui.DHXServcie/DHXCreateCouncil", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServcieClient) DHXListCouncils(ctx context.Context, in *DHXListCouncilsRequest, opts ...grpc.CallOption) (*DHXListCouncilsResponse, error) {
	out := new(DHXListCouncilsResponse)
	err := c.cc.Invoke(ctx, "/appserver_serves_ui.DHXServcie/DHXListCouncils", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServcieClient) DHXListStakes(ctx context.Context, in *DHXListStakesRequest, opts ...grpc.CallOption) (*DHXListStakesResponse, error) {
	out := new(DHXListStakesResponse)
	err := c.cc.Invoke(ctx, "/appserver_serves_ui.DHXServcie/DHXListStakes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHXServcieClient) DHXGetLastMining(ctx context.Context, in *DHXGetLastMiningRequest, opts ...grpc.CallOption) (*DHXGetLastMiningResponse, error) {
	out := new(DHXGetLastMiningResponse)
	err := c.cc.Invoke(ctx, "/appserver_serves_ui.DHXServcie/DHXGetLastMining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHXServcieServer is the server API for DHXServcie service.
type DHXServcieServer interface {
	// Request to lockdrop for DHX pre-mining
	DHXCreateStake(context.Context, *DHXCreateStakeRequest) (*DHXCreateStakeResponse, error)
	// Request to create a new council
	DHXCreateCouncil(context.Context, *DHXCreateCouncilRequest) (*DHXCreateCouncilResponse, error)
	// List all existing councils
	DHXListCouncils(context.Context, *DHXListCouncilsRequest) (*DHXListCouncilsResponse, error)
	// List all dhx stakes for the organization
	DHXListStakes(context.Context, *DHXListStakesRequest) (*DHXListStakesResponse, error)
	// Return info about the last paid day of DHX mining
	DHXGetLastMining(context.Context, *DHXGetLastMiningRequest) (*DHXGetLastMiningResponse, error)
}

// UnimplementedDHXServcieServer can be embedded to have forward compatible implementations.
type UnimplementedDHXServcieServer struct {
}

func (*UnimplementedDHXServcieServer) DHXCreateStake(context.Context, *DHXCreateStakeRequest) (*DHXCreateStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXCreateStake not implemented")
}
func (*UnimplementedDHXServcieServer) DHXCreateCouncil(context.Context, *DHXCreateCouncilRequest) (*DHXCreateCouncilResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXCreateCouncil not implemented")
}
func (*UnimplementedDHXServcieServer) DHXListCouncils(context.Context, *DHXListCouncilsRequest) (*DHXListCouncilsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXListCouncils not implemented")
}
func (*UnimplementedDHXServcieServer) DHXListStakes(context.Context, *DHXListStakesRequest) (*DHXListStakesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXListStakes not implemented")
}
func (*UnimplementedDHXServcieServer) DHXGetLastMining(context.Context, *DHXGetLastMiningRequest) (*DHXGetLastMiningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DHXGetLastMining not implemented")
}

func RegisterDHXServcieServer(s *grpc.Server, srv DHXServcieServer) {
	s.RegisterService(&_DHXServcie_serviceDesc, srv)
}

func _DHXServcie_DHXCreateStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXCreateStakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServcieServer).DHXCreateStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appserver_serves_ui.DHXServcie/DHXCreateStake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServcieServer).DHXCreateStake(ctx, req.(*DHXCreateStakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXServcie_DHXCreateCouncil_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXCreateCouncilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServcieServer).DHXCreateCouncil(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appserver_serves_ui.DHXServcie/DHXCreateCouncil",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServcieServer).DHXCreateCouncil(ctx, req.(*DHXCreateCouncilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXServcie_DHXListCouncils_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXListCouncilsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServcieServer).DHXListCouncils(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appserver_serves_ui.DHXServcie/DHXListCouncils",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServcieServer).DHXListCouncils(ctx, req.(*DHXListCouncilsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXServcie_DHXListStakes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXListStakesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServcieServer).DHXListStakes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appserver_serves_ui.DHXServcie/DHXListStakes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServcieServer).DHXListStakes(ctx, req.(*DHXListStakesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHXServcie_DHXGetLastMining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DHXGetLastMiningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHXServcieServer).DHXGetLastMining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/appserver_serves_ui.DHXServcie/DHXGetLastMining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHXServcieServer).DHXGetLastMining(ctx, req.(*DHXGetLastMiningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DHXServcie_serviceDesc = grpc.ServiceDesc{
	ServiceName: "appserver_serves_ui.DHXServcie",
	HandlerType: (*DHXServcieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DHXCreateStake",
			Handler:    _DHXServcie_DHXCreateStake_Handler,
		},
		{
			MethodName: "DHXCreateCouncil",
			Handler:    _DHXServcie_DHXCreateCouncil_Handler,
		},
		{
			MethodName: "DHXListCouncils",
			Handler:    _DHXServcie_DHXListCouncils_Handler,
		},
		{
			MethodName: "DHXListStakes",
			Handler:    _DHXServcie_DHXListStakes_Handler,
		},
		{
			MethodName: "DHXGetLastMining",
			Handler:    _DHXServcie_DHXGetLastMining_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dhx.proto",
}
