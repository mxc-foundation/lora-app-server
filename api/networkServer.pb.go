// Code generated by protoc-gen-go. DO NOT EDIT.
// source: networkServer.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type NetworkServer struct {
	// Network-server ID.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Network-server name.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Network-server server.
	// Format: hostname:ip (e.g. localhost:8000).
	Server string `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
	// CA certificate (optional).
	CaCert string `protobuf:"bytes,4,opt,name=ca_cert,json=caCert" json:"ca_cert,omitempty"`
	// TLS (client) certificate for connecting to the network-server (optional).
	TlsCert string `protobuf:"bytes,5,opt,name=tls_cert,json=tlsCert" json:"tls_cert,omitempty"`
	// TLS (client) key for connecting to the network-server (optional).
	TlsKey string `protobuf:"bytes,6,opt,name=tls_key,json=tlsKey" json:"tls_key,omitempty"`
	// Routing-profile ca certificate (used by the network-server to connect
	// back to the application-server) (optional).
	RoutingProfileCaCert string `protobuf:"bytes,7,opt,name=routing_profile_ca_cert,json=routingProfileCACert" json:"routing_profile_ca_cert,omitempty"`
	// Routing-profile TLS certificate (used by the network-server to connect
	// back to the application-server) (optional).
	RoutingProfileTlsCert string `protobuf:"bytes,8,opt,name=routing_profile_tls_cert,json=routingProfileTLSCert" json:"routing_profile_tls_cert,omitempty"`
	// Routing-profile TLS key (used by the network-server to connect
	// back to the application-server) (optional).
	RoutingProfileTlsKey string `protobuf:"bytes,9,opt,name=routing_profile_tls_key,json=routingProfileTLSKey" json:"routing_profile_tls_key,omitempty"`
	// Enable gateway discovery for this network-server.
	GatewayDiscoveryEnabled bool `protobuf:"varint,10,opt,name=gateway_discovery_enabled,json=gatewayDiscoveryEnabled" json:"gateway_discovery_enabled,omitempty"`
	// The number of times per day the gateway discovery 'ping' must be
	// broadcasted per gateway.
	GatewayDiscoveryInterval uint32 `protobuf:"varint,11,opt,name=gateway_discovery_interval,json=gatewayDiscoveryInterval" json:"gateway_discovery_interval,omitempty"`
	// The frequency (Hz) of the gateway discovery 'ping'.
	GatewayDiscoveryTxFrequency uint32 `protobuf:"varint,12,opt,name=gateway_discovery_tx_frequency,json=gatewayDiscoveryTXFrequency" json:"gateway_discovery_tx_frequency,omitempty"`
	// The data-rate of the gateway discovery 'ping'.
	GatewayDiscoveryDr uint32 `protobuf:"varint,13,opt,name=gateway_discovery_dr,json=gatewayDiscoveryDR" json:"gateway_discovery_dr,omitempty"`
}

func (m *NetworkServer) Reset()                    { *m = NetworkServer{} }
func (m *NetworkServer) String() string            { return proto.CompactTextString(m) }
func (*NetworkServer) ProtoMessage()               {}
func (*NetworkServer) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *NetworkServer) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NetworkServer) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkServer) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *NetworkServer) GetCaCert() string {
	if m != nil {
		return m.CaCert
	}
	return ""
}

func (m *NetworkServer) GetTlsCert() string {
	if m != nil {
		return m.TlsCert
	}
	return ""
}

func (m *NetworkServer) GetTlsKey() string {
	if m != nil {
		return m.TlsKey
	}
	return ""
}

func (m *NetworkServer) GetRoutingProfileCaCert() string {
	if m != nil {
		return m.RoutingProfileCaCert
	}
	return ""
}

func (m *NetworkServer) GetRoutingProfileTlsCert() string {
	if m != nil {
		return m.RoutingProfileTlsCert
	}
	return ""
}

func (m *NetworkServer) GetRoutingProfileTlsKey() string {
	if m != nil {
		return m.RoutingProfileTlsKey
	}
	return ""
}

func (m *NetworkServer) GetGatewayDiscoveryEnabled() bool {
	if m != nil {
		return m.GatewayDiscoveryEnabled
	}
	return false
}

func (m *NetworkServer) GetGatewayDiscoveryInterval() uint32 {
	if m != nil {
		return m.GatewayDiscoveryInterval
	}
	return 0
}

func (m *NetworkServer) GetGatewayDiscoveryTxFrequency() uint32 {
	if m != nil {
		return m.GatewayDiscoveryTxFrequency
	}
	return 0
}

func (m *NetworkServer) GetGatewayDiscoveryDr() uint32 {
	if m != nil {
		return m.GatewayDiscoveryDr
	}
	return 0
}

type NetworkServerListItem struct {
	// Network-server ID.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// Network-server name.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Network-server server.
	// Format: hostname:ip (e.g. localhost:8000).
	Server string `protobuf:"bytes,3,opt,name=server" json:"server,omitempty"`
	// Created at timestamp.
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *NetworkServerListItem) Reset()                    { *m = NetworkServerListItem{} }
func (m *NetworkServerListItem) String() string            { return proto.CompactTextString(m) }
func (*NetworkServerListItem) ProtoMessage()               {}
func (*NetworkServerListItem) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *NetworkServerListItem) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *NetworkServerListItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NetworkServerListItem) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *NetworkServerListItem) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *NetworkServerListItem) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type CreateNetworkServerRequest struct {
	// Network-server object to create.
	NetworkServer *NetworkServer `protobuf:"bytes,1,opt,name=network_server,json=networkServer" json:"network_server,omitempty"`
}

func (m *CreateNetworkServerRequest) Reset()                    { *m = CreateNetworkServerRequest{} }
func (m *CreateNetworkServerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateNetworkServerRequest) ProtoMessage()               {}
func (*CreateNetworkServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *CreateNetworkServerRequest) GetNetworkServer() *NetworkServer {
	if m != nil {
		return m.NetworkServer
	}
	return nil
}

type CreateNetworkServerResponse struct {
	// Network-server ID.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *CreateNetworkServerResponse) Reset()                    { *m = CreateNetworkServerResponse{} }
func (m *CreateNetworkServerResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateNetworkServerResponse) ProtoMessage()               {}
func (*CreateNetworkServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *CreateNetworkServerResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetNetworkServerRequest struct {
	// Network-server ID.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetNetworkServerRequest) Reset()                    { *m = GetNetworkServerRequest{} }
func (m *GetNetworkServerRequest) String() string            { return proto.CompactTextString(m) }
func (*GetNetworkServerRequest) ProtoMessage()               {}
func (*GetNetworkServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *GetNetworkServerRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetNetworkServerResponse struct {
	// Network-server object.
	NetworkServer *NetworkServer `protobuf:"bytes,1,opt,name=network_server,json=networkServer" json:"network_server,omitempty"`
	// Created at timestamp.
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	// The LPWAN Server version.
	Version string `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	// The LPWAN Server region configured.
	Region string `protobuf:"bytes,5,opt,name=region" json:"region,omitempty"`
}

func (m *GetNetworkServerResponse) Reset()                    { *m = GetNetworkServerResponse{} }
func (m *GetNetworkServerResponse) String() string            { return proto.CompactTextString(m) }
func (*GetNetworkServerResponse) ProtoMessage()               {}
func (*GetNetworkServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *GetNetworkServerResponse) GetNetworkServer() *NetworkServer {
	if m != nil {
		return m.NetworkServer
	}
	return nil
}

func (m *GetNetworkServerResponse) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *GetNetworkServerResponse) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *GetNetworkServerResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetNetworkServerResponse) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

type UpdateNetworkServerRequest struct {
	// Network-server object to update.
	NetworkServer *NetworkServer `protobuf:"bytes,1,opt,name=network_server,json=networkServer" json:"network_server,omitempty"`
}

func (m *UpdateNetworkServerRequest) Reset()                    { *m = UpdateNetworkServerRequest{} }
func (m *UpdateNetworkServerRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNetworkServerRequest) ProtoMessage()               {}
func (*UpdateNetworkServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *UpdateNetworkServerRequest) GetNetworkServer() *NetworkServer {
	if m != nil {
		return m.NetworkServer
	}
	return nil
}

type DeleteNetworkServerRequest struct {
	// Network-server ID.
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteNetworkServerRequest) Reset()                    { *m = DeleteNetworkServerRequest{} }
func (m *DeleteNetworkServerRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteNetworkServerRequest) ProtoMessage()               {}
func (*DeleteNetworkServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *DeleteNetworkServerRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ListNetworkServerRequest struct {
	// Max number of items to return.
	Limit int64 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// Organization id to filter on.
	OrganizationId int64 `protobuf:"varint,3,opt,name=organization_id,json=organizationID" json:"organization_id,omitempty"`
}

func (m *ListNetworkServerRequest) Reset()                    { *m = ListNetworkServerRequest{} }
func (m *ListNetworkServerRequest) String() string            { return proto.CompactTextString(m) }
func (*ListNetworkServerRequest) ProtoMessage()               {}
func (*ListNetworkServerRequest) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *ListNetworkServerRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListNetworkServerRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListNetworkServerRequest) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

type ListNetworkServerResponse struct {
	// Total number of network-servers.
	TotalCount int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	// Network-servers within the result-set.
	Result []*NetworkServerListItem `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListNetworkServerResponse) Reset()                    { *m = ListNetworkServerResponse{} }
func (m *ListNetworkServerResponse) String() string            { return proto.CompactTextString(m) }
func (*ListNetworkServerResponse) ProtoMessage()               {}
func (*ListNetworkServerResponse) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *ListNetworkServerResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListNetworkServerResponse) GetResult() []*NetworkServerListItem {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkServer)(nil), "api.NetworkServer")
	proto.RegisterType((*NetworkServerListItem)(nil), "api.NetworkServerListItem")
	proto.RegisterType((*CreateNetworkServerRequest)(nil), "api.CreateNetworkServerRequest")
	proto.RegisterType((*CreateNetworkServerResponse)(nil), "api.CreateNetworkServerResponse")
	proto.RegisterType((*GetNetworkServerRequest)(nil), "api.GetNetworkServerRequest")
	proto.RegisterType((*GetNetworkServerResponse)(nil), "api.GetNetworkServerResponse")
	proto.RegisterType((*UpdateNetworkServerRequest)(nil), "api.UpdateNetworkServerRequest")
	proto.RegisterType((*DeleteNetworkServerRequest)(nil), "api.DeleteNetworkServerRequest")
	proto.RegisterType((*ListNetworkServerRequest)(nil), "api.ListNetworkServerRequest")
	proto.RegisterType((*ListNetworkServerResponse)(nil), "api.ListNetworkServerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NetworkServerService service

type NetworkServerServiceClient interface {
	// Create creates the given network-server.
	Create(ctx context.Context, in *CreateNetworkServerRequest, opts ...grpc.CallOption) (*CreateNetworkServerResponse, error)
	// Get returns the network-server matching the given id.
	Get(ctx context.Context, in *GetNetworkServerRequest, opts ...grpc.CallOption) (*GetNetworkServerResponse, error)
	// Update updates the given network-server.
	Update(ctx context.Context, in *UpdateNetworkServerRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// Delete deletes the network-server matching the given id.
	Delete(ctx context.Context, in *DeleteNetworkServerRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// List lists the available network-servers.
	List(ctx context.Context, in *ListNetworkServerRequest, opts ...grpc.CallOption) (*ListNetworkServerResponse, error)
}

type networkServerServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServerServiceClient(cc *grpc.ClientConn) NetworkServerServiceClient {
	return &networkServerServiceClient{cc}
}

func (c *networkServerServiceClient) Create(ctx context.Context, in *CreateNetworkServerRequest, opts ...grpc.CallOption) (*CreateNetworkServerResponse, error) {
	out := new(CreateNetworkServerResponse)
	err := grpc.Invoke(ctx, "/api.NetworkServerService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) Get(ctx context.Context, in *GetNetworkServerRequest, opts ...grpc.CallOption) (*GetNetworkServerResponse, error) {
	out := new(GetNetworkServerResponse)
	err := grpc.Invoke(ctx, "/api.NetworkServerService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) Update(ctx context.Context, in *UpdateNetworkServerRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.NetworkServerService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) Delete(ctx context.Context, in *DeleteNetworkServerRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.NetworkServerService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) List(ctx context.Context, in *ListNetworkServerRequest, opts ...grpc.CallOption) (*ListNetworkServerResponse, error) {
	out := new(ListNetworkServerResponse)
	err := grpc.Invoke(ctx, "/api.NetworkServerService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NetworkServerService service

type NetworkServerServiceServer interface {
	// Create creates the given network-server.
	Create(context.Context, *CreateNetworkServerRequest) (*CreateNetworkServerResponse, error)
	// Get returns the network-server matching the given id.
	Get(context.Context, *GetNetworkServerRequest) (*GetNetworkServerResponse, error)
	// Update updates the given network-server.
	Update(context.Context, *UpdateNetworkServerRequest) (*google_protobuf2.Empty, error)
	// Delete deletes the network-server matching the given id.
	Delete(context.Context, *DeleteNetworkServerRequest) (*google_protobuf2.Empty, error)
	// List lists the available network-servers.
	List(context.Context, *ListNetworkServerRequest) (*ListNetworkServerResponse, error)
}

func RegisterNetworkServerServiceServer(s *grpc.Server, srv NetworkServerServiceServer) {
	s.RegisterService(&_NetworkServerService_serviceDesc, srv)
}

func _NetworkServerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNetworkServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NetworkServerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).Create(ctx, req.(*CreateNetworkServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNetworkServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NetworkServerService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).Get(ctx, req.(*GetNetworkServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNetworkServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NetworkServerService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).Update(ctx, req.(*UpdateNetworkServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNetworkServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NetworkServerService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).Delete(ctx, req.(*DeleteNetworkServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNetworkServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NetworkServerService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).List(ctx, req.(*ListNetworkServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.NetworkServerService",
	HandlerType: (*NetworkServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _NetworkServerService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _NetworkServerService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NetworkServerService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NetworkServerService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NetworkServerService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "networkServer.proto",
}

func init() { proto.RegisterFile("networkServer.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 809 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0x96, 0xe3, 0x34, 0x6d, 0x4f, 0x69, 0x11, 0x43, 0xb6, 0x71, 0xdc, 0xb2, 0x0d, 0xbe, 0x21,
	0xac, 0x68, 0x82, 0xba, 0x42, 0x88, 0x15, 0x37, 0x55, 0xba, 0xac, 0x2a, 0x2a, 0x84, 0xdc, 0x20,
	0xb8, 0xb3, 0xa6, 0xf6, 0x49, 0x34, 0x5a, 0xc7, 0xe3, 0x1d, 0x4f, 0xb2, 0x04, 0xb4, 0x37, 0xbc,
	0x02, 0xef, 0x81, 0x78, 0x0d, 0xae, 0x79, 0x05, 0x5e, 0x03, 0x09, 0xcd, 0x8f, 0x57, 0x1b, 0xc7,
	0x06, 0x51, 0xb8, 0xb1, 0x3c, 0x73, 0xbe, 0xef, 0x7c, 0x67, 0xce, 0xf9, 0xc6, 0x86, 0x77, 0x33,
	0x94, 0x2f, 0xb9, 0x78, 0x7e, 0x8b, 0x62, 0x85, 0x62, 0x94, 0x0b, 0x2e, 0x39, 0x71, 0x69, 0xce,
	0xfc, 0xd3, 0x39, 0xe7, 0xf3, 0x14, 0xc7, 0x34, 0x67, 0x63, 0x9a, 0x65, 0x5c, 0x52, 0xc9, 0x78,
	0x56, 0x18, 0x88, 0xdf, 0x97, 0x6c, 0x81, 0x85, 0xa4, 0x8b, 0x7c, 0xfc, 0xfa, 0xcd, 0x86, 0xde,
	0xc1, 0x45, 0x2e, 0xd7, 0x63, 0xfd, 0x34, 0x5b, 0xc1, 0xaf, 0x6d, 0x38, 0xfc, 0xea, 0x4d, 0x21,
	0x72, 0x04, 0x2d, 0x96, 0x78, 0xce, 0xc0, 0x19, 0xba, 0x61, 0x8b, 0x25, 0x84, 0x40, 0x3b, 0xa3,
	0x0b, 0xf4, 0x5a, 0x03, 0x67, 0xb8, 0x1f, 0xea, 0x77, 0x72, 0x0c, 0x9d, 0x42, 0xa3, 0x3d, 0x57,
	0xef, 0xda, 0x15, 0xe9, 0xc1, 0x6e, 0x4c, 0xa3, 0x18, 0x85, 0xf4, 0xda, 0x26, 0x10, 0xd3, 0x09,
	0x0a, 0x49, 0xfa, 0xb0, 0x27, 0xd3, 0xc2, 0x44, 0x76, 0x74, 0x64, 0x57, 0xa6, 0x85, 0x0e, 0xf5,
	0x40, 0xbd, 0x46, 0xcf, 0x71, 0xed, 0x75, 0x0c, 0x47, 0xa6, 0xc5, 0x97, 0xb8, 0x26, 0x9f, 0x40,
	0x4f, 0xf0, 0xa5, 0x64, 0xd9, 0x3c, 0xca, 0x05, 0x9f, 0xb1, 0x14, 0xa3, 0x32, 0xf9, 0xae, 0x06,
	0x76, 0x6d, 0xf8, 0x6b, 0x13, 0x9d, 0x5c, 0xea, 0x7c, 0x9f, 0x82, 0x57, 0xa5, 0xbd, 0x96, 0xde,
	0xd3, 0xbc, 0x07, 0x9b, 0xbc, 0xe9, 0xcd, 0xad, 0x26, 0xd6, 0xe8, 0x95, 0x85, 0xed, 0xd7, 0xe9,
	0x4d, 0x6f, 0x6e, 0x55, 0x99, 0x4f, 0xa0, 0x3f, 0xa7, 0x12, 0x5f, 0xd2, 0x75, 0x94, 0xb0, 0x22,
	0xe6, 0x2b, 0x14, 0xeb, 0x08, 0x33, 0x7a, 0x97, 0x62, 0xe2, 0xc1, 0xc0, 0x19, 0xee, 0x85, 0x3d,
	0x0b, 0xb8, 0x2a, 0xe3, 0x4f, 0x4d, 0x98, 0x7c, 0x0e, 0xfe, 0x36, 0x97, 0x65, 0x12, 0xc5, 0x8a,
	0xa6, 0xde, 0xc1, 0xc0, 0x19, 0x1e, 0x86, 0x5e, 0x95, 0x7c, 0x6d, 0xe3, 0x64, 0x02, 0x0f, 0xb7,
	0xd9, 0xf2, 0xfb, 0x68, 0x26, 0xf0, 0xc5, 0x12, 0xb3, 0x78, 0xed, 0xbd, 0xa5, 0x33, 0x9c, 0x54,
	0x33, 0x4c, 0xbf, 0xfb, 0xa2, 0x84, 0x90, 0x8f, 0xa1, 0xbb, 0x9d, 0x24, 0x11, 0xde, 0xa1, 0xa6,
	0x92, 0x2a, 0xf5, 0x2a, 0x0c, 0x7e, 0x73, 0xe0, 0xc1, 0x86, 0x65, 0x6e, 0x58, 0x21, 0xaf, 0x25,
	0x2e, 0xfe, 0x93, 0x75, 0x3e, 0x03, 0x88, 0x05, 0x52, 0x89, 0x49, 0x44, 0x8d, 0x7b, 0x0e, 0x2e,
	0xfc, 0x91, 0x71, 0xba, 0xf1, 0xea, 0xdd, 0x72, 0x36, 0x9a, 0x96, 0x8e, 0x0e, 0xf7, 0x2d, 0xfa,
	0x52, 0x2a, 0xea, 0x32, 0x4f, 0x4a, 0xea, 0xce, 0x3f, 0x53, 0x2d, 0xfa, 0x52, 0x06, 0xdf, 0x82,
	0x3f, 0xd1, 0x79, 0x36, 0x0e, 0x14, 0xaa, 0xe6, 0x14, 0x2a, 0xf1, 0x91, 0xbd, 0x84, 0x91, 0xad,
	0xd9, 0xd1, 0xc9, 0xc9, 0x88, 0xe6, 0x6c, 0xb4, 0x49, 0x39, 0xdc, 0xb8, 0xae, 0xc1, 0x39, 0x9c,
	0xd4, 0x26, 0x2e, 0x72, 0x9e, 0x15, 0x58, 0xed, 0x54, 0xf0, 0x21, 0xf4, 0x9e, 0xa1, 0xac, 0x2d,
	0xa2, 0x0a, 0xfd, 0xd3, 0x01, 0x6f, 0x1b, 0x6b, 0xf3, 0xde, 0xbf, 0xe2, 0xca, 0x00, 0x5a, 0xf7,
	0x1f, 0x80, 0xfb, 0x2f, 0x06, 0x40, 0x3c, 0xd8, 0x5d, 0xa1, 0x28, 0x18, 0xcf, 0xec, 0x17, 0xa3,
	0x5c, 0x2a, 0xa3, 0x08, 0x9c, 0xab, 0x80, 0xf9, 0x60, 0xd8, 0x95, 0x1a, 0xd9, 0x37, 0x9a, 0xfe,
	0x7f, 0x8f, 0xec, 0x23, 0xf0, 0xaf, 0x30, 0xc5, 0x86, 0xc4, 0xd5, 0x31, 0xbc, 0x00, 0x4f, 0xf9,
	0xbe, 0x16, 0xdb, 0x85, 0x9d, 0x94, 0x2d, 0x98, 0xb4, 0x70, 0xb3, 0x50, 0x07, 0xe2, 0xb3, 0x59,
	0x81, 0xa6, 0xb9, 0x6e, 0x68, 0x57, 0xe4, 0x03, 0x78, 0x9b, 0x8b, 0x39, 0xcd, 0xd8, 0x0f, 0xfa,
	0x3b, 0x1e, 0xb1, 0x44, 0xb7, 0xd0, 0x0d, 0x8f, 0xde, 0xdc, 0xbe, 0xbe, 0x0a, 0x72, 0xe8, 0xd7,
	0x48, 0xda, 0xc9, 0x9f, 0xc1, 0x81, 0xe4, 0x92, 0xa6, 0x51, 0xcc, 0x97, 0x59, 0xa9, 0x0c, 0x7a,
	0x6b, 0xa2, 0x76, 0xc8, 0x85, 0xea, 0x67, 0xb1, 0x4c, 0x95, 0xbc, 0xab, 0x07, 0xb4, 0xd5, 0x91,
	0xf2, 0x22, 0x87, 0x16, 0x79, 0xf1, 0x4b, 0x1b, 0xba, 0x1b, 0x08, 0xf5, 0x64, 0x31, 0x92, 0x14,
	0x3a, 0xc6, 0xde, 0xe4, 0x4c, 0xa7, 0x69, 0xbe, 0x44, 0xfe, 0xa0, 0x19, 0x60, 0x4a, 0x0f, 0xce,
	0x7e, 0xfa, 0xfd, 0x8f, 0x9f, 0x5b, 0xfd, 0xa0, 0xab, 0xff, 0x68, 0x76, 0x28, 0xe7, 0x66, 0x7c,
	0xc5, 0x13, 0xe7, 0x11, 0x41, 0x70, 0x9f, 0xa1, 0x24, 0xa7, 0x3a, 0x53, 0xc3, 0x3d, 0xf1, 0xdf,
	0x6b, 0x88, 0x5a, 0x91, 0xf7, 0xb5, 0xc8, 0x09, 0xe9, 0xd7, 0x89, 0x8c, 0x7f, 0x64, 0xc9, 0x2b,
	0xb2, 0x82, 0x8e, 0x71, 0x96, 0x3d, 0x54, 0xb3, 0xcd, 0xfc, 0xe3, 0x2d, 0x77, 0x3f, 0x55, 0x3f,
	0xd5, 0xe0, 0xb1, 0x56, 0x39, 0xf7, 0x87, 0xf5, 0x2a, 0x9b, 0xd6, 0x1c, 0xb1, 0xe4, 0x95, 0x3a,
	0x5e, 0x02, 0x1d, 0x63, 0x3c, 0xab, 0xdb, 0xec, 0xc2, 0x46, 0x5d, 0x7b, 0xba, 0x47, 0x7f, 0x73,
	0xba, 0x18, 0xda, 0x6a, 0xbe, 0xc4, 0xf4, 0xa9, 0xc9, 0xbb, 0xfe, 0xc3, 0xa6, 0xb0, 0xed, 0xe3,
	0xa9, 0x56, 0x3a, 0x26, 0xb5, 0xc3, 0xba, 0xeb, 0xe8, 0xba, 0x1e, 0xff, 0x15, 0x00, 0x00, 0xff,
	0xff, 0x66, 0xa8, 0xcf, 0x2d, 0xbd, 0x08, 0x00, 0x00,
}
