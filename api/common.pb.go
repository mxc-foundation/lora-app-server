// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/mxc-foundation/lpwan-server/api/common"
import gw "github.com/mxc-foundation/lpwan-server/api/gw"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf3 "github.com/golang/protobuf/ptypes/duration"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RXWindow int32

const (
	RXWindow_RX1 RXWindow = 0
	RXWindow_RX2 RXWindow = 1
)

var RXWindow_name = map[int32]string{
	0: "RX1",
	1: "RX2",
}
var RXWindow_value = map[string]int32{
	"RX1": 0,
	"RX2": 1,
}

func (x RXWindow) String() string {
	return proto.EnumName(RXWindow_name, int32(x))
}
func (RXWindow) EnumDescriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

type UplinkFrameLog struct {
	// TX information of the uplink.
	TxInfo *gw.UplinkTXInfo `protobuf:"bytes,1,opt,name=tx_info,json=txInfo" json:"tx_info,omitempty"`
	// RX information of the uplink.
	RxInfo []*UplinkRXInfo `protobuf:"bytes,2,rep,name=rx_info,json=rxInfo" json:"rx_info,omitempty"`
	// LoRaWAN PHYPayload.
	PhyPayloadJson string `protobuf:"bytes,3,opt,name=phy_payload_json,json=phyPayloadJSON" json:"phy_payload_json,omitempty"`
}

func (m *UplinkFrameLog) Reset()                    { *m = UplinkFrameLog{} }
func (m *UplinkFrameLog) String() string            { return proto.CompactTextString(m) }
func (*UplinkFrameLog) ProtoMessage()               {}
func (*UplinkFrameLog) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *UplinkFrameLog) GetTxInfo() *gw.UplinkTXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *UplinkFrameLog) GetRxInfo() []*UplinkRXInfo {
	if m != nil {
		return m.RxInfo
	}
	return nil
}

func (m *UplinkFrameLog) GetPhyPayloadJson() string {
	if m != nil {
		return m.PhyPayloadJson
	}
	return ""
}

type DownlinkFrameLog struct {
	// TX information of the downlink.
	TxInfo *DownlinkTXInfo `protobuf:"bytes,1,opt,name=tx_info,json=txInfo" json:"tx_info,omitempty"`
	// LoRaWAN PHYPayload.
	PhyPayloadJson string `protobuf:"bytes,2,opt,name=phy_payload_json,json=phyPayloadJSON" json:"phy_payload_json,omitempty"`
}

func (m *DownlinkFrameLog) Reset()                    { *m = DownlinkFrameLog{} }
func (m *DownlinkFrameLog) String() string            { return proto.CompactTextString(m) }
func (*DownlinkFrameLog) ProtoMessage()               {}
func (*DownlinkFrameLog) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{1} }

func (m *DownlinkFrameLog) GetTxInfo() *DownlinkTXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *DownlinkFrameLog) GetPhyPayloadJson() string {
	if m != nil {
		return m.PhyPayloadJson
	}
	return ""
}

// This is a copy of gw.UplinkRXInfo with the only change that the
// gateway_id is of type string so that we can return it as HEX encoded
// instead of base64.
type UplinkRXInfo struct {
	// Gateway ID.
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayID" json:"gateway_id,omitempty"`
	// Uplink ID (UUID).
	UplinkId string `protobuf:"bytes,16,opt,name=uplink_id,json=uplinkID" json:"uplink_id,omitempty"`
	// RX time (only set when the gateway has a GPS module).
	Time *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	// RX time since GPS epoch (only set when the gateway has a GPS module).
	TimeSinceGpsEpoch *google_protobuf3.Duration `protobuf:"bytes,3,opt,name=time_since_gps_epoch,json=timeSinceGpsEpoch" json:"time_since_gps_epoch,omitempty"`
	// RSSI.
	Rssi int32 `protobuf:"varint,5,opt,name=rssi" json:"rssi,omitempty"`
	// LoRa SNR.
	LoraSnr float64 `protobuf:"fixed64,6,opt,name=lora_snr,json=loraSnr" json:"lora_snr,omitempty"`
	// Channel.
	Channel uint32 `protobuf:"varint,7,opt,name=channel" json:"channel,omitempty"`
	// RF Chain.
	RfChain uint32 `protobuf:"varint,8,opt,name=rf_chain,json=rfChain" json:"rf_chain,omitempty"`
	// Board.
	Board uint32 `protobuf:"varint,9,opt,name=board" json:"board,omitempty"`
	// Antenna.
	Antenna uint32 `protobuf:"varint,10,opt,name=antenna" json:"antenna,omitempty"`
	// Location.
	Location *common.Location `protobuf:"bytes,11,opt,name=location" json:"location,omitempty"`
	// Fine-timestamp type.
	FineTimestampType gw.FineTimestampType `protobuf:"varint,12,opt,name=fine_timestamp_type,json=fineTimestampType,enum=gw.FineTimestampType" json:"fine_timestamp_type,omitempty"`
	// Fine-timestamp data.
	//
	// Types that are valid to be assigned to FineTimestamp:
	//	*UplinkRXInfo_EncryptedFineTimestamp
	//	*UplinkRXInfo_PlainFineTimestamp
	FineTimestamp isUplinkRXInfo_FineTimestamp `protobuf_oneof:"fine_timestamp"`
	// Gateway specific context.
	Context []byte `protobuf:"bytes,15,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *UplinkRXInfo) Reset()                    { *m = UplinkRXInfo{} }
func (m *UplinkRXInfo) String() string            { return proto.CompactTextString(m) }
func (*UplinkRXInfo) ProtoMessage()               {}
func (*UplinkRXInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{2} }

type isUplinkRXInfo_FineTimestamp interface{ isUplinkRXInfo_FineTimestamp() }

type UplinkRXInfo_EncryptedFineTimestamp struct {
	EncryptedFineTimestamp *EncryptedFineTimestamp `protobuf:"bytes,13,opt,name=encrypted_fine_timestamp,json=encryptedFineTimestamp,oneof"`
}
type UplinkRXInfo_PlainFineTimestamp struct {
	PlainFineTimestamp *gw.PlainFineTimestamp `protobuf:"bytes,14,opt,name=plain_fine_timestamp,json=plainFineTimestamp,oneof"`
}

func (*UplinkRXInfo_EncryptedFineTimestamp) isUplinkRXInfo_FineTimestamp() {}
func (*UplinkRXInfo_PlainFineTimestamp) isUplinkRXInfo_FineTimestamp()     {}

func (m *UplinkRXInfo) GetFineTimestamp() isUplinkRXInfo_FineTimestamp {
	if m != nil {
		return m.FineTimestamp
	}
	return nil
}

func (m *UplinkRXInfo) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *UplinkRXInfo) GetUplinkId() string {
	if m != nil {
		return m.UplinkId
	}
	return ""
}

func (m *UplinkRXInfo) GetTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *UplinkRXInfo) GetTimeSinceGpsEpoch() *google_protobuf3.Duration {
	if m != nil {
		return m.TimeSinceGpsEpoch
	}
	return nil
}

func (m *UplinkRXInfo) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *UplinkRXInfo) GetLoraSnr() float64 {
	if m != nil {
		return m.LoraSnr
	}
	return 0
}

func (m *UplinkRXInfo) GetChannel() uint32 {
	if m != nil {
		return m.Channel
	}
	return 0
}

func (m *UplinkRXInfo) GetRfChain() uint32 {
	if m != nil {
		return m.RfChain
	}
	return 0
}

func (m *UplinkRXInfo) GetBoard() uint32 {
	if m != nil {
		return m.Board
	}
	return 0
}

func (m *UplinkRXInfo) GetAntenna() uint32 {
	if m != nil {
		return m.Antenna
	}
	return 0
}

func (m *UplinkRXInfo) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *UplinkRXInfo) GetFineTimestampType() gw.FineTimestampType {
	if m != nil {
		return m.FineTimestampType
	}
	return gw.FineTimestampType_NONE
}

func (m *UplinkRXInfo) GetEncryptedFineTimestamp() *EncryptedFineTimestamp {
	if x, ok := m.GetFineTimestamp().(*UplinkRXInfo_EncryptedFineTimestamp); ok {
		return x.EncryptedFineTimestamp
	}
	return nil
}

func (m *UplinkRXInfo) GetPlainFineTimestamp() *gw.PlainFineTimestamp {
	if x, ok := m.GetFineTimestamp().(*UplinkRXInfo_PlainFineTimestamp); ok {
		return x.PlainFineTimestamp
	}
	return nil
}

func (m *UplinkRXInfo) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*UplinkRXInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _UplinkRXInfo_OneofMarshaler, _UplinkRXInfo_OneofUnmarshaler, _UplinkRXInfo_OneofSizer, []interface{}{
		(*UplinkRXInfo_EncryptedFineTimestamp)(nil),
		(*UplinkRXInfo_PlainFineTimestamp)(nil),
	}
}

func _UplinkRXInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*UplinkRXInfo)
	// fine_timestamp
	switch x := m.FineTimestamp.(type) {
	case *UplinkRXInfo_EncryptedFineTimestamp:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EncryptedFineTimestamp); err != nil {
			return err
		}
	case *UplinkRXInfo_PlainFineTimestamp:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PlainFineTimestamp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("UplinkRXInfo.FineTimestamp has unexpected type %T", x)
	}
	return nil
}

func _UplinkRXInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*UplinkRXInfo)
	switch tag {
	case 13: // fine_timestamp.encrypted_fine_timestamp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EncryptedFineTimestamp)
		err := b.DecodeMessage(msg)
		m.FineTimestamp = &UplinkRXInfo_EncryptedFineTimestamp{msg}
		return true, err
	case 14: // fine_timestamp.plain_fine_timestamp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gw.PlainFineTimestamp)
		err := b.DecodeMessage(msg)
		m.FineTimestamp = &UplinkRXInfo_PlainFineTimestamp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _UplinkRXInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*UplinkRXInfo)
	// fine_timestamp
	switch x := m.FineTimestamp.(type) {
	case *UplinkRXInfo_EncryptedFineTimestamp:
		s := proto.Size(x.EncryptedFineTimestamp)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *UplinkRXInfo_PlainFineTimestamp:
		s := proto.Size(x.PlainFineTimestamp)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// this s a copy of gw.EncryptedFineTimestamp which the only change that
// the fpga_id is of type string so that it can be returned in HEX format
// instead of base64.
type EncryptedFineTimestamp struct {
	// AES key index used for encrypting the fine timestamp.
	AesKeyIndex uint32 `protobuf:"varint,1,opt,name=aes_key_index,json=aesKeyIndex" json:"aes_key_index,omitempty"`
	// Encrypted 'main' fine-timestamp (ns precision part of the timestamp).
	EncryptedNs []byte `protobuf:"bytes,2,opt,name=encrypted_ns,json=encryptedNS,proto3" json:"encrypted_ns,omitempty"`
	// FPGA ID.
	FpgaId string `protobuf:"bytes,3,opt,name=fpga_id,json=fpgaID" json:"fpga_id,omitempty"`
}

func (m *EncryptedFineTimestamp) Reset()                    { *m = EncryptedFineTimestamp{} }
func (m *EncryptedFineTimestamp) String() string            { return proto.CompactTextString(m) }
func (*EncryptedFineTimestamp) ProtoMessage()               {}
func (*EncryptedFineTimestamp) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{3} }

func (m *EncryptedFineTimestamp) GetAesKeyIndex() uint32 {
	if m != nil {
		return m.AesKeyIndex
	}
	return 0
}

func (m *EncryptedFineTimestamp) GetEncryptedNs() []byte {
	if m != nil {
		return m.EncryptedNs
	}
	return nil
}

func (m *EncryptedFineTimestamp) GetFpgaId() string {
	if m != nil {
		return m.FpgaId
	}
	return ""
}

// Same comment as above applies to this message.
type DownlinkTXInfo struct {
	// Gateway ID.
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayID" json:"gateway_id,omitempty"`
	// Downlink ID (UUID).
	DownlinkId string `protobuf:"bytes,17,opt,name=downlink_id,json=downlinkID" json:"downlink_id,omitempty"`
	// TX frequency (in Hz).
	Frequency uint32 `protobuf:"varint,5,opt,name=frequency" json:"frequency,omitempty"`
	// TX power (in dBm).
	Power int32 `protobuf:"varint,6,opt,name=power" json:"power,omitempty"`
	// Modulation.
	Modulation common.Modulation `protobuf:"varint,7,opt,name=modulation,enum=common.Modulation" json:"modulation,omitempty"`
	// Types that are valid to be assigned to ModulationInfo:
	//	*DownlinkTXInfo_LoraModulationInfo
	//	*DownlinkTXInfo_FskModulationInfo
	ModulationInfo isDownlinkTXInfo_ModulationInfo `protobuf_oneof:"modulation_info"`
	// The board identifier for emitting the frame.
	Board uint32 `protobuf:"varint,10,opt,name=board" json:"board,omitempty"`
	// The antenna identifier for emitting the frame.
	Antenna uint32 `protobuf:"varint,11,opt,name=antenna" json:"antenna,omitempty"`
	// Timing defines the downlink timing to use.
	Timing gw.DownlinkTiming `protobuf:"varint,12,opt,name=timing,enum=gw.DownlinkTiming" json:"timing,omitempty"`
	// Types that are valid to be assigned to TimingInfo:
	//	*DownlinkTXInfo_ImmediatelyTimingInfo
	//	*DownlinkTXInfo_DelayTimingInfo
	//	*DownlinkTXInfo_GpsEpochTimingInfo
	TimingInfo isDownlinkTXInfo_TimingInfo `protobuf_oneof:"timing_info"`
	// Gateway specific context.
	// In case of a Class-A downlink, this contains a copy of the uplink context.
	Context []byte `protobuf:"bytes,16,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *DownlinkTXInfo) Reset()                    { *m = DownlinkTXInfo{} }
func (m *DownlinkTXInfo) String() string            { return proto.CompactTextString(m) }
func (*DownlinkTXInfo) ProtoMessage()               {}
func (*DownlinkTXInfo) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{4} }

type isDownlinkTXInfo_ModulationInfo interface{ isDownlinkTXInfo_ModulationInfo() }
type isDownlinkTXInfo_TimingInfo interface{ isDownlinkTXInfo_TimingInfo() }

type DownlinkTXInfo_LoraModulationInfo struct {
	LoraModulationInfo *gw.LoRaModulationInfo `protobuf:"bytes,8,opt,name=lora_modulation_info,json=loraModulationInfo,oneof"`
}
type DownlinkTXInfo_FskModulationInfo struct {
	FskModulationInfo *gw.FSKModulationInfo `protobuf:"bytes,9,opt,name=fsk_modulation_info,json=fskModulationInfo,oneof"`
}
type DownlinkTXInfo_ImmediatelyTimingInfo struct {
	ImmediatelyTimingInfo *gw.ImmediatelyTimingInfo `protobuf:"bytes,13,opt,name=immediately_timing_info,json=immediatelyTimingInfo,oneof"`
}
type DownlinkTXInfo_DelayTimingInfo struct {
	DelayTimingInfo *gw.DelayTimingInfo `protobuf:"bytes,14,opt,name=delay_timing_info,json=delayTimingInfo,oneof"`
}
type DownlinkTXInfo_GpsEpochTimingInfo struct {
	GpsEpochTimingInfo *gw.GPSEpochTimingInfo `protobuf:"bytes,15,opt,name=gps_epoch_timing_info,json=gpsEpochTimingInfo,oneof"`
}

func (*DownlinkTXInfo_LoraModulationInfo) isDownlinkTXInfo_ModulationInfo() {}
func (*DownlinkTXInfo_FskModulationInfo) isDownlinkTXInfo_ModulationInfo()  {}
func (*DownlinkTXInfo_ImmediatelyTimingInfo) isDownlinkTXInfo_TimingInfo()  {}
func (*DownlinkTXInfo_DelayTimingInfo) isDownlinkTXInfo_TimingInfo()        {}
func (*DownlinkTXInfo_GpsEpochTimingInfo) isDownlinkTXInfo_TimingInfo()     {}

func (m *DownlinkTXInfo) GetModulationInfo() isDownlinkTXInfo_ModulationInfo {
	if m != nil {
		return m.ModulationInfo
	}
	return nil
}
func (m *DownlinkTXInfo) GetTimingInfo() isDownlinkTXInfo_TimingInfo {
	if m != nil {
		return m.TimingInfo
	}
	return nil
}

func (m *DownlinkTXInfo) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *DownlinkTXInfo) GetDownlinkId() string {
	if m != nil {
		return m.DownlinkId
	}
	return ""
}

func (m *DownlinkTXInfo) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *DownlinkTXInfo) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *DownlinkTXInfo) GetModulation() common.Modulation {
	if m != nil {
		return m.Modulation
	}
	return common.Modulation_LORA
}

func (m *DownlinkTXInfo) GetLoraModulationInfo() *gw.LoRaModulationInfo {
	if x, ok := m.GetModulationInfo().(*DownlinkTXInfo_LoraModulationInfo); ok {
		return x.LoraModulationInfo
	}
	return nil
}

func (m *DownlinkTXInfo) GetFskModulationInfo() *gw.FSKModulationInfo {
	if x, ok := m.GetModulationInfo().(*DownlinkTXInfo_FskModulationInfo); ok {
		return x.FskModulationInfo
	}
	return nil
}

func (m *DownlinkTXInfo) GetBoard() uint32 {
	if m != nil {
		return m.Board
	}
	return 0
}

func (m *DownlinkTXInfo) GetAntenna() uint32 {
	if m != nil {
		return m.Antenna
	}
	return 0
}

func (m *DownlinkTXInfo) GetTiming() gw.DownlinkTiming {
	if m != nil {
		return m.Timing
	}
	return gw.DownlinkTiming_IMMEDIATELY
}

func (m *DownlinkTXInfo) GetImmediatelyTimingInfo() *gw.ImmediatelyTimingInfo {
	if x, ok := m.GetTimingInfo().(*DownlinkTXInfo_ImmediatelyTimingInfo); ok {
		return x.ImmediatelyTimingInfo
	}
	return nil
}

func (m *DownlinkTXInfo) GetDelayTimingInfo() *gw.DelayTimingInfo {
	if x, ok := m.GetTimingInfo().(*DownlinkTXInfo_DelayTimingInfo); ok {
		return x.DelayTimingInfo
	}
	return nil
}

func (m *DownlinkTXInfo) GetGpsEpochTimingInfo() *gw.GPSEpochTimingInfo {
	if x, ok := m.GetTimingInfo().(*DownlinkTXInfo_GpsEpochTimingInfo); ok {
		return x.GpsEpochTimingInfo
	}
	return nil
}

func (m *DownlinkTXInfo) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DownlinkTXInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DownlinkTXInfo_OneofMarshaler, _DownlinkTXInfo_OneofUnmarshaler, _DownlinkTXInfo_OneofSizer, []interface{}{
		(*DownlinkTXInfo_LoraModulationInfo)(nil),
		(*DownlinkTXInfo_FskModulationInfo)(nil),
		(*DownlinkTXInfo_ImmediatelyTimingInfo)(nil),
		(*DownlinkTXInfo_DelayTimingInfo)(nil),
		(*DownlinkTXInfo_GpsEpochTimingInfo)(nil),
	}
}

func _DownlinkTXInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DownlinkTXInfo)
	// modulation_info
	switch x := m.ModulationInfo.(type) {
	case *DownlinkTXInfo_LoraModulationInfo:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.LoraModulationInfo); err != nil {
			return err
		}
	case *DownlinkTXInfo_FskModulationInfo:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FskModulationInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DownlinkTXInfo.ModulationInfo has unexpected type %T", x)
	}
	// timing_info
	switch x := m.TimingInfo.(type) {
	case *DownlinkTXInfo_ImmediatelyTimingInfo:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.ImmediatelyTimingInfo); err != nil {
			return err
		}
	case *DownlinkTXInfo_DelayTimingInfo:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DelayTimingInfo); err != nil {
			return err
		}
	case *DownlinkTXInfo_GpsEpochTimingInfo:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.GpsEpochTimingInfo); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DownlinkTXInfo.TimingInfo has unexpected type %T", x)
	}
	return nil
}

func _DownlinkTXInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DownlinkTXInfo)
	switch tag {
	case 8: // modulation_info.lora_modulation_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gw.LoRaModulationInfo)
		err := b.DecodeMessage(msg)
		m.ModulationInfo = &DownlinkTXInfo_LoraModulationInfo{msg}
		return true, err
	case 9: // modulation_info.fsk_modulation_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gw.FSKModulationInfo)
		err := b.DecodeMessage(msg)
		m.ModulationInfo = &DownlinkTXInfo_FskModulationInfo{msg}
		return true, err
	case 13: // timing_info.immediately_timing_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gw.ImmediatelyTimingInfo)
		err := b.DecodeMessage(msg)
		m.TimingInfo = &DownlinkTXInfo_ImmediatelyTimingInfo{msg}
		return true, err
	case 14: // timing_info.delay_timing_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gw.DelayTimingInfo)
		err := b.DecodeMessage(msg)
		m.TimingInfo = &DownlinkTXInfo_DelayTimingInfo{msg}
		return true, err
	case 15: // timing_info.gps_epoch_timing_info
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(gw.GPSEpochTimingInfo)
		err := b.DecodeMessage(msg)
		m.TimingInfo = &DownlinkTXInfo_GpsEpochTimingInfo{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DownlinkTXInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DownlinkTXInfo)
	// modulation_info
	switch x := m.ModulationInfo.(type) {
	case *DownlinkTXInfo_LoraModulationInfo:
		s := proto.Size(x.LoraModulationInfo)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DownlinkTXInfo_FskModulationInfo:
		s := proto.Size(x.FskModulationInfo)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// timing_info
	switch x := m.TimingInfo.(type) {
	case *DownlinkTXInfo_ImmediatelyTimingInfo:
		s := proto.Size(x.ImmediatelyTimingInfo)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DownlinkTXInfo_DelayTimingInfo:
		s := proto.Size(x.DelayTimingInfo)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DownlinkTXInfo_GpsEpochTimingInfo:
		s := proto.Size(x.GpsEpochTimingInfo)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*UplinkFrameLog)(nil), "api.UplinkFrameLog")
	proto.RegisterType((*DownlinkFrameLog)(nil), "api.DownlinkFrameLog")
	proto.RegisterType((*UplinkRXInfo)(nil), "api.UplinkRXInfo")
	proto.RegisterType((*EncryptedFineTimestamp)(nil), "api.EncryptedFineTimestamp")
	proto.RegisterType((*DownlinkTXInfo)(nil), "api.DownlinkTXInfo")
	proto.RegisterEnum("api.RXWindow", RXWindow_name, RXWindow_value)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 882 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x6d, 0x72, 0xdb, 0x36,
	0x10, 0x0d, 0xe3, 0xe8, 0x6b, 0xa9, 0x4f, 0x38, 0xb6, 0x69, 0x27, 0x9d, 0xaa, 0xfa, 0xa5, 0x7a,
	0x32, 0xd2, 0x54, 0x3d, 0x41, 0x53, 0x39, 0xae, 0x62, 0x37, 0xf5, 0x40, 0xee, 0xc4, 0xff, 0x38,
	0xb0, 0x08, 0x52, 0xb0, 0x25, 0x00, 0x25, 0xa9, 0x91, 0x78, 0x8c, 0xde, 0xa0, 0xe7, 0xe9, 0xa9,
	0x3a, 0x00, 0x48, 0x4a, 0x94, 0xd5, 0xc9, 0x2f, 0x11, 0xef, 0xed, 0xbe, 0x5d, 0x61, 0xdf, 0x02,
	0xea, 0x33, 0xb1, 0x5c, 0x0a, 0x3e, 0x90, 0xa1, 0x88, 0x05, 0x3a, 0x22, 0x92, 0x5d, 0x9c, 0x11,
	0xc9, 0x86, 0x06, 0x1e, 0xee, 0xb2, 0x17, 0x2d, 0x45, 0x04, 0xeb, 0x61, 0xb0, 0x4e, 0x81, 0xf3,
	0x98, 0x2d, 0x69, 0x14, 0x93, 0xa5, 0x1c, 0xe6, 0x5f, 0x29, 0x75, 0xe6, 0xad, 0x42, 0x12, 0x33,
	0xc1, 0x87, 0xd9, 0x87, 0x21, 0x7a, 0x7f, 0x5b, 0xd0, 0xfc, 0x53, 0x2e, 0x18, 0x7f, 0xfe, 0x14,
	0x92, 0x25, 0xbd, 0x15, 0x01, 0xfa, 0x11, 0x2a, 0xf1, 0xc6, 0x65, 0xdc, 0x17, 0x8e, 0xd5, 0xb5,
	0xfa, 0xf6, 0xa8, 0x3d, 0x08, 0xd6, 0x03, 0x13, 0x74, 0xff, 0x30, 0xe1, 0xbe, 0xc0, 0xe5, 0x78,
	0xa3, 0x7e, 0xd1, 0x25, 0x54, 0xc2, 0x34, 0xf4, 0x75, 0xf7, 0xa8, 0x6f, 0x8f, 0x3a, 0x03, 0x22,
	0x59, 0x1a, 0x8b, 0xd3, 0xd8, 0xd0, 0xc4, 0xf6, 0xa1, 0x2d, 0xe7, 0x89, 0x2b, 0x49, 0xb2, 0x10,
	0xc4, 0x73, 0x9f, 0x22, 0xc1, 0x9d, 0xa3, 0xae, 0xd5, 0xaf, 0xe1, 0xa6, 0x9c, 0x27, 0x77, 0x06,
	0xfe, 0x3c, 0xfd, 0xe3, 0x4b, 0xef, 0x09, 0xda, 0x63, 0xb1, 0xe6, 0x85, 0xa6, 0x3e, 0xec, 0x37,
	0x75, 0xac, 0x2b, 0x65, 0x71, 0x7b, 0x7d, 0x1d, 0xaa, 0xf5, 0xfa, 0x60, 0xad, 0x7f, 0x4a, 0x50,
	0xdf, 0x6d, 0x17, 0x7d, 0x07, 0x10, 0x90, 0x98, 0xae, 0x49, 0xe2, 0x32, 0x4f, 0xd7, 0xaa, 0xe1,
	0x5a, 0x8a, 0x4c, 0xc6, 0xe8, 0x1d, 0xd4, 0x56, 0x3a, 0x5c, 0xb1, 0x6d, 0xcd, 0x56, 0x0d, 0x30,
	0x19, 0xa3, 0x01, 0xbc, 0x51, 0x17, 0xaf, 0x4b, 0xd9, 0xa3, 0x8b, 0x41, 0x20, 0x44, 0xb0, 0xa0,
	0xe6, 0xa6, 0x1f, 0x57, 0xfe, 0xe0, 0x3e, 0x9b, 0x0a, 0xd6, 0x71, 0xe8, 0x33, 0xbc, 0x55, 0xbf,
	0x6e, 0xc4, 0xf8, 0x8c, 0xba, 0x81, 0x8c, 0x5c, 0x2a, 0xc5, 0x6c, 0xae, 0xaf, 0xc5, 0x1e, 0x9d,
	0xbf, 0xc8, 0x1f, 0xa7, 0xb3, 0xc3, 0x1d, 0x95, 0x36, 0x55, 0x59, 0xd7, 0x32, 0xba, 0x52, 0x39,
	0x08, 0xc1, 0x9b, 0x30, 0x8a, 0x98, 0x53, 0xea, 0x5a, 0xfd, 0x12, 0xd6, 0xdf, 0xe8, 0x1c, 0xaa,
	0x0b, 0x11, 0x12, 0x37, 0xe2, 0xa1, 0x53, 0xee, 0x5a, 0x7d, 0x0b, 0x57, 0xd4, 0x79, 0xca, 0x43,
	0xe4, 0x40, 0x65, 0x36, 0x27, 0x9c, 0xd3, 0x85, 0x53, 0xe9, 0x5a, 0xfd, 0x06, 0xce, 0x8e, 0x2a,
	0x29, 0xf4, 0xdd, 0xd9, 0x9c, 0x30, 0xee, 0x54, 0x0d, 0x15, 0xfa, 0xbf, 0xaa, 0x23, 0x7a, 0x0b,
	0xa5, 0x47, 0x41, 0x42, 0xcf, 0xa9, 0x69, 0xdc, 0x1c, 0x94, 0x14, 0xe1, 0x31, 0xe5, 0x9c, 0x38,
	0x60, 0xe2, 0xd3, 0x23, 0xfa, 0xa0, 0xea, 0xcf, 0x74, 0xcb, 0x8e, 0x9d, 0x5a, 0x29, 0xb5, 0xf0,
	0x6d, 0x8a, 0xe3, 0x3c, 0x02, 0x5d, 0xc1, 0xb1, 0xcf, 0x38, 0x75, 0x73, 0xef, 0xba, 0x71, 0x22,
	0xa9, 0x53, 0xef, 0x5a, 0xfd, 0xe6, 0xe8, 0x44, 0x79, 0xf0, 0x13, 0xe3, 0x34, 0xbf, 0xc3, 0xfb,
	0x44, 0x52, 0xdc, 0xf1, 0xf7, 0x21, 0xf4, 0x15, 0x1c, 0xca, 0x67, 0x61, 0x22, 0x63, 0xea, 0xb9,
	0x45, 0x41, 0xa7, 0xa1, 0x9b, 0x78, 0xa7, 0xad, 0x73, 0x95, 0x05, 0x15, 0x54, 0x7f, 0x7b, 0x85,
	0x4f, 0xe9, 0x41, 0x46, 0x4d, 0x4b, 0x2e, 0x08, 0xe3, 0xfb, 0xa2, 0x4d, 0x2d, 0x7a, 0xaa, 0x1a,
	0xbc, 0x53, 0xfc, 0xbe, 0x1e, 0x92, 0x2f, 0x50, 0x7d, 0xfd, 0x82, 0xc7, 0x74, 0x13, 0x3b, 0xad,
	0xae, 0xd5, 0xaf, 0xe3, 0xec, 0xf8, 0xb1, 0x0d, 0xcd, 0xa2, 0x7e, 0x6f, 0x03, 0xa7, 0x87, 0x7b,
	0x45, 0x3d, 0x68, 0x10, 0x1a, 0xb9, 0xcf, 0x34, 0x71, 0x19, 0xf7, 0xe8, 0x46, 0xdb, 0xb5, 0x81,
	0x6d, 0x42, 0xa3, 0x1b, 0x9a, 0x4c, 0x14, 0x84, 0x7e, 0x80, 0xfa, 0xf6, 0x3a, 0x78, 0xa4, 0xbd,
	0x59, 0xc7, 0x76, 0x8e, 0x7d, 0x99, 0xa2, 0x33, 0xa8, 0xf8, 0x32, 0x20, 0xca, 0xd1, 0x66, 0x21,
	0xcb, 0xea, 0x38, 0x19, 0xf7, 0xfe, 0x2d, 0x41, 0xb3, 0xb8, 0x61, 0xdf, 0x5a, 0x8f, 0xef, 0xc1,
	0xf6, 0xd2, 0x04, 0xc5, 0x77, 0x34, 0x0f, 0x19, 0x34, 0x19, 0xa3, 0xf7, 0x50, 0xf3, 0x43, 0xfa,
	0xd7, 0x8a, 0xf2, 0x59, 0xa2, 0xbd, 0xda, 0xc0, 0x5b, 0x40, 0x19, 0x4c, 0x8a, 0x35, 0x35, 0x6e,
	0x2d, 0x61, 0x73, 0x40, 0x23, 0x80, 0xa5, 0xf0, 0x56, 0x0b, 0x63, 0xa4, 0x8a, 0xf6, 0x03, 0xca,
	0x8c, 0xf4, 0x7b, 0xce, 0xe0, 0x9d, 0x28, 0x35, 0x2c, 0x6d, 0xfd, 0x2d, 0x64, 0x1e, 0x8f, 0xea,
	0x76, 0x58, 0xb7, 0x02, 0x93, 0x6d, 0xb6, 0xfa, 0x77, 0x6a, 0x58, 0x2a, 0xab, 0x88, 0xa2, 0x6b,
	0x38, 0xf6, 0xa3, 0xe7, 0x17, 0x52, 0x35, 0x2d, 0x65, 0x8c, 0x39, 0xbd, 0x79, 0xa1, 0xd4, 0xf1,
	0xa3, 0xe7, 0x3d, 0xa1, 0x7c, 0x7f, 0xe0, 0x7f, 0xf6, 0xc7, 0x2e, 0xee, 0xcf, 0x25, 0x94, 0x63,
	0xb6, 0x64, 0x3c, 0x48, 0x97, 0x00, 0xa9, 0x5a, 0xf9, 0x40, 0x34, 0x83, 0xd3, 0x08, 0x34, 0x85,
	0x33, 0xb6, 0x5c, 0x52, 0x8f, 0x91, 0x98, 0x2e, 0x12, 0xd7, 0xa0, 0xa6, 0xd1, 0x46, 0xf6, 0x9c,
	0xac, 0x07, 0x93, 0x6d, 0x88, 0xc9, 0xd7, 0xcd, 0x5a, 0xf8, 0x84, 0x1d, 0x22, 0xd0, 0x2f, 0xd0,
	0xf1, 0xe8, 0x82, 0x14, 0xe5, 0x9a, 0xe9, 0xfb, 0xab, 0x7a, 0x51, 0x64, 0x41, 0xa8, 0xe5, 0x15,
	0x21, 0x74, 0x03, 0x27, 0xf9, 0xc3, 0x56, 0x90, 0x69, 0x6d, 0x27, 0x71, 0x7d, 0x37, 0xd5, 0x8f,
	0x58, 0x41, 0x09, 0x05, 0xe9, 0xd3, 0xb6, 0x23, 0xb6, 0xb3, 0x36, 0xed, 0xe2, 0xda, 0x74, 0xa0,
	0xb5, 0x37, 0x9f, 0x8f, 0x0d, 0xb0, 0x77, 0xea, 0x5d, 0xbe, 0x87, 0x2a, 0x7e, 0xf8, 0xca, 0xb8,
	0x27, 0xd6, 0xa8, 0x02, 0x47, 0xf8, 0xe1, 0xa7, 0xf6, 0x2b, 0xf3, 0x31, 0x6a, 0x5b, 0x8f, 0x65,
	0xfd, 0xc8, 0xfe, 0xfc, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x6a, 0xce, 0x08, 0xf4, 0x81, 0x07,
	0x00, 0x00,
}
