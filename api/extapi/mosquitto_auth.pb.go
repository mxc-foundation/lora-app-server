// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: mosquitto_auth.proto

package extapi

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetJWTRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrganizationId int64 `protobuf:"varint,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
}

func (x *GetJWTRequest) Reset() {
	*x = GetJWTRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mosquitto_auth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJWTRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJWTRequest) ProtoMessage() {}

func (x *GetJWTRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mosquitto_auth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJWTRequest.ProtoReflect.Descriptor instead.
func (*GetJWTRequest) Descriptor() ([]byte, []int) {
	return file_mosquitto_auth_proto_rawDescGZIP(), []int{0}
}

func (x *GetJWTRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

type GetJWTResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// jwt generated and used for authenticate mosquitto client
	JwtMqttAuth string `protobuf:"bytes,1,opt,name=jwt_mqtt_auth,json=jwtMqttAuth,proto3" json:"jwt_mqtt_auth,omitempty"`
}

func (x *GetJWTResponse) Reset() {
	*x = GetJWTResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mosquitto_auth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJWTResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJWTResponse) ProtoMessage() {}

func (x *GetJWTResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mosquitto_auth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJWTResponse.ProtoReflect.Descriptor instead.
func (*GetJWTResponse) Descriptor() ([]byte, []int) {
	return file_mosquitto_auth_proto_rawDescGZIP(), []int{1}
}

func (x *GetJWTResponse) GetJwtMqttAuth() string {
	if x != nil {
		return x.JwtMqttAuth
	}
	return ""
}

type JWTAuthenticationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JWTAuthenticationRequest) Reset() {
	*x = JWTAuthenticationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mosquitto_auth_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTAuthenticationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTAuthenticationRequest) ProtoMessage() {}

func (x *JWTAuthenticationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mosquitto_auth_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTAuthenticationRequest.ProtoReflect.Descriptor instead.
func (*JWTAuthenticationRequest) Descriptor() ([]byte, []int) {
	return file_mosquitto_auth_proto_rawDescGZIP(), []int{2}
}

type JWTAuthenticationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *JWTAuthenticationResponse) Reset() {
	*x = JWTAuthenticationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mosquitto_auth_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTAuthenticationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTAuthenticationResponse) ProtoMessage() {}

func (x *JWTAuthenticationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mosquitto_auth_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTAuthenticationResponse.ProtoReflect.Descriptor instead.
func (*JWTAuthenticationResponse) Descriptor() ([]byte, []int) {
	return file_mosquitto_auth_proto_rawDescGZIP(), []int{3}
}

type CheckACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientid,proto3" json:"client_id,omitempty"`
	Topic    string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Acc      int32  `protobuf:"varint,3,opt,name=acc,proto3" json:"acc,omitempty"`
}

func (x *CheckACLRequest) Reset() {
	*x = CheckACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mosquitto_auth_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckACLRequest) ProtoMessage() {}

func (x *CheckACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mosquitto_auth_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckACLRequest.ProtoReflect.Descriptor instead.
func (*CheckACLRequest) Descriptor() ([]byte, []int) {
	return file_mosquitto_auth_proto_rawDescGZIP(), []int{4}
}

func (x *CheckACLRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *CheckACLRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *CheckACLRequest) GetAcc() int32 {
	if x != nil {
		return x.Acc
	}
	return 0
}

type CheckACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CheckACLResponse) Reset() {
	*x = CheckACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mosquitto_auth_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckACLResponse) ProtoMessage() {}

func (x *CheckACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mosquitto_auth_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckACLResponse.ProtoReflect.Descriptor instead.
func (*CheckACLResponse) Descriptor() ([]byte, []int) {
	return file_mosquitto_auth_proto_rawDescGZIP(), []int{5}
}

var File_mosquitto_auth_proto protoreflect.FileDescriptor

var file_mosquitto_auth_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x6f, 0x73, 0x71, 0x75, 0x69, 0x74, 0x74, 0x6f, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x38, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x4a, 0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4a, 0x57,
	0x54, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6a, 0x77, 0x74,
	0x5f, 0x6d, 0x71, 0x74, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6a, 0x77, 0x74, 0x4d, 0x71, 0x74, 0x74, 0x41, 0x75, 0x74, 0x68, 0x22, 0x1a, 0x0a,
	0x18, 0x4a, 0x57, 0x54, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x1b, 0x0a, 0x19, 0x4a, 0x57, 0x54,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41,
	0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x63, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x63, 0x63, 0x22, 0x12,
	0x0a, 0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0xe8, 0x02, 0x0a, 0x14, 0x4d, 0x6f, 0x73, 0x71, 0x75, 0x69, 0x74, 0x74, 0x6f,
	0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x4a, 0x57, 0x54, 0x12, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e,
	0x47, 0x65, 0x74, 0x4a, 0x57, 0x54, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x57, 0x54, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x73, 0x71, 0x75, 0x69, 0x74, 0x74, 0x6f, 0x2d, 0x61,
	0x75, 0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a,
	0x11, 0x4a, 0x57, 0x54, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x4a, 0x57, 0x54,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e,
	0x4a, 0x57, 0x54, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x21, 0x22, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6f, 0x73, 0x71, 0x75, 0x69, 0x74, 0x74,
	0x6f, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x75, 0x73, 0x65, 0x72, 0x3a,
	0x01, 0x2a, 0x12, 0x69, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x43, 0x4c, 0x12, 0x18,
	0x2e, 0x72, 0x65, 0x73, 0x74, 0x66, 0x75, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x43,
	0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x66,
	0x75, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x6f, 0x73, 0x71, 0x75, 0x69, 0x74, 0x74, 0x6f, 0x2d, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x61, 0x63, 0x6c, 0x2d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x42, 0x3e, 0x5a,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x78, 0x63, 0x2d,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x70, 0x77, 0x61, 0x6e,
	0x2d, 0x61, 0x70, 0x70, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x3b, 0x65, 0x78, 0x74, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mosquitto_auth_proto_rawDescOnce sync.Once
	file_mosquitto_auth_proto_rawDescData = file_mosquitto_auth_proto_rawDesc
)

func file_mosquitto_auth_proto_rawDescGZIP() []byte {
	file_mosquitto_auth_proto_rawDescOnce.Do(func() {
		file_mosquitto_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_mosquitto_auth_proto_rawDescData)
	})
	return file_mosquitto_auth_proto_rawDescData
}

var file_mosquitto_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_mosquitto_auth_proto_goTypes = []interface{}{
	(*GetJWTRequest)(nil),             // 0: restful.GetJWTRequest
	(*GetJWTResponse)(nil),            // 1: restful.GetJWTResponse
	(*JWTAuthenticationRequest)(nil),  // 2: restful.JWTAuthenticationRequest
	(*JWTAuthenticationResponse)(nil), // 3: restful.JWTAuthenticationResponse
	(*CheckACLRequest)(nil),           // 4: restful.CheckACLRequest
	(*CheckACLResponse)(nil),          // 5: restful.CheckACLResponse
}
var file_mosquitto_auth_proto_depIdxs = []int32{
	0, // 0: restful.MosquittoAuthService.GetJWT:input_type -> restful.GetJWTRequest
	2, // 1: restful.MosquittoAuthService.JWTAuthentication:input_type -> restful.JWTAuthenticationRequest
	4, // 2: restful.MosquittoAuthService.CheckACL:input_type -> restful.CheckACLRequest
	1, // 3: restful.MosquittoAuthService.GetJWT:output_type -> restful.GetJWTResponse
	3, // 4: restful.MosquittoAuthService.JWTAuthentication:output_type -> restful.JWTAuthenticationResponse
	5, // 5: restful.MosquittoAuthService.CheckACL:output_type -> restful.CheckACLResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mosquitto_auth_proto_init() }
func file_mosquitto_auth_proto_init() {
	if File_mosquitto_auth_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mosquitto_auth_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJWTRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mosquitto_auth_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJWTResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mosquitto_auth_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTAuthenticationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mosquitto_auth_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTAuthenticationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mosquitto_auth_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mosquitto_auth_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mosquitto_auth_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mosquitto_auth_proto_goTypes,
		DependencyIndexes: file_mosquitto_auth_proto_depIdxs,
		MessageInfos:      file_mosquitto_auth_proto_msgTypes,
	}.Build()
	File_mosquitto_auth_proto = out.File
	file_mosquitto_auth_proto_rawDesc = nil
	file_mosquitto_auth_proto_goTypes = nil
	file_mosquitto_auth_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MosquittoAuthServiceClient is the client API for MosquittoAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MosquittoAuthServiceClient interface {
	// Get JWT for mosquitto auth with given org id
	// Only accessible for authenticated supernode user
	GetJWT(ctx context.Context, in *GetJWTRequest, opts ...grpc.CallOption) (*GetJWTResponse, error)
	// This will be called by mosquitto auth plugin JWT backend, request and response are also defined there
	JWTAuthentication(ctx context.Context, in *JWTAuthenticationRequest, opts ...grpc.CallOption) (*JWTAuthenticationResponse, error)
	// This will be called by mosquitto auth plugin JWT backend, request and response are also defined there
	CheckACL(ctx context.Context, in *CheckACLRequest, opts ...grpc.CallOption) (*CheckACLResponse, error)
}

type mosquittoAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMosquittoAuthServiceClient(cc grpc.ClientConnInterface) MosquittoAuthServiceClient {
	return &mosquittoAuthServiceClient{cc}
}

func (c *mosquittoAuthServiceClient) GetJWT(ctx context.Context, in *GetJWTRequest, opts ...grpc.CallOption) (*GetJWTResponse, error) {
	out := new(GetJWTResponse)
	err := c.cc.Invoke(ctx, "/restful.MosquittoAuthService/GetJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mosquittoAuthServiceClient) JWTAuthentication(ctx context.Context, in *JWTAuthenticationRequest, opts ...grpc.CallOption) (*JWTAuthenticationResponse, error) {
	out := new(JWTAuthenticationResponse)
	err := c.cc.Invoke(ctx, "/restful.MosquittoAuthService/JWTAuthentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mosquittoAuthServiceClient) CheckACL(ctx context.Context, in *CheckACLRequest, opts ...grpc.CallOption) (*CheckACLResponse, error) {
	out := new(CheckACLResponse)
	err := c.cc.Invoke(ctx, "/restful.MosquittoAuthService/CheckACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MosquittoAuthServiceServer is the server API for MosquittoAuthService service.
type MosquittoAuthServiceServer interface {
	// Get JWT for mosquitto auth with given org id
	// Only accessible for authenticated supernode user
	GetJWT(context.Context, *GetJWTRequest) (*GetJWTResponse, error)
	// This will be called by mosquitto auth plugin JWT backend, request and response are also defined there
	JWTAuthentication(context.Context, *JWTAuthenticationRequest) (*JWTAuthenticationResponse, error)
	// This will be called by mosquitto auth plugin JWT backend, request and response are also defined there
	CheckACL(context.Context, *CheckACLRequest) (*CheckACLResponse, error)
}

// UnimplementedMosquittoAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMosquittoAuthServiceServer struct {
}

func (*UnimplementedMosquittoAuthServiceServer) GetJWT(context.Context, *GetJWTRequest) (*GetJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJWT not implemented")
}
func (*UnimplementedMosquittoAuthServiceServer) JWTAuthentication(context.Context, *JWTAuthenticationRequest) (*JWTAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JWTAuthentication not implemented")
}
func (*UnimplementedMosquittoAuthServiceServer) CheckACL(context.Context, *CheckACLRequest) (*CheckACLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckACL not implemented")
}

func RegisterMosquittoAuthServiceServer(s *grpc.Server, srv MosquittoAuthServiceServer) {
	s.RegisterService(&_MosquittoAuthService_serviceDesc, srv)
}

func _MosquittoAuthService_GetJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MosquittoAuthServiceServer).GetJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restful.MosquittoAuthService/GetJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MosquittoAuthServiceServer).GetJWT(ctx, req.(*GetJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MosquittoAuthService_JWTAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MosquittoAuthServiceServer).JWTAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restful.MosquittoAuthService/JWTAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MosquittoAuthServiceServer).JWTAuthentication(ctx, req.(*JWTAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MosquittoAuthService_CheckACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckACLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MosquittoAuthServiceServer).CheckACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/restful.MosquittoAuthService/CheckACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MosquittoAuthServiceServer).CheckACL(ctx, req.(*CheckACLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MosquittoAuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "restful.MosquittoAuthService",
	HandlerType: (*MosquittoAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJWT",
			Handler:    _MosquittoAuthService_GetJWT_Handler,
		},
		{
			MethodName: "JWTAuthentication",
			Handler:    _MosquittoAuthService_JWTAuthentication_Handler,
		},
		{
			MethodName: "CheckACL",
			Handler:    _MosquittoAuthService_CheckACL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mosquitto_auth.proto",
}
