syntax = "proto3";

package restful;
option go_package = "github.com/mxc-foundation/lpwan-app-server/api/extapi;extapi";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

service StakingService {
    // Make new stake
    rpc Stake (StakeRequest) returns (StakeResponse) {
        option (google.api.http) = {
            post: "/api/staking/{org_id}/stake"
            body: "*"
        };
    };

    // Unstake existing stake
    rpc Unstake (UnstakeRequest) returns (UnstakeResponse) {
        option (google.api.http) = {
            post: "/api/staking/{org_id}/unstake"
            body: "*"
        };
    };

    // Get list of active stakes
    rpc GetActiveStakes (GetActiveStakesRequest) returns (GetActiveStakesResponse) {
        option (google.api.http) = {
            get: "/api/staking/{org_id}/activestakes"
        };
    };

    rpc GetStakingRevenue (StakingRevenueRequest) returns (StakingRevenueResponse) {
        option (google.api.http) = {
            get: "/api/staking/{org_id}/revenue"
        };
    };

    rpc GetStakingHistory (StakingHistoryRequest) returns (StakingHistoryResponse) {
        option (google.api.http) = {
            get: "/api/staking/{org_id}/history"
        };
    };

    // Returns info about the stake, including all the revenues
    rpc StakeInfo (StakeInfoRequest) returns (StakeInfoResponse) {
        option (google.api.http) = {
            get: "/api/staking/{org_id}/stake-info"
        };
    };

    // Get information about staking percentage and boosts for lockin stake
    rpc GetStakingPercentage (StakingPercentageRequest) returns (StakingPercentageResponse) {
        option (google.api.http) = {
            get: "/api/staking/staking_percentage"
        };
    }
}

message StakingRevenueRequest {
    int64 org_id = 1;
    string currency = 2;
    google.protobuf.Timestamp from = 3;
    google.protobuf.Timestamp till = 4;
}

message StakingRevenueResponse {
    string amount = 1;
}

message StakeRequest {
    int64 org_id = 1;
    string amount = 2;
    string currency = 3;
    // for how many periods stake should be locked
    int64 lock_periods = 5;
    // the boost [0,1]
    string boost = 6;
}

message StakeResponse {
    string status = 1;
}

message UnstakeRequest {
    int64 org_id = 1;
    // string currency = 2;
    int64 stake_id = 3;
}

message UnstakeResponse {
    string status = 1;
}

message GetActiveStakesRequest {
    int64 org_id = 1;
    string currency = 2;
}

message Stake {
    int64 id = 1;
    // when stake was placed
    google.protobuf.Timestamp start_time = 2;
    // when stake was withdrawn
    google.protobuf.Timestamp end_time = 3;
    // amount staked
    string amount = 4;
    // if stake is active
    bool active = 5;
    // the time till which the stake is locked and can't be withdrawn
    google.protobuf.Timestamp lock_till = 6;
    // boost [0, 1]
    string boost = 7;
    // total stake revenue so far
    string revenue = 8;
}

message StakeRevenue {
    google.protobuf.Timestamp time = 1;
    string amount = 2;
}

message GetActiveStakesResponse {
    repeated Stake act_stake = 1;
}

message StakingHistoryRequest {
    int64 org_id = 1;
    string currency = 4;
    google.protobuf.Timestamp from = 5;
    google.protobuf.Timestamp till = 6;
}

message StakingHistory {
    google.protobuf.Timestamp timestamp = 1;
    string amount = 2;
    string type = 3;
    Stake stake = 4;
}

message StakingHistoryResponse {
    repeated StakingHistory staking_hist = 2;
}

message StakeInfoRequest {
    // organization id that owns the stake
    int64 org_id = 1;
    // the stake ID
    int64 stake_id = 2;
}

message StakeInfoResponse {
    // information about the stake
    Stake stake = 1;
    // all the revenues that were paid for this stake
    repeated StakeRevenue revenues = 2;
}

message StakingPercentageRequest {
    // int64 org_id = 1;
    string currency = 2;
}

// information about boost for locking the stake
message Boost {
    // for how many periods (normally months) stake will be locked
    int64 lock_periods = 1;
    // what boost will apply to this stake [0, 1]
    string boost = 2;
}

// information about staking share and boosts
message StakingPercentageResponse {
    // base staking interest
    double staking_interest = 1;
    // list of boosts for locking stake for different periods
    repeated Boost lock_boosts = 2;
}
