// Code generated by protoc-gen-go. DO NOT EDIT.
// source: gateway.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"
import common "github.com/mxc-foundation/lpwan-server/api/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Gateway struct {
	// Gateway ID (HEX encoded).
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Gateway name.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Gateway description.
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Gateway location.
	Location *common.Location `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	// Organization ID to which the gateway belongs.
	// This can't be changed after creating the gateway.
	OrganizationId int64 `protobuf:"varint,5,opt,name=organization_id,json=organizationID" json:"organization_id,omitempty"`
	// Set to true to enable gateway discovery.
	DiscoveryEnabled bool `protobuf:"varint,6,opt,name=discovery_enabled,json=discoveryEnabled" json:"discovery_enabled,omitempty"`
	// Network-server ID on which the gateway is provisioned.
	NetworkServerId int64 `protobuf:"varint,7,opt,name=network_server_id,json=networkServerID" json:"network_server_id,omitempty"`
	// Gateway-profile ID (UUID string, optional).
	GatewayProfileId string `protobuf:"bytes,8,opt,name=gateway_profile_id,json=gatewayProfileID" json:"gateway_profile_id,omitempty"`
	// Gateway boards configuration (optional).
	// This is (currently) only needed when the gateway supports the fine-timestamp
	// and you you would like to add the FPGA ID to the gateway meta-data or would
	// like LPWAN Server to decrypt the fine-timestamp.
	Boards []*GatewayBoard `protobuf:"bytes,9,rep,name=boards" json:"boards,omitempty"`
}

func (m *Gateway) Reset()                    { *m = Gateway{} }
func (m *Gateway) String() string            { return proto.CompactTextString(m) }
func (*Gateway) ProtoMessage()               {}
func (*Gateway) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Gateway) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Gateway) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Gateway) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Gateway) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Gateway) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *Gateway) GetDiscoveryEnabled() bool {
	if m != nil {
		return m.DiscoveryEnabled
	}
	return false
}

func (m *Gateway) GetNetworkServerId() int64 {
	if m != nil {
		return m.NetworkServerId
	}
	return 0
}

func (m *Gateway) GetGatewayProfileId() string {
	if m != nil {
		return m.GatewayProfileId
	}
	return ""
}

func (m *Gateway) GetBoards() []*GatewayBoard {
	if m != nil {
		return m.Boards
	}
	return nil
}

type GatewayBoard struct {
	// FPGA ID of the gateway (HEX encoded) (optional).
	FpgaId string `protobuf:"bytes,1,opt,name=fpga_id,json=fpgaID" json:"fpga_id,omitempty"`
	// Fine-timestamp AES decryption key (HEX encoded) (optional).
	FineTimestampKey string `protobuf:"bytes,2,opt,name=fine_timestamp_key,json=fineTimestampKey" json:"fine_timestamp_key,omitempty"`
}

func (m *GatewayBoard) Reset()                    { *m = GatewayBoard{} }
func (m *GatewayBoard) String() string            { return proto.CompactTextString(m) }
func (*GatewayBoard) ProtoMessage()               {}
func (*GatewayBoard) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *GatewayBoard) GetFpgaId() string {
	if m != nil {
		return m.FpgaId
	}
	return ""
}

func (m *GatewayBoard) GetFineTimestampKey() string {
	if m != nil {
		return m.FineTimestampKey
	}
	return ""
}

type CreateGatewayRequest struct {
	// Gateway object to create.
	Gateway *Gateway `protobuf:"bytes,1,opt,name=gateway" json:"gateway,omitempty"`
}

func (m *CreateGatewayRequest) Reset()                    { *m = CreateGatewayRequest{} }
func (m *CreateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGatewayRequest) ProtoMessage()               {}
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *CreateGatewayRequest) GetGateway() *Gateway {
	if m != nil {
		return m.Gateway
	}
	return nil
}

type GetGatewayRequest struct {
	// Gateway ID (HEX encoded).
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetGatewayRequest) Reset()                    { *m = GetGatewayRequest{} }
func (m *GetGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayRequest) ProtoMessage()               {}
func (*GetGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *GetGatewayRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetGatewayResponse struct {
	// Gateway object.
	Gateway *Gateway `protobuf:"bytes,1,opt,name=gateway" json:"gateway,omitempty"`
	// Created at timestamp.
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	// First seen at timestamp.
	FirstSeenAt *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=first_seen_at,json=firstSeenAt" json:"first_seen_at,omitempty"`
	// Last seen at timestamp.
	LastSeenAt *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=last_seen_at,json=lastSeenAt" json:"last_seen_at,omitempty"`
}

func (m *GetGatewayResponse) Reset()                    { *m = GetGatewayResponse{} }
func (m *GetGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayResponse) ProtoMessage()               {}
func (*GetGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *GetGatewayResponse) GetGateway() *Gateway {
	if m != nil {
		return m.Gateway
	}
	return nil
}

func (m *GetGatewayResponse) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *GetGatewayResponse) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *GetGatewayResponse) GetFirstSeenAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.FirstSeenAt
	}
	return nil
}

func (m *GetGatewayResponse) GetLastSeenAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastSeenAt
	}
	return nil
}

type DeleteGatewayRequest struct {
	// Gateway ID (HEX encoded).
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteGatewayRequest) Reset()                    { *m = DeleteGatewayRequest{} }
func (m *DeleteGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGatewayRequest) ProtoMessage()               {}
func (*DeleteGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *DeleteGatewayRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type ListGatewayRequest struct {
	// Max number of nodes to return in the result-set.
	Limit int32 `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	// Offset of the result-set (for pagination).
	Offset int32 `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	// ID of the organization for which to filter on, when left blank the
	// response will return all gateways to which the user has access to.
	OrganizationId int64 `protobuf:"varint,3,opt,name=organization_id,json=organizationID" json:"organization_id,omitempty"`
	// Search on name or gateway MAC (optional).
	Search string `protobuf:"bytes,4,opt,name=search" json:"search,omitempty"`
}

func (m *ListGatewayRequest) Reset()                    { *m = ListGatewayRequest{} }
func (m *ListGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayRequest) ProtoMessage()               {}
func (*ListGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *ListGatewayRequest) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListGatewayRequest) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListGatewayRequest) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *ListGatewayRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

type ListGatewayLocationsRequest struct {
}

func (m *ListGatewayLocationsRequest) Reset()                    { *m = ListGatewayLocationsRequest{} }
func (m *ListGatewayLocationsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayLocationsRequest) ProtoMessage()               {}
func (*ListGatewayLocationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

type GatewayListItem struct {
	// Gateway ID (HEX encoded).
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// A name for the gateway
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// A description for the gateway
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Create timestamp.
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
	// First seen timestamp.
	FirstSeenAt *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=first_seen_at,json=firstSeenAt" json:"first_seen_at,omitempty"`
	// Last seen timestamp.
	LastSeenAt *google_protobuf1.Timestamp `protobuf:"bytes,9,opt,name=last_seen_at,json=lastSeenAt" json:"last_seen_at,omitempty"`
	// Organization ID.
	OrganizationId int64 `protobuf:"varint,6,opt,name=organization_id,json=organizationID" json:"organization_id,omitempty"`
	// Network-server ID.
	NetworkServerId int64 `protobuf:"varint,7,opt,name=network_server_id,json=networkServerID" json:"network_server_id,omitempty"`
	// Location.
	Location *common.Location `protobuf:"bytes,10,opt,name=location" json:"location,omitempty"`
}

func (m *GatewayListItem) Reset()                    { *m = GatewayListItem{} }
func (m *GatewayListItem) String() string            { return proto.CompactTextString(m) }
func (*GatewayListItem) ProtoMessage()               {}
func (*GatewayListItem) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *GatewayListItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GatewayListItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GatewayListItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *GatewayListItem) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *GatewayListItem) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *GatewayListItem) GetFirstSeenAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.FirstSeenAt
	}
	return nil
}

func (m *GatewayListItem) GetLastSeenAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.LastSeenAt
	}
	return nil
}

func (m *GatewayListItem) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *GatewayListItem) GetNetworkServerId() int64 {
	if m != nil {
		return m.NetworkServerId
	}
	return 0
}

func (m *GatewayListItem) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

type GatewayLocation struct {
	// Latitude of the gateway -90.0 to 90.0.
	Latitude float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway -180.0 to 180.0.
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway in meters.
	Altitude float64 `protobuf:"fixed64,3,opt,name=altitude" json:"altitude,omitempty"`
}

func (m *GatewayLocation) Reset()                    { *m = GatewayLocation{} }
func (m *GatewayLocation) String() string            { return proto.CompactTextString(m) }
func (*GatewayLocation) ProtoMessage()               {}
func (*GatewayLocation) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *GatewayLocation) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *GatewayLocation) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *GatewayLocation) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

type GatewayLocationListItem struct {
	// Location.
	Location *GatewayLocation `protobuf:"bytes,10,opt,name=location" json:"location,omitempty"`
}

func (m *GatewayLocationListItem) Reset()                    { *m = GatewayLocationListItem{} }
func (m *GatewayLocationListItem) String() string            { return proto.CompactTextString(m) }
func (*GatewayLocationListItem) ProtoMessage()               {}
func (*GatewayLocationListItem) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *GatewayLocationListItem) GetLocation() *GatewayLocation {
	if m != nil {
		return m.Location
	}
	return nil
}

type ListGatewayResponse struct {
	// Total number of nodes available within the result-set.
	TotalCount int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount" json:"total_count,omitempty"`
	// Nodes within this result-set.
	Result []*GatewayListItem `protobuf:"bytes,2,rep,name=result" json:"result,omitempty"`
}

func (m *ListGatewayResponse) Reset()                    { *m = ListGatewayResponse{} }
func (m *ListGatewayResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayResponse) ProtoMessage()               {}
func (*ListGatewayResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *ListGatewayResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListGatewayResponse) GetResult() []*GatewayListItem {
	if m != nil {
		return m.Result
	}
	return nil
}

type ListGatewayLocationsResponse struct {
	// Nodes within this result-set.
	Result []*GatewayLocationListItem `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *ListGatewayLocationsResponse) Reset()                    { *m = ListGatewayLocationsResponse{} }
func (m *ListGatewayLocationsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGatewayLocationsResponse) ProtoMessage()               {}
func (*ListGatewayLocationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *ListGatewayLocationsResponse) GetResult() []*GatewayLocationListItem {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateGatewayRequest struct {
	// Gateway object to update.
	Gateway *Gateway `protobuf:"bytes,1,opt,name=gateway" json:"gateway,omitempty"`
}

func (m *UpdateGatewayRequest) Reset()                    { *m = UpdateGatewayRequest{} }
func (m *UpdateGatewayRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGatewayRequest) ProtoMessage()               {}
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *UpdateGatewayRequest) GetGateway() *Gateway {
	if m != nil {
		return m.Gateway
	}
	return nil
}

type GatewayStats struct {
	// Timestamp of the (aggregated) measurement.
	Timestamp *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=timestamp" json:"timestamp,omitempty"`
	// Packets received by the gateway.
	RxPacketsReceived int32 `protobuf:"varint,2,opt,name=rx_packets_received,json=rxPacketsReceived" json:"rx_packets_received,omitempty"`
	// Packets received by the gateway that passed the CRC check.
	RxPacketsReceivedOk int32 `protobuf:"varint,3,opt,name=rx_packets_received_ok,json=rxPacketsReceivedOK" json:"rx_packets_received_ok,omitempty"`
	// Packets received by the gateway for transmission.
	TxPacketsReceived int32 `protobuf:"varint,4,opt,name=tx_packets_received,json=txPacketsReceived" json:"tx_packets_received,omitempty"`
	// Packets transmitted by the gateway.
	TxPacketsEmitted int32 `protobuf:"varint,5,opt,name=tx_packets_emitted,json=txPacketsEmitted" json:"tx_packets_emitted,omitempty"`
}

func (m *GatewayStats) Reset()                    { *m = GatewayStats{} }
func (m *GatewayStats) String() string            { return proto.CompactTextString(m) }
func (*GatewayStats) ProtoMessage()               {}
func (*GatewayStats) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *GatewayStats) GetTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *GatewayStats) GetRxPacketsReceived() int32 {
	if m != nil {
		return m.RxPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetRxPacketsReceivedOk() int32 {
	if m != nil {
		return m.RxPacketsReceivedOk
	}
	return 0
}

func (m *GatewayStats) GetTxPacketsReceived() int32 {
	if m != nil {
		return m.TxPacketsReceived
	}
	return 0
}

func (m *GatewayStats) GetTxPacketsEmitted() int32 {
	if m != nil {
		return m.TxPacketsEmitted
	}
	return 0
}

type GetGatewayStatsRequest struct {
	// Gateway ID (HEX encoded).
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayID" json:"gateway_id,omitempty"`
	// Aggregation interval.  One of "second", "minute", "hour", "day", "week",
	// "month", "quarter", "year".  Case insensitive.
	Interval string `protobuf:"bytes,2,opt,name=interval" json:"interval,omitempty"`
	// Timestamp to start from.
	StartTimestamp *google_protobuf1.Timestamp `protobuf:"bytes,3,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	// Timestamp until to get from.
	EndTimestamp *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
}

func (m *GetGatewayStatsRequest) Reset()                    { *m = GetGatewayStatsRequest{} }
func (m *GetGatewayStatsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsRequest) ProtoMessage()               {}
func (*GetGatewayStatsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *GetGatewayStatsRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *GetGatewayStatsRequest) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *GetGatewayStatsRequest) GetStartTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.StartTimestamp
	}
	return nil
}

func (m *GetGatewayStatsRequest) GetEndTimestamp() *google_protobuf1.Timestamp {
	if m != nil {
		return m.EndTimestamp
	}
	return nil
}

type GetGatewayStatsResponse struct {
	Result []*GatewayStats `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *GetGatewayStatsResponse) Reset()                    { *m = GetGatewayStatsResponse{} }
func (m *GetGatewayStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetGatewayStatsResponse) ProtoMessage()               {}
func (*GetGatewayStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *GetGatewayStatsResponse) GetResult() []*GatewayStats {
	if m != nil {
		return m.Result
	}
	return nil
}

type PingRX struct {
	// Gateway ID (HEX encoded).
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayID" json:"gateway_id,omitempty"`
	// RSSI.
	Rssi int32 `protobuf:"varint,2,opt,name=rssi" json:"rssi,omitempty"`
	// LoRa SNR.
	LoraSnr float64 `protobuf:"fixed64,3,opt,name=lora_snr,json=loRaSNR" json:"lora_snr,omitempty"`
	// Latitude of the gateway -90.0 to 90.0.
	Latitude float64 `protobuf:"fixed64,4,opt,name=latitude" json:"latitude,omitempty"`
	// Longitude of the gateway -180.0 to 180.0.
	Longitude float64 `protobuf:"fixed64,5,opt,name=longitude" json:"longitude,omitempty"`
	// Altitude of the gateway in meters.
	Altitude float64 `protobuf:"fixed64,6,opt,name=altitude" json:"altitude,omitempty"`
}

func (m *PingRX) Reset()                    { *m = PingRX{} }
func (m *PingRX) String() string            { return proto.CompactTextString(m) }
func (*PingRX) ProtoMessage()               {}
func (*PingRX) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *PingRX) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *PingRX) GetRssi() int32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *PingRX) GetLoraSnr() float64 {
	if m != nil {
		return m.LoraSnr
	}
	return 0
}

func (m *PingRX) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

func (m *PingRX) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *PingRX) GetAltitude() float64 {
	if m != nil {
		return m.Altitude
	}
	return 0
}

type GetLastPingRequest struct {
	// Gateway ID (HEX encoded).
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayID" json:"gateway_id,omitempty"`
}

func (m *GetLastPingRequest) Reset()                    { *m = GetLastPingRequest{} }
func (m *GetLastPingRequest) String() string            { return proto.CompactTextString(m) }
func (*GetLastPingRequest) ProtoMessage()               {}
func (*GetLastPingRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *GetLastPingRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

type GetLastPingResponse struct {
	// Created at timestamp.
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Frequency (Hz).
	Frequency uint32 `protobuf:"varint,2,opt,name=frequency" json:"frequency,omitempty"`
	// Data-rate.
	Dr uint32 `protobuf:"varint,3,opt,name=dr" json:"dr,omitempty"`
	// Gateways and meta-data of reception.
	PingRx []*PingRX `protobuf:"bytes,4,rep,name=ping_rx,json=pingRX" json:"ping_rx,omitempty"`
}

func (m *GetLastPingResponse) Reset()                    { *m = GetLastPingResponse{} }
func (m *GetLastPingResponse) String() string            { return proto.CompactTextString(m) }
func (*GetLastPingResponse) ProtoMessage()               {}
func (*GetLastPingResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *GetLastPingResponse) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *GetLastPingResponse) GetFrequency() uint32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *GetLastPingResponse) GetDr() uint32 {
	if m != nil {
		return m.Dr
	}
	return 0
}

func (m *GetLastPingResponse) GetPingRx() []*PingRX {
	if m != nil {
		return m.PingRx
	}
	return nil
}

type StreamGatewayFrameLogsRequest struct {
	// Gateway ID (HEX encoded).
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayID" json:"gateway_id,omitempty"`
}

func (m *StreamGatewayFrameLogsRequest) Reset()                    { *m = StreamGatewayFrameLogsRequest{} }
func (m *StreamGatewayFrameLogsRequest) String() string            { return proto.CompactTextString(m) }
func (*StreamGatewayFrameLogsRequest) ProtoMessage()               {}
func (*StreamGatewayFrameLogsRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *StreamGatewayFrameLogsRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

type StreamGatewayFrameLogsResponse struct {
	// Types that are valid to be assigned to Frame:
	//	*StreamGatewayFrameLogsResponse_UplinkFrame
	//	*StreamGatewayFrameLogsResponse_DownlinkFrame
	Frame isStreamGatewayFrameLogsResponse_Frame `protobuf_oneof:"frame"`
}

func (m *StreamGatewayFrameLogsResponse) Reset()                    { *m = StreamGatewayFrameLogsResponse{} }
func (m *StreamGatewayFrameLogsResponse) String() string            { return proto.CompactTextString(m) }
func (*StreamGatewayFrameLogsResponse) ProtoMessage()               {}
func (*StreamGatewayFrameLogsResponse) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

type isStreamGatewayFrameLogsResponse_Frame interface{ isStreamGatewayFrameLogsResponse_Frame() }

type StreamGatewayFrameLogsResponse_UplinkFrame struct {
	UplinkFrame *UplinkFrameLog `protobuf:"bytes,1,opt,name=uplink_frame,json=uplinkFrame,oneof"`
}
type StreamGatewayFrameLogsResponse_DownlinkFrame struct {
	DownlinkFrame *DownlinkFrameLog `protobuf:"bytes,2,opt,name=downlink_frame,json=downlinkFrame,oneof"`
}

func (*StreamGatewayFrameLogsResponse_UplinkFrame) isStreamGatewayFrameLogsResponse_Frame()   {}
func (*StreamGatewayFrameLogsResponse_DownlinkFrame) isStreamGatewayFrameLogsResponse_Frame() {}

func (m *StreamGatewayFrameLogsResponse) GetFrame() isStreamGatewayFrameLogsResponse_Frame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (m *StreamGatewayFrameLogsResponse) GetUplinkFrame() *UplinkFrameLog {
	if x, ok := m.GetFrame().(*StreamGatewayFrameLogsResponse_UplinkFrame); ok {
		return x.UplinkFrame
	}
	return nil
}

func (m *StreamGatewayFrameLogsResponse) GetDownlinkFrame() *DownlinkFrameLog {
	if x, ok := m.GetFrame().(*StreamGatewayFrameLogsResponse_DownlinkFrame); ok {
		return x.DownlinkFrame
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamGatewayFrameLogsResponse) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamGatewayFrameLogsResponse_OneofMarshaler, _StreamGatewayFrameLogsResponse_OneofUnmarshaler, _StreamGatewayFrameLogsResponse_OneofSizer, []interface{}{
		(*StreamGatewayFrameLogsResponse_UplinkFrame)(nil),
		(*StreamGatewayFrameLogsResponse_DownlinkFrame)(nil),
	}
}

func _StreamGatewayFrameLogsResponse_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamGatewayFrameLogsResponse)
	// frame
	switch x := m.Frame.(type) {
	case *StreamGatewayFrameLogsResponse_UplinkFrame:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.UplinkFrame); err != nil {
			return err
		}
	case *StreamGatewayFrameLogsResponse_DownlinkFrame:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DownlinkFrame); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("StreamGatewayFrameLogsResponse.Frame has unexpected type %T", x)
	}
	return nil
}

func _StreamGatewayFrameLogsResponse_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamGatewayFrameLogsResponse)
	switch tag {
	case 1: // frame.uplink_frame
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(UplinkFrameLog)
		err := b.DecodeMessage(msg)
		m.Frame = &StreamGatewayFrameLogsResponse_UplinkFrame{msg}
		return true, err
	case 2: // frame.downlink_frame
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DownlinkFrameLog)
		err := b.DecodeMessage(msg)
		m.Frame = &StreamGatewayFrameLogsResponse_DownlinkFrame{msg}
		return true, err
	default:
		return false, nil
	}
}

func _StreamGatewayFrameLogsResponse_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamGatewayFrameLogsResponse)
	// frame
	switch x := m.Frame.(type) {
	case *StreamGatewayFrameLogsResponse_UplinkFrame:
		s := proto.Size(x.UplinkFrame)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamGatewayFrameLogsResponse_DownlinkFrame:
		s := proto.Size(x.DownlinkFrame)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Gateway)(nil), "api.Gateway")
	proto.RegisterType((*GatewayBoard)(nil), "api.GatewayBoard")
	proto.RegisterType((*CreateGatewayRequest)(nil), "api.CreateGatewayRequest")
	proto.RegisterType((*GetGatewayRequest)(nil), "api.GetGatewayRequest")
	proto.RegisterType((*GetGatewayResponse)(nil), "api.GetGatewayResponse")
	proto.RegisterType((*DeleteGatewayRequest)(nil), "api.DeleteGatewayRequest")
	proto.RegisterType((*ListGatewayRequest)(nil), "api.ListGatewayRequest")
	proto.RegisterType((*ListGatewayLocationsRequest)(nil), "api.ListGatewayLocationsRequest")
	proto.RegisterType((*GatewayListItem)(nil), "api.GatewayListItem")
	proto.RegisterType((*GatewayLocation)(nil), "api.GatewayLocation")
	proto.RegisterType((*GatewayLocationListItem)(nil), "api.GatewayLocationListItem")
	proto.RegisterType((*ListGatewayResponse)(nil), "api.ListGatewayResponse")
	proto.RegisterType((*ListGatewayLocationsResponse)(nil), "api.ListGatewayLocationsResponse")
	proto.RegisterType((*UpdateGatewayRequest)(nil), "api.UpdateGatewayRequest")
	proto.RegisterType((*GatewayStats)(nil), "api.GatewayStats")
	proto.RegisterType((*GetGatewayStatsRequest)(nil), "api.GetGatewayStatsRequest")
	proto.RegisterType((*GetGatewayStatsResponse)(nil), "api.GetGatewayStatsResponse")
	proto.RegisterType((*PingRX)(nil), "api.PingRX")
	proto.RegisterType((*GetLastPingRequest)(nil), "api.GetLastPingRequest")
	proto.RegisterType((*GetLastPingResponse)(nil), "api.GetLastPingResponse")
	proto.RegisterType((*StreamGatewayFrameLogsRequest)(nil), "api.StreamGatewayFrameLogsRequest")
	proto.RegisterType((*StreamGatewayFrameLogsResponse)(nil), "api.StreamGatewayFrameLogsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GatewayService service

type GatewayServiceClient interface {
	// Create creates the given gateway.
	Create(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// Get returns the gateway for the requested mac address.
	Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error)
	// Update updates the gateway matching the given mac address.
	Update(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// Delete deletes the gateway matching the given mac address.
	Delete(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	// List lists the gateways.
	List(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error)
	// ListLocations lists the gateways locations.
	ListLocations(ctx context.Context, in *ListGatewayLocationsRequest, opts ...grpc.CallOption) (*ListGatewayLocationsResponse, error)
	// GetStats lists the gateway stats given the query parameters.
	GetStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error)
	// GetLastPing returns the last emitted ping and gateways receiving this ping.
	GetLastPing(ctx context.Context, in *GetLastPingRequest, opts ...grpc.CallOption) (*GetLastPingResponse, error)
	// StreamFrameLogs streams the uplink and downlink frame-logs for the given gateway ID.
	// Notes:
	//   * These are the raw LoRaWAN frames and this endpoint is intended for debugging only.
	//   * This endpoint does not work from a web-browser.
	StreamFrameLogs(ctx context.Context, in *StreamGatewayFrameLogsRequest, opts ...grpc.CallOption) (GatewayService_StreamFrameLogsClient, error)
}

type gatewayServiceClient struct {
	cc *grpc.ClientConn
}

func NewGatewayServiceClient(cc *grpc.ClientConn) GatewayServiceClient {
	return &gatewayServiceClient{cc}
}

func (c *gatewayServiceClient) Create(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.GatewayService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Get(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error) {
	out := new(GetGatewayResponse)
	err := grpc.Invoke(ctx, "/api.GatewayService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Update(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.GatewayService/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) Delete(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.GatewayService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) List(ctx context.Context, in *ListGatewayRequest, opts ...grpc.CallOption) (*ListGatewayResponse, error) {
	out := new(ListGatewayResponse)
	err := grpc.Invoke(ctx, "/api.GatewayService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) ListLocations(ctx context.Context, in *ListGatewayLocationsRequest, opts ...grpc.CallOption) (*ListGatewayLocationsResponse, error) {
	out := new(ListGatewayLocationsResponse)
	err := grpc.Invoke(ctx, "/api.GatewayService/ListLocations", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error) {
	out := new(GetGatewayStatsResponse)
	err := grpc.Invoke(ctx, "/api.GatewayService/GetStats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) GetLastPing(ctx context.Context, in *GetLastPingRequest, opts ...grpc.CallOption) (*GetLastPingResponse, error) {
	out := new(GetLastPingResponse)
	err := grpc.Invoke(ctx, "/api.GatewayService/GetLastPing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayServiceClient) StreamFrameLogs(ctx context.Context, in *StreamGatewayFrameLogsRequest, opts ...grpc.CallOption) (GatewayService_StreamFrameLogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GatewayService_serviceDesc.Streams[0], c.cc, "/api.GatewayService/StreamFrameLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayServiceStreamFrameLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GatewayService_StreamFrameLogsClient interface {
	Recv() (*StreamGatewayFrameLogsResponse, error)
	grpc.ClientStream
}

type gatewayServiceStreamFrameLogsClient struct {
	grpc.ClientStream
}

func (x *gatewayServiceStreamFrameLogsClient) Recv() (*StreamGatewayFrameLogsResponse, error) {
	m := new(StreamGatewayFrameLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GatewayService service

type GatewayServiceServer interface {
	// Create creates the given gateway.
	Create(context.Context, *CreateGatewayRequest) (*google_protobuf2.Empty, error)
	// Get returns the gateway for the requested mac address.
	Get(context.Context, *GetGatewayRequest) (*GetGatewayResponse, error)
	// Update updates the gateway matching the given mac address.
	Update(context.Context, *UpdateGatewayRequest) (*google_protobuf2.Empty, error)
	// Delete deletes the gateway matching the given mac address.
	Delete(context.Context, *DeleteGatewayRequest) (*google_protobuf2.Empty, error)
	// List lists the gateways.
	List(context.Context, *ListGatewayRequest) (*ListGatewayResponse, error)
	// ListLocations lists the gateways locations.
	ListLocations(context.Context, *ListGatewayLocationsRequest) (*ListGatewayLocationsResponse, error)
	// GetStats lists the gateway stats given the query parameters.
	GetStats(context.Context, *GetGatewayStatsRequest) (*GetGatewayStatsResponse, error)
	// GetLastPing returns the last emitted ping and gateways receiving this ping.
	GetLastPing(context.Context, *GetLastPingRequest) (*GetLastPingResponse, error)
	// StreamFrameLogs streams the uplink and downlink frame-logs for the given gateway ID.
	// Notes:
	//   * These are the raw LoRaWAN frames and this endpoint is intended for debugging only.
	//   * This endpoint does not work from a web-browser.
	StreamFrameLogs(*StreamGatewayFrameLogsRequest, GatewayService_StreamFrameLogsServer) error
}

func RegisterGatewayServiceServer(s *grpc.Server, srv GatewayServiceServer) {
	s.RegisterService(&_GatewayService_serviceDesc, srv)
}

func _GatewayService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Create(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Get(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Update(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).Delete(ctx, req.(*DeleteGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).List(ctx, req.(*ListGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGatewayLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayService/ListLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).ListLocations(ctx, req.(*ListGatewayLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayService/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetStats(ctx, req.(*GetGatewayStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_GetLastPing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServiceServer).GetLastPing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.GatewayService/GetLastPing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServiceServer).GetLastPing(ctx, req.(*GetLastPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayService_StreamFrameLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamGatewayFrameLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServiceServer).StreamFrameLogs(m, &gatewayServiceStreamFrameLogsServer{stream})
}

type GatewayService_StreamFrameLogsServer interface {
	Send(*StreamGatewayFrameLogsResponse) error
	grpc.ServerStream
}

type gatewayServiceStreamFrameLogsServer struct {
	grpc.ServerStream
}

func (x *gatewayServiceStreamFrameLogsServer) Send(m *StreamGatewayFrameLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _GatewayService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.GatewayService",
	HandlerType: (*GatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _GatewayService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _GatewayService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GatewayService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GatewayService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GatewayService_List_Handler,
		},
		{
			MethodName: "ListLocations",
			Handler:    _GatewayService_ListLocations_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _GatewayService_GetStats_Handler,
		},
		{
			MethodName: "GetLastPing",
			Handler:    _GatewayService_GetLastPing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFrameLogs",
			Handler:       _GatewayService_StreamFrameLogs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gateway.proto",
}

func init() { proto.RegisterFile("gateway.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x73, 0xdb, 0x44,
	0x14, 0x47, 0xfe, 0x23, 0xc7, 0xcf, 0x71, 0xfe, 0x6c, 0xd2, 0xc4, 0x71, 0x53, 0xea, 0xaa, 0xb4,
	0x4d, 0x4b, 0x1a, 0x77, 0x52, 0x0e, 0x85, 0x61, 0xc2, 0xb4, 0x75, 0x09, 0x99, 0x66, 0x20, 0xa3,
	0x34, 0x03, 0x37, 0xcd, 0xc6, 0x5a, 0x9b, 0x9d, 0xc8, 0x5a, 0xb1, 0xbb, 0x4e, 0x1b, 0x98, 0x5e,
	0xe0, 0xc0, 0x81, 0x23, 0x1f, 0x01, 0x66, 0xb8, 0x70, 0xe0, 0x93, 0x70, 0xe1, 0x02, 0x77, 0x3e,
	0x08, 0xa3, 0xdd, 0xb5, 0x2c, 0xdb, 0xaa, 0x93, 0xb6, 0x5c, 0x12, 0xef, 0xfb, 0xbf, 0xef, 0xbd,
	0xfd, 0xbd, 0x27, 0xa8, 0x76, 0xb1, 0x24, 0xcf, 0xf1, 0xd9, 0x56, 0xc4, 0x99, 0x64, 0x28, 0x8f,
	0x23, 0x5a, 0x5f, 0xef, 0x32, 0xd6, 0x0d, 0x48, 0x13, 0x47, 0xb4, 0x89, 0xc3, 0x90, 0x49, 0x2c,
	0x29, 0x0b, 0x85, 0x16, 0xa9, 0xaf, 0x49, 0xda, 0x23, 0x42, 0xe2, 0x5e, 0xd4, 0x4c, 0x7e, 0x19,
	0xd6, 0x22, 0xe9, 0x45, 0xf2, 0xac, 0xa9, 0xfe, 0x1a, 0xd2, 0x6c, 0x9b, 0xf5, 0x7a, 0x2c, 0x34,
	0xa7, 0xd5, 0xd8, 0xa4, 0xa6, 0x34, 0xd3, 0x0c, 0xe7, 0xef, 0x1c, 0x94, 0x76, 0x75, 0x24, 0x68,
	0x0e, 0x72, 0xd4, 0xaf, 0x59, 0x0d, 0x6b, 0xa3, 0xec, 0xe6, 0xa8, 0x8f, 0x10, 0x14, 0x42, 0xdc,
	0x23, 0xb5, 0x9c, 0xa2, 0xa8, 0xdf, 0xa8, 0x01, 0x15, 0x9f, 0x88, 0x36, 0xa7, 0x51, 0x1c, 0x5a,
	0x2d, 0xaf, 0x58, 0x69, 0x12, 0xda, 0x84, 0x99, 0x80, 0xb5, 0x55, 0xe4, 0xb5, 0x42, 0xc3, 0xda,
	0xa8, 0x6c, 0x2f, 0x6c, 0x19, 0x97, 0xfb, 0x86, 0xee, 0x26, 0x12, 0xe8, 0x16, 0xcc, 0x33, 0xde,
	0xc5, 0x21, 0xfd, 0x56, 0x9d, 0x3d, 0xea, 0xd7, 0x8a, 0x0d, 0x6b, 0x23, 0xef, 0xce, 0xa5, 0xc9,
	0x7b, 0x2d, 0xf4, 0x3e, 0x2c, 0xfa, 0x54, 0xb4, 0xd9, 0x29, 0xe1, 0x67, 0x1e, 0x09, 0xf1, 0x71,
	0x40, 0xfc, 0x9a, 0xdd, 0xb0, 0x36, 0x66, 0xdc, 0x85, 0x84, 0xf1, 0x44, 0xd3, 0xd1, 0x1d, 0x58,
	0x0c, 0x89, 0x7c, 0xce, 0xf8, 0x89, 0x27, 0x08, 0x3f, 0x25, 0x3c, 0xb6, 0x5b, 0x52, 0x76, 0xe7,
	0x0d, 0xe3, 0x50, 0xd1, 0xf7, 0x5a, 0x68, 0x13, 0x90, 0x29, 0x85, 0x17, 0x71, 0xd6, 0xa1, 0x01,
	0x89, 0x85, 0x67, 0xd4, 0xc5, 0x16, 0x0c, 0xe7, 0x40, 0x33, 0xf6, 0x5a, 0xe8, 0x36, 0xd8, 0xc7,
	0x0c, 0x73, 0x5f, 0xd4, 0xca, 0x8d, 0xfc, 0x46, 0x65, 0x7b, 0x71, 0x0b, 0x47, 0x74, 0xcb, 0x64,
	0xf0, 0x51, 0xcc, 0x71, 0x8d, 0x80, 0x73, 0x04, 0xb3, 0x69, 0x3a, 0x5a, 0x85, 0x52, 0x27, 0xea,
	0x62, 0x2f, 0xc9, 0xb1, 0x1d, 0x1f, 0x75, 0x04, 0x1d, 0x1a, 0x12, 0x2f, 0xa9, 0xaa, 0x77, 0x42,
	0xce, 0x4c, 0xd6, 0x17, 0x62, 0xce, 0xb3, 0x01, 0xe3, 0x29, 0x39, 0x73, 0x76, 0x60, 0xf9, 0x31,
	0x27, 0x58, 0x12, 0x63, 0xdc, 0x25, 0xdf, 0xf4, 0x89, 0x90, 0xe8, 0x26, 0x94, 0x4c, 0xb4, 0xca,
	0x7c, 0x65, 0x7b, 0x36, 0x1d, 0x9a, 0x3b, 0x60, 0x3a, 0xd7, 0x61, 0x71, 0x97, 0xc8, 0x31, 0xe5,
	0xb1, 0xd2, 0x3b, 0x7f, 0xe4, 0x00, 0xa5, 0xa5, 0x44, 0xc4, 0x42, 0x41, 0x2e, 0xea, 0x03, 0x7d,
	0x08, 0xd0, 0x56, 0x31, 0xfa, 0x1e, 0x96, 0xea, 0x26, 0x95, 0xed, 0xfa, 0x96, 0xee, 0x6e, 0xdd,
	0x78, 0xc7, 0xfd, 0xce, 0x56, 0x72, 0x2d, 0xb7, 0x6c, 0xa4, 0x1f, 0xca, 0x58, 0xb5, 0x1f, 0xf9,
	0x03, 0xd5, 0xfc, 0xf9, 0xaa, 0x46, 0xfa, 0xa1, 0x44, 0x3b, 0x50, 0xed, 0x50, 0x2e, 0xa4, 0x27,
	0x08, 0x09, 0x63, 0xed, 0xc2, 0xb9, 0xda, 0x15, 0xa5, 0x70, 0x48, 0x48, 0xf8, 0x50, 0xa2, 0x8f,
	0x61, 0x36, 0xc0, 0x29, 0xf5, 0xe2, 0xb9, 0xea, 0x10, 0xcb, 0x6b, 0x6d, 0xe7, 0x26, 0x2c, 0xb7,
	0x48, 0x40, 0x26, 0xea, 0x32, 0x9e, 0xda, 0x1f, 0x2c, 0x40, 0xfb, 0x54, 0x8c, 0x57, 0x60, 0x19,
	0x8a, 0x01, 0xed, 0x51, 0xa9, 0x24, 0x8b, 0xae, 0x3e, 0xa0, 0x15, 0xb0, 0x59, 0xa7, 0x23, 0x88,
	0x4e, 0x62, 0xd1, 0x35, 0xa7, 0xac, 0x67, 0x93, 0xcf, 0x7c, 0x36, 0x2b, 0x60, 0x0b, 0x82, 0x79,
	0xfb, 0x6b, 0x95, 0x8c, 0xb2, 0x6b, 0x4e, 0xce, 0x15, 0xb8, 0x9c, 0x0a, 0x62, 0xf0, 0x30, 0x85,
	0x89, 0xc6, 0xf9, 0x33, 0x0f, 0xf3, 0x03, 0x1e, 0x15, 0x72, 0x4f, 0x92, 0xde, 0xff, 0x04, 0x0f,
	0xa3, 0xad, 0x51, 0x78, 0xf3, 0xd6, 0x28, 0xbe, 0x55, 0x6b, 0xcc, 0xbc, 0x5d, 0x6b, 0x94, 0x5f,
	0xa7, 0x35, 0xb2, 0xaa, 0x65, 0x67, 0x56, 0xeb, 0xf5, 0x70, 0x6b, 0x88, 0xb3, 0x70, 0x1e, 0xce,
	0x3a, 0xdd, 0x61, 0x3d, 0x07, 0xd0, 0x5b, 0x87, 0x99, 0x00, 0x4b, 0x2a, 0xfb, 0x3e, 0x51, 0x55,
	0xb5, 0xdc, 0xe4, 0x8c, 0xd6, 0xa1, 0x1c, 0xb0, 0xb0, 0xab, 0x99, 0x39, 0xc5, 0x1c, 0x12, 0x62,
	0x4d, 0x1c, 0x18, 0xcd, 0xbc, 0xd6, 0x1c, 0x9c, 0x9d, 0xa7, 0xb0, 0x3a, 0xe6, 0x28, 0x69, 0xa0,
	0x7b, 0x13, 0x11, 0x2f, 0xa7, 0xe1, 0x23, 0x23, 0x6a, 0x1f, 0x96, 0x46, 0x9e, 0x8a, 0x81, 0xa1,
	0xab, 0x50, 0x91, 0x4c, 0xe2, 0xc0, 0x6b, 0xb3, 0x7e, 0xa8, 0x5f, 0x4c, 0xde, 0x05, 0x45, 0x7a,
	0x1c, 0x53, 0xd0, 0x26, 0xd8, 0x9c, 0x88, 0x7e, 0x10, 0x3f, 0x9b, 0xfc, 0x84, 0x1f, 0x13, 0x8f,
	0x6b, 0x64, 0x9c, 0x67, 0xb0, 0x9e, 0xfd, 0x16, 0x8c, 0xbb, 0x0f, 0x12, 0x6b, 0x96, 0xb2, 0xb6,
	0x9e, 0x15, 0xf5, 0x84, 0xd5, 0x1d, 0x58, 0x3e, 0x52, 0xfd, 0xf7, 0x86, 0x38, 0xfd, 0x53, 0x2e,
	0x99, 0x1f, 0x87, 0x12, 0x4b, 0x81, 0x1e, 0x40, 0x39, 0x99, 0x10, 0x46, 0x75, 0x6a, 0xf7, 0x27,
	0xc2, 0x68, 0x0b, 0x96, 0xf8, 0x0b, 0x2f, 0xc2, 0xed, 0x13, 0x22, 0x85, 0xc7, 0x49, 0x9b, 0xd0,
	0x53, 0xe2, 0x1b, 0x48, 0x59, 0xe4, 0x2f, 0x0e, 0x34, 0xc7, 0x35, 0x0c, 0x74, 0x1f, 0x56, 0x32,
	0xe4, 0x3d, 0x76, 0xa2, 0xaa, 0x5d, 0x74, 0x97, 0x26, 0x54, 0xbe, 0x78, 0x1a, 0x3b, 0x91, 0x19,
	0x4e, 0x0a, 0xda, 0x89, 0x9c, 0x70, 0xb2, 0x09, 0x28, 0x25, 0x4f, 0x7a, 0x54, 0x4a, 0xa2, 0x87,
	0x7f, 0xd1, 0x5d, 0x48, 0xc4, 0x9f, 0x68, 0xba, 0xf3, 0x8f, 0x05, 0x2b, 0xc3, 0x81, 0xa4, 0x12,
	0x32, 0x48, 0xe8, 0x15, 0x80, 0xc1, 0x00, 0x4f, 0xf0, 0xa9, 0x6c, 0x28, 0x7b, 0xad, 0xb8, 0x59,
	0x69, 0x28, 0x09, 0x3f, 0xc5, 0x81, 0x81, 0xaa, 0xe4, 0x8c, 0x1e, 0xc3, 0xbc, 0x90, 0x98, 0xcb,
	0xe1, 0xe8, 0xbd, 0xc0, 0xc4, 0x99, 0x53, 0x2a, 0xc9, 0x19, 0x7d, 0x02, 0x55, 0x12, 0xfa, 0x29,
	0x13, 0xe7, 0x83, 0xda, 0x2c, 0x09, 0xfd, 0xe4, 0xe4, 0xb4, 0x60, 0x75, 0xe2, 0x6a, 0xa6, 0xf5,
	0x6e, 0x8f, 0xb5, 0xde, 0xc8, 0xba, 0xa1, 0x45, 0x07, 0xfd, 0xf6, 0xbb, 0x05, 0xf6, 0x01, 0x0d,
	0xbb, 0xee, 0x57, 0xe7, 0x65, 0x04, 0x41, 0x81, 0x0b, 0x41, 0x4d, 0xfd, 0xd5, 0x6f, 0xb4, 0x16,
	0xbf, 0x4d, 0x8e, 0x3d, 0x11, 0x72, 0xf3, 0xa4, 0x4b, 0x01, 0x73, 0xf1, 0xe1, 0xe7, 0xee, 0x08,
	0x4e, 0x14, 0xa6, 0xe1, 0x44, 0x71, 0x1a, 0x4e, 0xd8, 0x63, 0x38, 0x71, 0x5f, 0x2d, 0x18, 0xfb,
	0x58, 0x48, 0x15, 0xf4, 0x85, 0x6a, 0xe9, 0xfc, 0x6a, 0xc1, 0xd2, 0x88, 0x96, 0x49, 0xd3, 0xe8,
	0x50, 0xb1, 0x5e, 0x67, 0xa8, 0xac, 0x43, 0xb9, 0xc3, 0x63, 0xef, 0x61, 0x5b, 0xef, 0x5c, 0x55,
	0x77, 0x48, 0x88, 0x67, 0x9e, 0xaf, 0x13, 0x52, 0x75, 0x73, 0x3e, 0x47, 0xef, 0x41, 0x29, 0xa2,
	0x61, 0xd7, 0xe3, 0x2f, 0x6a, 0x05, 0x55, 0x90, 0x8a, 0x2a, 0x88, 0xce, 0xbb, 0x6b, 0x47, 0xea,
	0xbf, 0xb3, 0x03, 0x57, 0x0e, 0x25, 0x27, 0xb8, 0x67, 0x0a, 0xf5, 0x29, 0xc7, 0x3d, 0xb2, 0xcf,
	0xba, 0x17, 0x6c, 0x59, 0xe7, 0x17, 0x0b, 0xde, 0x7d, 0x95, 0x01, 0x73, 0xe3, 0x07, 0x30, 0xdb,
	0x8f, 0x02, 0x1a, 0x9e, 0x78, 0x9d, 0x98, 0x67, 0xee, 0xbc, 0xa4, 0xa2, 0x39, 0x52, 0x8c, 0x81,
	0xce, 0x67, 0xef, 0xb8, 0x95, 0xfe, 0x90, 0x82, 0x76, 0x60, 0xce, 0x67, 0xcf, 0xc3, 0x94, 0xae,
	0xde, 0xcf, 0x2e, 0x29, 0xdd, 0x96, 0x61, 0xa5, 0xb4, 0xab, 0x7e, 0x9a, 0xf6, 0xa8, 0x04, 0x45,
	0xa5, 0xb6, 0xfd, 0x5b, 0x09, 0xe6, 0x06, 0x9d, 0x48, 0xf8, 0x29, 0x6d, 0x13, 0x74, 0x04, 0xb6,
	0xde, 0x4d, 0xd1, 0x9a, 0xb2, 0x96, 0xb5, 0xa8, 0xd6, 0x57, 0x26, 0x0a, 0xf3, 0x24, 0xfe, 0x6e,
	0x71, 0x6a, 0xdf, 0xff, 0xf5, 0xef, 0xcf, 0x39, 0xe4, 0x54, 0xd5, 0xf7, 0x8f, 0xc9, 0x86, 0xf8,
	0xc8, 0xba, 0x83, 0x5c, 0xc8, 0xef, 0x12, 0x89, 0x56, 0x74, 0xf3, 0x8f, 0x2f, 0xaf, 0xf5, 0xd5,
	0x09, 0xba, 0x4e, 0x92, 0x53, 0x57, 0x16, 0x97, 0x11, 0x1a, 0xb1, 0xd8, 0xfc, 0x8e, 0xfa, 0x2f,
	0xd1, 0x31, 0xd8, 0x1a, 0x9e, 0x4d, 0xa8, 0x59, 0x58, 0xfd, 0xca, 0x50, 0x6f, 0x28, 0xc3, 0x57,
	0xeb, 0xf5, 0x31, 0xc3, 0x83, 0x6f, 0x3a, 0xea, 0xbf, 0x8c, 0xe3, 0xfe, 0x12, 0x6c, 0xbd, 0x12,
	0x1a, 0x1f, 0x59, 0xfb, 0xe1, 0x2b, 0x7d, 0x98, 0xe0, 0xef, 0x64, 0x05, 0x7f, 0x00, 0x85, 0x78,
	0xde, 0x20, 0x7d, 0xf3, 0xc9, 0x6d, 0xb2, 0x5e, 0x9b, 0x64, 0x98, 0x9c, 0x5c, 0x52, 0x66, 0xe7,
	0xd1, 0x68, 0x96, 0x11, 0x83, 0x6a, 0x2c, 0x9d, 0x0c, 0x3f, 0xd4, 0x18, 0xb7, 0x30, 0xbe, 0x23,
	0xd6, 0xaf, 0x4d, 0x91, 0x30, 0xce, 0xd6, 0x94, 0xb3, 0x25, 0xb4, 0x38, 0xe2, 0xec, 0x6e, 0xc0,
	0xda, 0x88, 0xc1, 0xcc, 0x2e, 0x91, 0x7a, 0xb2, 0x5d, 0x1e, 0x2b, 0x60, 0x1a, 0xde, 0xeb, 0xeb,
	0xd9, 0x4c, 0xe3, 0x61, 0x43, 0x79, 0x70, 0x50, 0x23, 0xbb, 0x12, 0x1e, 0xf5, 0x5f, 0x36, 0x85,
	0x72, 0xc2, 0xa0, 0x92, 0x82, 0x0e, 0x94, 0x34, 0xcd, 0x18, 0x04, 0x99, 0xd4, 0x65, 0xa0, 0x8c,
	0x73, 0x57, 0xf9, 0xba, 0x85, 0x6e, 0x4c, 0xf1, 0x15, 0x23, 0x80, 0x68, 0xc6, 0xbb, 0x1f, 0xfa,
	0xd1, 0x82, 0x79, 0xfd, 0x8a, 0x93, 0xe7, 0x8b, 0x1c, 0x65, 0x7c, 0x2a, 0x38, 0xd4, 0xaf, 0x4f,
	0x95, 0x31, 0xb1, 0xdc, 0x56, 0xb1, 0x5c, 0x47, 0xd7, 0xa6, 0xc4, 0xa2, 0x9e, 0xa9, 0xb8, 0x67,
	0x1d, 0xdb, 0xaa, 0xb5, 0xee, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0xf5, 0x5a, 0xf7, 0xda, 0x74,
	0x10, 0x00, 0x00,
}
