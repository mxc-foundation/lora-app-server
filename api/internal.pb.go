// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf2 "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Language int32

const (
	Language_en   Language = 0
	Language_ko   Language = 1
	Language_zhcn Language = 2
	Language_zhtw Language = 3
	Language_ja   Language = 4
)

var Language_name = map[int32]string{
	0: "en",
	1: "ko",
	2: "zhcn",
	3: "zhtw",
	4: "ja",
}
var Language_value = map[string]int32{
	"en":   0,
	"ko":   1,
	"zhcn": 2,
	"zhtw": 3,
	"ja":   4,
}

func (x Language) String() string {
	return proto.EnumName(Language_name, int32(x))
}
func (Language) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

type GoogleRecaptchaRequest struct {
	Secret   string `protobuf:"bytes,1,opt,name=secret" json:"secret,omitempty"`
	Response string `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
	Remoteip string `protobuf:"bytes,3,opt,name=remoteip" json:"remoteip,omitempty"`
}

func (m *GoogleRecaptchaRequest) Reset()                    { *m = GoogleRecaptchaRequest{} }
func (m *GoogleRecaptchaRequest) String() string            { return proto.CompactTextString(m) }
func (*GoogleRecaptchaRequest) ProtoMessage()               {}
func (*GoogleRecaptchaRequest) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *GoogleRecaptchaRequest) GetSecret() string {
	if m != nil {
		return m.Secret
	}
	return ""
}

func (m *GoogleRecaptchaRequest) GetResponse() string {
	if m != nil {
		return m.Response
	}
	return ""
}

func (m *GoogleRecaptchaRequest) GetRemoteip() string {
	if m != nil {
		return m.Remoteip
	}
	return ""
}

type GoogleRecaptchaResponse struct {
	Success     bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	ChallengeTs string `protobuf:"bytes,2,opt,name=challenge_ts,json=challengeTs" json:"challenge_ts,omitempty"`
	Hostname    string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	ErrorCodes  string `protobuf:"bytes,4,opt,name=error_codes,json=errorCodes" json:"error_codes,omitempty"`
}

func (m *GoogleRecaptchaResponse) Reset()                    { *m = GoogleRecaptchaResponse{} }
func (m *GoogleRecaptchaResponse) String() string            { return proto.CompactTextString(m) }
func (*GoogleRecaptchaResponse) ProtoMessage()               {}
func (*GoogleRecaptchaResponse) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

func (m *GoogleRecaptchaResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *GoogleRecaptchaResponse) GetChallengeTs() string {
	if m != nil {
		return m.ChallengeTs
	}
	return ""
}

func (m *GoogleRecaptchaResponse) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *GoogleRecaptchaResponse) GetErrorCodes() string {
	if m != nil {
		return m.ErrorCodes
	}
	return ""
}

type ProfileSettings struct {
	// Existing users in the system can not be assigned to organizations and
	// application and can not be listed by non global admin users.
	DisableAssignExistingUsers bool `protobuf:"varint,1,opt,name=disable_assign_existing_users,json=disableAssignExistingUsers" json:"disable_assign_existing_users,omitempty"`
}

func (m *ProfileSettings) Reset()                    { *m = ProfileSettings{} }
func (m *ProfileSettings) String() string            { return proto.CompactTextString(m) }
func (*ProfileSettings) ProtoMessage()               {}
func (*ProfileSettings) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

func (m *ProfileSettings) GetDisableAssignExistingUsers() bool {
	if m != nil {
		return m.DisableAssignExistingUsers
	}
	return false
}

// Defines an organization to which an user is associated.
type OrganizationLink struct {
	// Organization ID.
	OrganizationId int64 `protobuf:"varint,1,opt,name=organization_id,json=organizationID" json:"organization_id,omitempty"`
	// Organization name.
	OrganizationName string `protobuf:"bytes,2,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	// User is admin within the context of this organization.
	// There is no need to set the is_device_admin and is_gateway_admin flags.
	IsAdmin bool `protobuf:"varint,3,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
	// User is able to modify device related resources (applications,
	// device-profiles, devices, multicast-groups).
	IsDeviceAdmin bool `protobuf:"varint,6,opt,name=is_device_admin,json=isDeviceAdmin" json:"is_device_admin,omitempty"`
	// User is able to modify gateways.
	IsGatewayAdmin bool `protobuf:"varint,7,opt,name=is_gateway_admin,json=isGatewayAdmin" json:"is_gateway_admin,omitempty"`
	// Created at timestamp.
	CreatedAt *google_protobuf1.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *google_protobuf1.Timestamp `protobuf:"bytes,5,opt,name=updated_at,json=updatedAt" json:"updated_at,omitempty"`
}

func (m *OrganizationLink) Reset()                    { *m = OrganizationLink{} }
func (m *OrganizationLink) String() string            { return proto.CompactTextString(m) }
func (*OrganizationLink) ProtoMessage()               {}
func (*OrganizationLink) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

func (m *OrganizationLink) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *OrganizationLink) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *OrganizationLink) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *OrganizationLink) GetIsDeviceAdmin() bool {
	if m != nil {
		return m.IsDeviceAdmin
	}
	return false
}

func (m *OrganizationLink) GetIsGatewayAdmin() bool {
	if m != nil {
		return m.IsGatewayAdmin
	}
	return false
}

func (m *OrganizationLink) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *OrganizationLink) GetUpdatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type LoginRequest struct {
	// Username of the user.
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	// Password of the user.
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *LoginRequest) Reset()                    { *m = LoginRequest{} }
func (m *LoginRequest) String() string            { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()               {}
func (*LoginRequest) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{4} }

func (m *LoginRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *LoginRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type LoginResponse struct {
	// The JWT tag to be used to access lora-app-server interfaces.
	Jwt string `protobuf:"bytes,1,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *LoginResponse) Reset()                    { *m = LoginResponse{} }
func (m *LoginResponse) String() string            { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()               {}
func (*LoginResponse) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{5} }

func (m *LoginResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type ProfileResponse struct {
	// User object.
	User *User `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	// Organizations to which the user is associated.
	Organizations []*OrganizationLink `protobuf:"bytes,3,rep,name=organizations" json:"organizations,omitempty"`
	// Profile settings.
	Settings *ProfileSettings `protobuf:"bytes,4,opt,name=settings" json:"settings,omitempty"`
}

func (m *ProfileResponse) Reset()                    { *m = ProfileResponse{} }
func (m *ProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*ProfileResponse) ProtoMessage()               {}
func (*ProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{6} }

func (m *ProfileResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ProfileResponse) GetOrganizations() []*OrganizationLink {
	if m != nil {
		return m.Organizations
	}
	return nil
}

func (m *ProfileResponse) GetSettings() *ProfileSettings {
	if m != nil {
		return m.Settings
	}
	return nil
}

type GlobalSearchRequest struct {
	// Search query.
	Search string `protobuf:"bytes,1,opt,name=search" json:"search,omitempty"`
	// Max number of results to return.
	Limit int64 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	// Offset offset of the result-set (for pagination).
	Offset int64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
}

func (m *GlobalSearchRequest) Reset()                    { *m = GlobalSearchRequest{} }
func (m *GlobalSearchRequest) String() string            { return proto.CompactTextString(m) }
func (*GlobalSearchRequest) ProtoMessage()               {}
func (*GlobalSearchRequest) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{7} }

func (m *GlobalSearchRequest) GetSearch() string {
	if m != nil {
		return m.Search
	}
	return ""
}

func (m *GlobalSearchRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *GlobalSearchRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GlobalSearchResponse struct {
	Result []*GlobalSearchResult `protobuf:"bytes,1,rep,name=result" json:"result,omitempty"`
}

func (m *GlobalSearchResponse) Reset()                    { *m = GlobalSearchResponse{} }
func (m *GlobalSearchResponse) String() string            { return proto.CompactTextString(m) }
func (*GlobalSearchResponse) ProtoMessage()               {}
func (*GlobalSearchResponse) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{8} }

func (m *GlobalSearchResponse) GetResult() []*GlobalSearchResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type GlobalSearchResult struct {
	// Record kind.
	Kind string `protobuf:"bytes,1,opt,name=kind" json:"kind,omitempty"`
	// Search score.
	Score float32 `protobuf:"fixed32,2,opt,name=score" json:"score,omitempty"`
	// Organization id.
	OrganizationId int64 `protobuf:"varint,3,opt,name=organization_id,json=organizationID" json:"organization_id,omitempty"`
	// Organization name.
	OrganizationName string `protobuf:"bytes,4,opt,name=organization_name,json=organizationName" json:"organization_name,omitempty"`
	// Application id.
	ApplicationId int64 `protobuf:"varint,5,opt,name=application_id,json=applicationID" json:"application_id,omitempty"`
	// Application name.
	ApplicationName string `protobuf:"bytes,6,opt,name=application_name,json=applicationName" json:"application_name,omitempty"`
	// Device DevEUI (hex encoded).
	DeviceDevEui string `protobuf:"bytes,7,opt,name=device_dev_eui,json=deviceDevEUI" json:"device_dev_eui,omitempty"`
	// Device name.
	DeviceName string `protobuf:"bytes,8,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	// Gateway MAC (hex encoded).
	GatewayMac string `protobuf:"bytes,9,opt,name=gateway_mac,json=gatewayMAC" json:"gateway_mac,omitempty"`
	// Gateway name.
	GatewayName string `protobuf:"bytes,10,opt,name=gateway_name,json=gatewayName" json:"gateway_name,omitempty"`
}

func (m *GlobalSearchResult) Reset()                    { *m = GlobalSearchResult{} }
func (m *GlobalSearchResult) String() string            { return proto.CompactTextString(m) }
func (*GlobalSearchResult) ProtoMessage()               {}
func (*GlobalSearchResult) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{9} }

func (m *GlobalSearchResult) GetKind() string {
	if m != nil {
		return m.Kind
	}
	return ""
}

func (m *GlobalSearchResult) GetScore() float32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *GlobalSearchResult) GetOrganizationId() int64 {
	if m != nil {
		return m.OrganizationId
	}
	return 0
}

func (m *GlobalSearchResult) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *GlobalSearchResult) GetApplicationId() int64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *GlobalSearchResult) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *GlobalSearchResult) GetDeviceDevEui() string {
	if m != nil {
		return m.DeviceDevEui
	}
	return ""
}

func (m *GlobalSearchResult) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *GlobalSearchResult) GetGatewayMac() string {
	if m != nil {
		return m.GatewayMac
	}
	return ""
}

func (m *GlobalSearchResult) GetGatewayName() string {
	if m != nil {
		return m.GatewayName
	}
	return ""
}

type BrandingResponse struct {
	// Logo html.
	Logo string `protobuf:"bytes,1,opt,name=logo" json:"logo,omitempty"`
	// Registration html.
	Registration string `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty"`
	// Footer html.
	Footer string `protobuf:"bytes,3,opt,name=footer" json:"footer,omitempty"`
	// Logo img path
	LogoPath string `protobuf:"bytes,4,opt,name=logo_path,json=logoPath" json:"logo_path,omitempty"`
}

func (m *BrandingResponse) Reset()                    { *m = BrandingResponse{} }
func (m *BrandingResponse) String() string            { return proto.CompactTextString(m) }
func (*BrandingResponse) ProtoMessage()               {}
func (*BrandingResponse) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{10} }

func (m *BrandingResponse) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *BrandingResponse) GetRegistration() string {
	if m != nil {
		return m.Registration
	}
	return ""
}

func (m *BrandingResponse) GetFooter() string {
	if m != nil {
		return m.Footer
	}
	return ""
}

func (m *BrandingResponse) GetLogoPath() string {
	if m != nil {
		return m.LogoPath
	}
	return ""
}

type RegisterUserRequest struct {
	Email    string   `protobuf:"bytes,1,opt,name=email" json:"email,omitempty"`
	Language Language `protobuf:"varint,2,opt,name=language,enum=api.Language" json:"language,omitempty"`
}

func (m *RegisterUserRequest) Reset()                    { *m = RegisterUserRequest{} }
func (m *RegisterUserRequest) String() string            { return proto.CompactTextString(m) }
func (*RegisterUserRequest) ProtoMessage()               {}
func (*RegisterUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{11} }

func (m *RegisterUserRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *RegisterUserRequest) GetLanguage() Language {
	if m != nil {
		return m.Language
	}
	return Language_en
}

type ConfirmRegistrationRequest struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *ConfirmRegistrationRequest) Reset()                    { *m = ConfirmRegistrationRequest{} }
func (m *ConfirmRegistrationRequest) String() string            { return proto.CompactTextString(m) }
func (*ConfirmRegistrationRequest) ProtoMessage()               {}
func (*ConfirmRegistrationRequest) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{12} }

func (m *ConfirmRegistrationRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ConfirmRegistrationResponse struct {
	Id         int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Username   string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	SessionTTL int32  `protobuf:"varint,3,opt,name=sessionTTL" json:"sessionTTL,omitempty"`
	IsAdmin    bool   `protobuf:"varint,4,opt,name=isAdmin" json:"isAdmin,omitempty"`
	IsActive   bool   `protobuf:"varint,5,opt,name=isActive" json:"isActive,omitempty"`
	Jwt        string `protobuf:"bytes,6,opt,name=jwt" json:"jwt,omitempty"`
}

func (m *ConfirmRegistrationResponse) Reset()                    { *m = ConfirmRegistrationResponse{} }
func (m *ConfirmRegistrationResponse) String() string            { return proto.CompactTextString(m) }
func (*ConfirmRegistrationResponse) ProtoMessage()               {}
func (*ConfirmRegistrationResponse) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{13} }

func (m *ConfirmRegistrationResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ConfirmRegistrationResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ConfirmRegistrationResponse) GetSessionTTL() int32 {
	if m != nil {
		return m.SessionTTL
	}
	return 0
}

func (m *ConfirmRegistrationResponse) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *ConfirmRegistrationResponse) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

func (m *ConfirmRegistrationResponse) GetJwt() string {
	if m != nil {
		return m.Jwt
	}
	return ""
}

type FinishRegistrationRequest struct {
	OrganizationName        string `protobuf:"bytes,1,opt,name=organizationName" json:"organizationName,omitempty"`
	OrganizationDisplayName string `protobuf:"bytes,2,opt,name=organizationDisplayName" json:"organizationDisplayName,omitempty"`
	UserId                  int64  `protobuf:"varint,3,opt,name=userId" json:"userId,omitempty"`
	Password                string `protobuf:"bytes,4,opt,name=password" json:"password,omitempty"`
}

func (m *FinishRegistrationRequest) Reset()                    { *m = FinishRegistrationRequest{} }
func (m *FinishRegistrationRequest) String() string            { return proto.CompactTextString(m) }
func (*FinishRegistrationRequest) ProtoMessage()               {}
func (*FinishRegistrationRequest) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{14} }

func (m *FinishRegistrationRequest) GetOrganizationName() string {
	if m != nil {
		return m.OrganizationName
	}
	return ""
}

func (m *FinishRegistrationRequest) GetOrganizationDisplayName() string {
	if m != nil {
		return m.OrganizationDisplayName
	}
	return ""
}

func (m *FinishRegistrationRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FinishRegistrationRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func init() {
	proto.RegisterType((*GoogleRecaptchaRequest)(nil), "api.GoogleRecaptchaRequest")
	proto.RegisterType((*GoogleRecaptchaResponse)(nil), "api.GoogleRecaptchaResponse")
	proto.RegisterType((*ProfileSettings)(nil), "api.ProfileSettings")
	proto.RegisterType((*OrganizationLink)(nil), "api.OrganizationLink")
	proto.RegisterType((*LoginRequest)(nil), "api.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "api.LoginResponse")
	proto.RegisterType((*ProfileResponse)(nil), "api.ProfileResponse")
	proto.RegisterType((*GlobalSearchRequest)(nil), "api.GlobalSearchRequest")
	proto.RegisterType((*GlobalSearchResponse)(nil), "api.GlobalSearchResponse")
	proto.RegisterType((*GlobalSearchResult)(nil), "api.GlobalSearchResult")
	proto.RegisterType((*BrandingResponse)(nil), "api.BrandingResponse")
	proto.RegisterType((*RegisterUserRequest)(nil), "api.RegisterUserRequest")
	proto.RegisterType((*ConfirmRegistrationRequest)(nil), "api.ConfirmRegistrationRequest")
	proto.RegisterType((*ConfirmRegistrationResponse)(nil), "api.ConfirmRegistrationResponse")
	proto.RegisterType((*FinishRegistrationRequest)(nil), "api.FinishRegistrationRequest")
	proto.RegisterEnum("api.Language", Language_name, Language_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for InternalService service

type InternalServiceClient interface {
	// Log in a user
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Get the current user's profile
	Profile(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ProfileResponse, error)
	// Get the branding for the UI
	Branding(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*BrandingResponse, error)
	// Perform a global search.
	GlobalSearch(ctx context.Context, in *GlobalSearchRequest, opts ...grpc.CallOption) (*GlobalSearchResponse, error)
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	ConfirmRegistration(ctx context.Context, in *ConfirmRegistrationRequest, opts ...grpc.CallOption) (*ConfirmRegistrationResponse, error)
	FinishRegistration(ctx context.Context, in *FinishRegistrationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error)
	GetVerifyingGoogleRecaptcha(ctx context.Context, in *GoogleRecaptchaRequest, opts ...grpc.CallOption) (*GoogleRecaptchaResponse, error)
}

type internalServiceClient struct {
	cc *grpc.ClientConn
}

func NewInternalServiceClient(cc *grpc.ClientConn) InternalServiceClient {
	return &internalServiceClient{cc}
}

func (c *internalServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := grpc.Invoke(ctx, "/api.InternalService/Login", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) Profile(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*ProfileResponse, error) {
	out := new(ProfileResponse)
	err := grpc.Invoke(ctx, "/api.InternalService/Profile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) Branding(ctx context.Context, in *google_protobuf2.Empty, opts ...grpc.CallOption) (*BrandingResponse, error) {
	out := new(BrandingResponse)
	err := grpc.Invoke(ctx, "/api.InternalService/Branding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GlobalSearch(ctx context.Context, in *GlobalSearchRequest, opts ...grpc.CallOption) (*GlobalSearchResponse, error) {
	out := new(GlobalSearchResponse)
	err := grpc.Invoke(ctx, "/api.InternalService/GlobalSearch", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.InternalService/RegisterUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) ConfirmRegistration(ctx context.Context, in *ConfirmRegistrationRequest, opts ...grpc.CallOption) (*ConfirmRegistrationResponse, error) {
	out := new(ConfirmRegistrationResponse)
	err := grpc.Invoke(ctx, "/api.InternalService/ConfirmRegistration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) FinishRegistration(ctx context.Context, in *FinishRegistrationRequest, opts ...grpc.CallOption) (*google_protobuf2.Empty, error) {
	out := new(google_protobuf2.Empty)
	err := grpc.Invoke(ctx, "/api.InternalService/FinishRegistration", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internalServiceClient) GetVerifyingGoogleRecaptcha(ctx context.Context, in *GoogleRecaptchaRequest, opts ...grpc.CallOption) (*GoogleRecaptchaResponse, error) {
	out := new(GoogleRecaptchaResponse)
	err := grpc.Invoke(ctx, "/api.InternalService/GetVerifyingGoogleRecaptcha", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for InternalService service

type InternalServiceServer interface {
	// Log in a user
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Get the current user's profile
	Profile(context.Context, *google_protobuf2.Empty) (*ProfileResponse, error)
	// Get the branding for the UI
	Branding(context.Context, *google_protobuf2.Empty) (*BrandingResponse, error)
	// Perform a global search.
	GlobalSearch(context.Context, *GlobalSearchRequest) (*GlobalSearchResponse, error)
	RegisterUser(context.Context, *RegisterUserRequest) (*google_protobuf2.Empty, error)
	ConfirmRegistration(context.Context, *ConfirmRegistrationRequest) (*ConfirmRegistrationResponse, error)
	FinishRegistration(context.Context, *FinishRegistrationRequest) (*google_protobuf2.Empty, error)
	GetVerifyingGoogleRecaptcha(context.Context, *GoogleRecaptchaRequest) (*GoogleRecaptchaResponse, error)
}

func RegisterInternalServiceServer(s *grpc.Server, srv InternalServiceServer) {
	s.RegisterService(&_InternalService_serviceDesc, srv)
}

func _InternalService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InternalService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InternalService/Profile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).Profile(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_Branding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf2.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).Branding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InternalService/Branding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).Branding(ctx, req.(*google_protobuf2.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GlobalSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GlobalSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GlobalSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InternalService/GlobalSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GlobalSearch(ctx, req.(*GlobalSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InternalService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_ConfirmRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).ConfirmRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InternalService/ConfirmRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).ConfirmRegistration(ctx, req.(*ConfirmRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_FinishRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).FinishRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InternalService/FinishRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).FinishRegistration(ctx, req.(*FinishRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternalService_GetVerifyingGoogleRecaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoogleRecaptchaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternalServiceServer).GetVerifyingGoogleRecaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.InternalService/GetVerifyingGoogleRecaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternalServiceServer).GetVerifyingGoogleRecaptcha(ctx, req.(*GoogleRecaptchaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InternalService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.InternalService",
	HandlerType: (*InternalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _InternalService_Login_Handler,
		},
		{
			MethodName: "Profile",
			Handler:    _InternalService_Profile_Handler,
		},
		{
			MethodName: "Branding",
			Handler:    _InternalService_Branding_Handler,
		},
		{
			MethodName: "GlobalSearch",
			Handler:    _InternalService_GlobalSearch_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _InternalService_RegisterUser_Handler,
		},
		{
			MethodName: "ConfirmRegistration",
			Handler:    _InternalService_ConfirmRegistration_Handler,
		},
		{
			MethodName: "FinishRegistration",
			Handler:    _InternalService_FinishRegistration_Handler,
		},
		{
			MethodName: "GetVerifyingGoogleRecaptcha",
			Handler:    _InternalService_GetVerifyingGoogleRecaptcha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal.proto",
}

func init() { proto.RegisterFile("internal.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 1313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x4e, 0x1b, 0x47,
	0x14, 0xae, 0x7f, 0x30, 0xe6, 0x00, 0xc6, 0x19, 0x08, 0x98, 0x25, 0x3f, 0x64, 0xd5, 0xfc, 0x91,
	0x02, 0x15, 0x95, 0xaa, 0x36, 0xbd, 0x72, 0x43, 0x82, 0x90, 0x68, 0x1a, 0x6d, 0x48, 0xa4, 0xaa,
	0x17, 0xd6, 0xb0, 0x1e, 0xaf, 0x27, 0xac, 0x67, 0xb6, 0x3b, 0x63, 0x68, 0xb8, 0xa9, 0x54, 0xa9,
	0xea, 0x03, 0xe4, 0x01, 0xfa, 0x0c, 0xbd, 0xe8, 0x53, 0xf4, 0xb2, 0xaf, 0xd0, 0xeb, 0x4a, 0x7d,
	0x83, 0x6a, 0xce, 0xcc, 0x6e, 0x76, 0xc1, 0x6e, 0x7b, 0x03, 0x7b, 0xce, 0xf9, 0xe6, 0x3b, 0x3f,
	0x73, 0xce, 0xf1, 0x40, 0x8b, 0x0b, 0xcd, 0x52, 0x41, 0xe3, 0x9d, 0x24, 0x95, 0x5a, 0x92, 0x1a,
	0x4d, 0xb8, 0x77, 0x23, 0x92, 0x32, 0x8a, 0xd9, 0x2e, 0x4d, 0xf8, 0x2e, 0x15, 0x42, 0x6a, 0xaa,
	0xb9, 0x14, 0xca, 0x42, 0xbc, 0x75, 0xcd, 0x47, 0x4c, 0x69, 0x3a, 0x4a, 0x76, 0xf3, 0x2f, 0x67,
	0xba, 0xc6, 0x46, 0x89, 0x7e, 0xbb, 0x8b, 0x7f, 0x9d, 0x0a, 0xc6, 0x8a, 0xa5, 0xf6, 0xdb, 0x1f,
	0xc2, 0xea, 0x01, 0x32, 0x07, 0x2c, 0xa4, 0x89, 0x0e, 0x87, 0x34, 0x60, 0xdf, 0x8d, 0x99, 0xd2,
	0x64, 0x15, 0x1a, 0x8a, 0x85, 0x29, 0xd3, 0x9d, 0xca, 0x66, 0xe5, 0xc1, 0x5c, 0xe0, 0x24, 0xe2,
	0x41, 0x33, 0x65, 0x2a, 0x91, 0x42, 0xb1, 0x4e, 0x15, 0x2d, 0xb9, 0x6c, 0x6d, 0x23, 0xa9, 0x19,
	0x4f, 0x3a, 0xb5, 0xcc, 0x66, 0x65, 0xff, 0x5d, 0x05, 0xd6, 0xae, 0xb8, 0x72, 0xe7, 0x3a, 0x30,
	0xab, 0xc6, 0x61, 0xc8, 0x94, 0x42, 0x67, 0xcd, 0x20, 0x13, 0xc9, 0x1d, 0x58, 0x08, 0x87, 0x34,
	0x8e, 0x99, 0x88, 0x58, 0x4f, 0x2b, 0xe7, 0x71, 0x3e, 0xd7, 0x1d, 0x2b, 0xe3, 0x74, 0x28, 0x95,
	0x16, 0x74, 0xc4, 0x32, 0xa7, 0x99, 0x4c, 0x6e, 0xc3, 0x3c, 0x4b, 0x53, 0x99, 0xf6, 0x42, 0xd9,
	0x67, 0xaa, 0x53, 0x47, 0x33, 0xa0, 0xea, 0x89, 0xd1, 0xf8, 0xc7, 0xb0, 0xf4, 0x22, 0x95, 0x03,
	0x1e, 0xb3, 0x97, 0x4c, 0x6b, 0x2e, 0x22, 0x45, 0xba, 0x70, 0xb3, 0xcf, 0x15, 0x3d, 0x89, 0x59,
	0x8f, 0x2a, 0xc5, 0x23, 0xd1, 0x63, 0xdf, 0x73, 0x65, 0x6c, 0x3d, 0x53, 0xb8, 0x2c, 0x44, 0xcf,
	0x81, 0xba, 0x88, 0x79, 0xea, 0x20, 0xaf, 0x0c, 0xc2, 0xff, 0xbd, 0x0a, 0xed, 0xaf, 0xd3, 0x88,
	0x0a, 0x7e, 0x81, 0xf7, 0x74, 0xc4, 0xc5, 0x29, 0xb9, 0x0f, 0x4b, 0xb2, 0xa0, 0xeb, 0xf1, 0x3e,
	0x32, 0xd5, 0x82, 0x56, 0x51, 0x7d, 0xb8, 0x4f, 0x1e, 0xc1, 0xb5, 0x12, 0x10, 0x33, 0xb3, 0x89,
	0xb7, 0x8b, 0x86, 0xe7, 0x26, 0xc3, 0x75, 0x68, 0x72, 0xd5, 0xa3, 0xfd, 0x11, 0x17, 0x98, 0x7d,
	0x33, 0x98, 0xe5, 0xaa, 0x6b, 0x44, 0x72, 0x0f, 0x96, 0xb8, 0xea, 0xf5, 0xd9, 0x19, 0x0f, 0x99,
	0x43, 0x34, 0x10, 0xb1, 0xc8, 0xd5, 0x3e, 0x6a, 0x2d, 0xee, 0x01, 0xb4, 0xb9, 0xea, 0x45, 0x54,
	0xb3, 0x73, 0xfa, 0xd6, 0x01, 0x67, 0x11, 0xd8, 0xe2, 0xea, 0xc0, 0xaa, 0x2d, 0xf2, 0x73, 0x80,
	0x30, 0x65, 0x54, 0xb3, 0x7e, 0x8f, 0x6a, 0xac, 0xe6, 0xfc, 0x9e, 0xb7, 0x63, 0x5b, 0xd3, 0x36,
	0xd4, 0xc9, 0x78, 0xb0, 0x73, 0x9c, 0xb5, 0x60, 0x30, 0xe7, 0xd0, 0x5d, 0x6d, 0x8e, 0x8e, 0x93,
	0x7e, 0x76, 0x74, 0xe6, 0xbf, 0x8f, 0x3a, 0x74, 0x57, 0xfb, 0xcf, 0x60, 0xe1, 0x48, 0x46, 0x5c,
	0x64, 0x9d, 0xe9, 0x41, 0xd3, 0x5c, 0x04, 0x96, 0xc5, 0xf6, 0x66, 0x2e, 0x1b, 0x5b, 0x42, 0x95,
	0x3a, 0x97, 0x69, 0x3f, 0xeb, 0xce, 0x4c, 0xf6, 0xef, 0xc0, 0xa2, 0xe3, 0x71, 0x6d, 0xd7, 0x86,
	0xda, 0x9b, 0xf3, 0xac, 0xbf, 0xcd, 0xa7, 0xff, 0x4b, 0x25, 0xef, 0x87, 0x1c, 0x75, 0x13, 0xea,
	0x86, 0x1e, 0x61, 0xf3, 0x7b, 0x73, 0x3b, 0x34, 0xe1, 0x3b, 0xe6, 0x9a, 0x03, 0x54, 0x93, 0x2f,
	0x60, 0xb1, 0x78, 0x29, 0xaa, 0x53, 0xdb, 0xac, 0x3d, 0x98, 0xdf, 0xbb, 0x8e, 0xb8, 0xcb, 0x4d,
	0x10, 0x94, 0xb1, 0xe4, 0x63, 0x68, 0x2a, 0xd7, 0x77, 0xae, 0x9c, 0x2b, 0x78, 0xee, 0x52, 0x4f,
	0x06, 0x39, 0xca, 0xff, 0x16, 0x96, 0x0f, 0x62, 0x79, 0x42, 0xe3, 0x97, 0x8c, 0xa6, 0xe1, 0xb0,
	0x34, 0xad, 0x46, 0xf1, 0x7e, 0x5a, 0x8d, 0x44, 0x56, 0x60, 0x26, 0xe6, 0x23, 0xae, 0xb1, 0x18,
	0xb5, 0xc0, 0x0a, 0x06, 0x2d, 0x07, 0x03, 0xc5, 0x34, 0xb6, 0x4c, 0x2d, 0x70, 0x92, 0x7f, 0x00,
	0x2b, 0x65, 0x72, 0x57, 0x82, 0x5d, 0x68, 0xa4, 0x4c, 0x8d, 0x63, 0x53, 0x2b, 0x93, 0xdc, 0x1a,
	0x06, 0x79, 0x09, 0x3a, 0x8e, 0x75, 0xe0, 0x60, 0xfe, 0xdf, 0x55, 0x20, 0x57, 0xcd, 0x84, 0x40,
	0xfd, 0x94, 0x8b, 0xbe, 0x8b, 0x11, 0xbf, 0x4d, 0x84, 0x2a, 0x94, 0xa9, 0xed, 0xf0, 0x6a, 0x60,
	0x85, 0x49, 0xc3, 0x52, 0xfb, 0xff, 0xc3, 0x52, 0x9f, 0x32, 0x2c, 0x77, 0xa1, 0x45, 0x93, 0x24,
	0xe6, 0x61, 0x4e, 0x3a, 0x83, 0xa4, 0x8b, 0x05, 0xed, 0xe1, 0x3e, 0x79, 0x08, 0xed, 0x22, 0x0c,
	0x29, 0x1b, 0x48, 0xb9, 0x54, 0xd0, 0x23, 0xe3, 0x87, 0xd0, 0x72, 0x03, 0xd6, 0x67, 0x67, 0x3d,
	0x36, 0xe6, 0x38, 0x39, 0x73, 0xc1, 0x82, 0xd5, 0xee, 0xb3, 0xb3, 0xa7, 0xaf, 0x0e, 0xcd, 0x1a,
	0x72, 0x28, 0xe4, 0x6a, 0xda, 0x35, 0x64, 0x55, 0xcf, 0xdd, 0x9e, 0xca, 0xe6, 0x6f, 0x44, 0xc3,
	0xce, 0x9c, 0x05, 0x38, 0xd5, 0x57, 0xdd, 0x27, 0x66, 0x0f, 0x66, 0x00, 0xa4, 0x00, 0xbb, 0x07,
	0x9d, 0xce, 0x70, 0xf8, 0x3f, 0x40, 0xfb, 0xcb, 0x94, 0x8a, 0x3e, 0x17, 0x51, 0x7e, 0x71, 0x04,
	0xea, 0xb1, 0x8c, 0x64, 0x56, 0x70, 0xf3, 0x4d, 0x7c, 0x58, 0x48, 0x59, 0xc4, 0x95, 0x4e, 0x31,
	0x0d, 0x37, 0x26, 0x25, 0x9d, 0x69, 0x90, 0x81, 0x94, 0x9a, 0xa5, 0x6e, 0xa3, 0x3a, 0x89, 0x6c,
	0xc0, 0x9c, 0xe1, 0xe8, 0x25, 0x54, 0x0f, 0x5d, 0x95, 0x9b, 0x46, 0xf1, 0x82, 0xea, 0xa1, 0xff,
	0x1a, 0x96, 0x03, 0x24, 0x61, 0x29, 0xce, 0x87, 0x6b, 0xcd, 0x15, 0x98, 0x61, 0x23, 0xca, 0x63,
	0x17, 0x84, 0x15, 0xc8, 0x43, 0x68, 0xc6, 0x54, 0x44, 0x63, 0x1a, 0xd9, 0x9b, 0x6f, 0xed, 0x2d,
	0x62, 0x53, 0x1d, 0x39, 0x65, 0x90, 0x9b, 0xfd, 0x3d, 0xf0, 0x9e, 0x48, 0x31, 0xe0, 0xe9, 0x28,
	0x28, 0xc4, 0x58, 0xa0, 0xd7, 0xf2, 0x94, 0x89, 0x8c, 0x1e, 0x05, 0xff, 0xd7, 0x0a, 0x6c, 0x4c,
	0x3c, 0xe4, 0x0a, 0xd3, 0x82, 0x6a, 0xbe, 0x7f, 0xab, 0xbc, 0x5f, 0xda, 0x29, 0xd5, 0x4b, 0x3b,
	0xe5, 0x16, 0x80, 0x62, 0x4a, 0x71, 0x29, 0x8e, 0x8f, 0x8f, 0xb0, 0x20, 0x33, 0x41, 0x41, 0x63,
	0x7e, 0xbd, 0xdc, 0xca, 0xc5, 0x92, 0x14, 0x36, 0xb0, 0x67, 0x96, 0x73, 0x37, 0xd4, 0xfc, 0x8c,
	0x61, 0xa7, 0x35, 0x83, 0x5c, 0xce, 0x96, 0x4f, 0xe3, 0xfd, 0xf2, 0xf9, 0xad, 0x02, 0xeb, 0xcf,
	0xb8, 0xe0, 0x6a, 0x38, 0x29, 0xcf, 0x2d, 0xb8, 0xd2, 0xcf, 0x2e, 0xe5, 0xab, 0x7d, 0xfe, 0x19,
	0xac, 0x15, 0x75, 0xfb, 0x5c, 0x25, 0xb1, 0xed, 0x12, 0x97, 0xdc, 0x34, 0xb3, 0xb9, 0x78, 0x93,
	0xf7, 0x61, 0x36, 0x6e, 0x4e, 0x2a, 0xed, 0xd5, 0x7a, 0x79, 0xaf, 0x6e, 0x7d, 0x0a, 0xcd, 0xec,
	0xd6, 0x48, 0x03, 0xaa, 0x4c, 0xb4, 0x3f, 0x30, 0xff, 0x4f, 0x65, 0xbb, 0x42, 0x9a, 0x50, 0xbf,
	0x18, 0x86, 0xa2, 0x5d, 0xb5, 0x5f, 0xfa, 0xbc, 0x5d, 0x33, 0xb6, 0x37, 0xb4, 0x5d, 0xdf, 0xfb,
	0xab, 0x01, 0x4b, 0x87, 0xee, 0xad, 0xf3, 0x92, 0xa5, 0x66, 0x18, 0xc8, 0x73, 0x98, 0xc1, 0x1d,
	0x4d, 0xae, 0xd9, 0x6e, 0x28, 0xec, 0x7d, 0x8f, 0x14, 0x55, 0xf6, 0x1e, 0xfd, 0x5b, 0x3f, 0xfe,
	0xf1, 0xe7, 0xbb, 0x6a, 0xc7, 0x5f, 0xc6, 0x97, 0x51, 0xf6, 0x72, 0xda, 0x8d, 0x0d, 0xe8, 0x71,
	0x65, 0x8b, 0xbc, 0x86, 0x59, 0xb7, 0x4b, 0xc9, 0xea, 0x95, 0x5f, 0x9b, 0xa7, 0xe6, 0x51, 0xe4,
	0x95, 0x36, 0x6e, 0x4e, 0x7c, 0x13, 0x89, 0xd7, 0xc8, 0xf5, 0x32, 0x71, 0xe2, 0xc8, 0xbe, 0x81,
	0x66, 0x36, 0x6c, 0x53, 0x89, 0xed, 0x4f, 0xc0, 0xe5, 0x99, 0xcc, 0x42, 0x26, 0xab, 0x65, 0xe6,
	0x93, 0x8c, 0x8e, 0xc2, 0x42, 0x71, 0x75, 0x92, 0xce, 0x84, 0x65, 0x6b, 0x0b, 0xb2, 0x3e, 0x69,
	0x0d, 0x5b, 0x27, 0x37, 0xd0, 0xc9, 0x2a, 0x59, 0x29, 0x3b, 0x71, 0xbf, 0x0a, 0x11, 0x2c, 0x14,
	0x27, 0xd5, 0xb9, 0x98, 0x30, 0xbc, 0xde, 0x94, 0xdc, 0xfc, 0xbb, 0xc8, 0x7f, 0xdb, 0xf7, 0xca,
	0xfc, 0xc5, 0x25, 0x62, 0xca, 0xff, 0x73, 0x05, 0x96, 0x27, 0x8c, 0x21, 0xb9, 0x8d, 0x0e, 0xa7,
	0x4f, 0xb5, 0xb7, 0x39, 0x1d, 0xe0, 0x32, 0xdc, 0xc6, 0x08, 0xee, 0xfb, 0xfe, 0xf4, 0x08, 0xb6,
	0x43, 0x7b, 0xde, 0x44, 0x72, 0x01, 0xe4, 0xea, 0x6c, 0x91, 0x5b, 0xe8, 0x66, 0xea, 0xd0, 0x4d,
	0x4d, 0xff, 0x23, 0x74, 0x7e, 0xcf, 0xbf, 0xf3, 0x2f, 0xce, 0x07, 0xc8, 0x6a, 0x7c, 0xff, 0x54,
	0x81, 0x8d, 0x03, 0xa6, 0x5f, 0xb3, 0x94, 0x0f, 0xde, 0x72, 0x11, 0x5d, 0x7a, 0x06, 0x93, 0x0d,
	0x7b, 0x8f, 0x13, 0xdf, 0xe1, 0xde, 0x8d, 0xc9, 0x46, 0x57, 0x85, 0x47, 0x18, 0xc8, 0x5d, 0x7f,
	0xb3, 0x1c, 0xc8, 0x19, 0xba, 0xda, 0x8e, 0xb6, 0xd3, 0xec, 0xc4, 0xe3, 0xca, 0xd6, 0x49, 0x03,
	0xb3, 0xf8, 0xe4, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb7, 0x43, 0x1d, 0x53, 0x62, 0x0c, 0x00,
	0x00,
}
