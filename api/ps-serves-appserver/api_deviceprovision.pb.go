// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.2
// source: api_deviceprovision.proto

package snapi

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetMfgByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManufacturerId int64 `protobuf:"zigzag64,1,opt,name=manufacturerId,proto3" json:"manufacturerId,omitempty"`
}

func (x *GetMfgByIdRequest) Reset() {
	*x = GetMfgByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMfgByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMfgByIdRequest) ProtoMessage() {}

func (x *GetMfgByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMfgByIdRequest.ProtoReflect.Descriptor instead.
func (*GetMfgByIdRequest) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{0}
}

func (x *GetMfgByIdRequest) GetManufacturerId() int64 {
	if x != nil {
		return x.ManufacturerId
	}
	return 0
}

type GetMfgByNameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetMfgByNameRequest) Reset() {
	*x = GetMfgByNameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMfgByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMfgByNameRequest) ProtoMessage() {}

func (x *GetMfgByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMfgByNameRequest.ProtoReflect.Descriptor instead.
func (*GetMfgByNameRequest) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{1}
}

func (x *GetMfgByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetMfgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManufacturerId int64  `protobuf:"zigzag64,1,opt,name=manufacturerId,proto3" json:"manufacturerId,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Address        string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *GetMfgResponse) Reset() {
	*x = GetMfgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMfgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMfgResponse) ProtoMessage() {}

func (x *GetMfgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMfgResponse.ProtoReflect.Descriptor instead.
func (*GetMfgResponse) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{2}
}

func (x *GetMfgResponse) GetManufacturerId() int64 {
	if x != nil {
		return x.ManufacturerId
	}
	return 0
}

func (x *GetMfgResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetMfgResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreateMfgRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *CreateMfgRequest) Reset() {
	*x = CreateMfgRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMfgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMfgRequest) ProtoMessage() {}

func (x *CreateMfgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMfgRequest.ProtoReflect.Descriptor instead.
func (*CreateMfgRequest) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{3}
}

func (x *CreateMfgRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateMfgRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type CreateMfgResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManufacturerId int64 `protobuf:"zigzag64,1,opt,name=manufacturerId,proto3" json:"manufacturerId,omitempty"`
}

func (x *CreateMfgResponse) Reset() {
	*x = CreateMfgResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMfgResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMfgResponse) ProtoMessage() {}

func (x *CreateMfgResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMfgResponse.ProtoReflect.Descriptor instead.
func (*CreateMfgResponse) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{4}
}

func (x *CreateMfgResponse) GetManufacturerId() int64 {
	if x != nil {
		return x.ManufacturerId
	}
	return 0
}

type IsDeviceExistRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvisionId string `protobuf:"bytes,1,opt,name=provisionId,proto3" json:"provisionId,omitempty"`
}

func (x *IsDeviceExistRequest) Reset() {
	*x = IsDeviceExistRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeviceExistRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeviceExistRequest) ProtoMessage() {}

func (x *IsDeviceExistRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeviceExistRequest.ProtoReflect.Descriptor instead.
func (*IsDeviceExistRequest) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{5}
}

func (x *IsDeviceExistRequest) GetProvisionId() string {
	if x != nil {
		return x.ProvisionId
	}
	return ""
}

type IsDeviceExistResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exist bool `protobuf:"varint,1,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (x *IsDeviceExistResponse) Reset() {
	*x = IsDeviceExistResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsDeviceExistResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDeviceExistResponse) ProtoMessage() {}

func (x *IsDeviceExistResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDeviceExistResponse.ProtoReflect.Descriptor instead.
func (*IsDeviceExistResponse) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{6}
}

func (x *IsDeviceExistResponse) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

type CreateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvisionId string `protobuf:"bytes,1,opt,name=provisionId,proto3" json:"provisionId,omitempty"`
	// Hash value of provisionId, hex string, lower case, no 0x prefix
	ProvisionIdHash string `protobuf:"bytes,2,opt,name=provisionIdHash,proto3" json:"provisionIdHash,omitempty"`
	ManufacturerId  int64  `protobuf:"zigzag64,3,opt,name=manufacturerId,proto3" json:"manufacturerId,omitempty"`
	Model           string `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	SerialNumber    string `protobuf:"bytes,5,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	FixedDevEUI     bool   `protobuf:"varint,6,opt,name=fixedDevEUI,proto3" json:"fixedDevEUI,omitempty"`
	DevEUI          []byte `protobuf:"bytes,7,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{7}
}

func (x *CreateDeviceRequest) GetProvisionId() string {
	if x != nil {
		return x.ProvisionId
	}
	return ""
}

func (x *CreateDeviceRequest) GetProvisionIdHash() string {
	if x != nil {
		return x.ProvisionIdHash
	}
	return ""
}

func (x *CreateDeviceRequest) GetManufacturerId() int64 {
	if x != nil {
		return x.ManufacturerId
	}
	return 0
}

func (x *CreateDeviceRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateDeviceRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *CreateDeviceRequest) GetFixedDevEUI() bool {
	if x != nil {
		return x.FixedDevEUI
	}
	return false
}

func (x *CreateDeviceRequest) GetDevEUI() []byte {
	if x != nil {
		return x.DevEUI
	}
	return nil
}

type CreateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateDeviceResponse) Reset() {
	*x = CreateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceResponse) ProtoMessage() {}

func (x *CreateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{8}
}

type GetDeviceByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvisionId string `protobuf:"bytes,1,opt,name=provisionId,proto3" json:"provisionId,omitempty"`
}

func (x *GetDeviceByIdRequest) Reset() {
	*x = GetDeviceByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceByIdRequest) ProtoMessage() {}

func (x *GetDeviceByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceByIdRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceByIdRequest) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{9}
}

func (x *GetDeviceByIdRequest) GetProvisionId() string {
	if x != nil {
		return x.ProvisionId
	}
	return ""
}

type GetDeviceByIdHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvisionIdHash string `protobuf:"bytes,1,opt,name=provisionIdHash,proto3" json:"provisionIdHash,omitempty"`
}

func (x *GetDeviceByIdHashRequest) Reset() {
	*x = GetDeviceByIdHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceByIdHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceByIdHashRequest) ProtoMessage() {}

func (x *GetDeviceByIdHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceByIdHashRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceByIdHashRequest) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{10}
}

func (x *GetDeviceByIdHashRequest) GetProvisionIdHash() string {
	if x != nil {
		return x.ProvisionIdHash
	}
	return ""
}

type GetDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvisionId string `protobuf:"bytes,1,opt,name=provisionId,proto3" json:"provisionId,omitempty"`
	// Hash value of provisionId, hex string, lower case, no 0x prefix
	ProvisionIdHash string               `protobuf:"bytes,2,opt,name=provisionIdHash,proto3" json:"provisionIdHash,omitempty"`
	ManufacturerId  int64                `protobuf:"zigzag64,3,opt,name=manufacturerId,proto3" json:"manufacturerId,omitempty"`
	Model           string               `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	SerialNumber    string               `protobuf:"bytes,5,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	FixedDevEUI     bool                 `protobuf:"varint,6,opt,name=fixedDevEUI,proto3" json:"fixedDevEUI,omitempty"`
	DevEUI          []byte               `protobuf:"bytes,7,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	AppKey          []byte               `protobuf:"bytes,8,opt,name=appKey,proto3" json:"appKey,omitempty"`
	AppEUI          []byte               `protobuf:"bytes,9,opt,name=appEUI,proto3" json:"appEUI,omitempty"`
	NwkKey          []byte               `protobuf:"bytes,10,opt,name=nwkKey,proto3" json:"nwkKey,omitempty"`
	Status          string               `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Server          string               `protobuf:"bytes,12,opt,name=server,proto3" json:"server,omitempty"`
	TimeCreated     *timestamp.Timestamp `protobuf:"bytes,13,opt,name=timeCreated,proto3" json:"timeCreated,omitempty"`
	TimeProvisioned *timestamp.Timestamp `protobuf:"bytes,14,opt,name=timeProvisioned,proto3" json:"timeProvisioned,omitempty"`
	TimeAddToServer *timestamp.Timestamp `protobuf:"bytes,15,opt,name=timeAddToServer,proto3" json:"timeAddToServer,omitempty"`
}

func (x *GetDeviceResponse) Reset() {
	*x = GetDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceResponse) ProtoMessage() {}

func (x *GetDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceResponse) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{11}
}

func (x *GetDeviceResponse) GetProvisionId() string {
	if x != nil {
		return x.ProvisionId
	}
	return ""
}

func (x *GetDeviceResponse) GetProvisionIdHash() string {
	if x != nil {
		return x.ProvisionIdHash
	}
	return ""
}

func (x *GetDeviceResponse) GetManufacturerId() int64 {
	if x != nil {
		return x.ManufacturerId
	}
	return 0
}

func (x *GetDeviceResponse) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *GetDeviceResponse) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *GetDeviceResponse) GetFixedDevEUI() bool {
	if x != nil {
		return x.FixedDevEUI
	}
	return false
}

func (x *GetDeviceResponse) GetDevEUI() []byte {
	if x != nil {
		return x.DevEUI
	}
	return nil
}

func (x *GetDeviceResponse) GetAppKey() []byte {
	if x != nil {
		return x.AppKey
	}
	return nil
}

func (x *GetDeviceResponse) GetAppEUI() []byte {
	if x != nil {
		return x.AppEUI
	}
	return nil
}

func (x *GetDeviceResponse) GetNwkKey() []byte {
	if x != nil {
		return x.NwkKey
	}
	return nil
}

func (x *GetDeviceResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDeviceResponse) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *GetDeviceResponse) GetTimeCreated() *timestamp.Timestamp {
	if x != nil {
		return x.TimeCreated
	}
	return nil
}

func (x *GetDeviceResponse) GetTimeProvisioned() *timestamp.Timestamp {
	if x != nil {
		return x.TimeProvisioned
	}
	return nil
}

func (x *GetDeviceResponse) GetTimeAddToServer() *timestamp.Timestamp {
	if x != nil {
		return x.TimeAddToServer
	}
	return nil
}

type UpdateDeviceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvisionId    string `protobuf:"bytes,1,opt,name=provisionId,proto3" json:"provisionId,omitempty"`
	ManufacturerId int64  `protobuf:"zigzag64,2,opt,name=manufacturerId,proto3" json:"manufacturerId,omitempty"`
	Model          string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	SerialNumber   string `protobuf:"bytes,4,opt,name=serialNumber,proto3" json:"serialNumber,omitempty"`
	FixedDevEUI    bool   `protobuf:"varint,5,opt,name=fixedDevEUI,proto3" json:"fixedDevEUI,omitempty"`
	DevEUI         []byte `protobuf:"bytes,6,opt,name=devEUI,proto3" json:"devEUI,omitempty"` // 8 bytes binary data;
	Status         string `protobuf:"bytes,7,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *UpdateDeviceInfoRequest) Reset() {
	*x = UpdateDeviceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceInfoRequest) ProtoMessage() {}

func (x *UpdateDeviceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateDeviceInfoRequest) GetProvisionId() string {
	if x != nil {
		return x.ProvisionId
	}
	return ""
}

func (x *UpdateDeviceInfoRequest) GetManufacturerId() int64 {
	if x != nil {
		return x.ManufacturerId
	}
	return 0
}

func (x *UpdateDeviceInfoRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *UpdateDeviceInfoRequest) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *UpdateDeviceInfoRequest) GetFixedDevEUI() bool {
	if x != nil {
		return x.FixedDevEUI
	}
	return false
}

func (x *UpdateDeviceInfoRequest) GetDevEUI() []byte {
	if x != nil {
		return x.DevEUI
	}
	return nil
}

func (x *UpdateDeviceInfoRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type SetDeviceProvisionedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvisionId string `protobuf:"bytes,1,opt,name=provisionId,proto3" json:"provisionId,omitempty"`
	DevEUI      []byte `protobuf:"bytes,2,opt,name=devEUI,proto3" json:"devEUI,omitempty"` // 8 bytes binary data
	AppEUI      []byte `protobuf:"bytes,3,opt,name=appEUI,proto3" json:"appEUI,omitempty"` // 8 bytes binary data
	AppKey      []byte `protobuf:"bytes,4,opt,name=appKey,proto3" json:"appKey,omitempty"` // 16 bytes binary data
	NwkKey      []byte `protobuf:"bytes,5,opt,name=nwkKey,proto3" json:"nwkKey,omitempty"` // 16 bytes binary data
}

func (x *SetDeviceProvisionedRequest) Reset() {
	*x = SetDeviceProvisionedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceProvisionedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceProvisionedRequest) ProtoMessage() {}

func (x *SetDeviceProvisionedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceProvisionedRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceProvisionedRequest) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{13}
}

func (x *SetDeviceProvisionedRequest) GetProvisionId() string {
	if x != nil {
		return x.ProvisionId
	}
	return ""
}

func (x *SetDeviceProvisionedRequest) GetDevEUI() []byte {
	if x != nil {
		return x.DevEUI
	}
	return nil
}

func (x *SetDeviceProvisionedRequest) GetAppEUI() []byte {
	if x != nil {
		return x.AppEUI
	}
	return nil
}

func (x *SetDeviceProvisionedRequest) GetAppKey() []byte {
	if x != nil {
		return x.AppKey
	}
	return nil
}

func (x *SetDeviceProvisionedRequest) GetNwkKey() []byte {
	if x != nil {
		return x.NwkKey
	}
	return nil
}

type SetDeviceServerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProvisionId string `protobuf:"bytes,1,opt,name=provisionId,proto3" json:"provisionId,omitempty"`
	Server      string `protobuf:"bytes,2,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *SetDeviceServerRequest) Reset() {
	*x = SetDeviceServerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceServerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceServerRequest) ProtoMessage() {}

func (x *SetDeviceServerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceServerRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceServerRequest) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{14}
}

func (x *SetDeviceServerRequest) GetProvisionId() string {
	if x != nil {
		return x.ProvisionId
	}
	return ""
}

func (x *SetDeviceServerRequest) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

type UpdateDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateDeviceResponse) Reset() {
	*x = UpdateDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_deviceprovision_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceResponse) ProtoMessage() {}

func (x *UpdateDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_deviceprovision_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceResponse.ProtoReflect.Descriptor instead.
func (*UpdateDeviceResponse) Descriptor() ([]byte, []int) {
	return file_api_deviceprovision_proto_rawDescGZIP(), []int{15}
}

var File_api_deviceprovision_proto protoreflect.FileDescriptor

var file_api_deviceprovision_proto_rawDesc = []byte{
	0x0a, 0x19, 0x61, 0x70, 0x69, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x6e, 0x61,
	0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x66, 0x67, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12,
	0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x29, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x66, 0x67, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x66, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4d, 0x66, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x66, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x3b, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x66, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x12, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x38, 0x0a, 0x14, 0x49, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x15,
	0x49, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x22, 0xfd, 0x01, 0x0a, 0x13,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a,
	0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x76,
	0x45, 0x55, 0x49, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49, 0x22, 0x16, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x38, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x44, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x22, 0xbd, 0x04, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x6d,
	0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76,
	0x45, 0x55, 0x49, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55,
	0x49, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x45, 0x55, 0x49, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x45, 0x55,
	0x49, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x77, 0x6b, 0x4b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x6e, 0x77, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x69,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x44, 0x0a,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x22, 0xef, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44, 0x65, 0x76, 0x45,
	0x55, 0x49, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x45, 0x55, 0x49, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55,
	0x49, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x45, 0x55, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x61, 0x70, 0x70, 0x45, 0x55, 0x49, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b, 0x65, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x77, 0x6b, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x6e, 0x77, 0x6b, 0x4b, 0x65, 0x79, 0x22, 0x52, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x16, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x94, 0x06, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x42, 0x79, 0x49, 0x44, 0x12, 0x18,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x66, 0x67, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x66, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x66, 0x67, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x66, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x72, 0x12, 0x17, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x66, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x66, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x49, 0x73, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x73,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x73, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73,
	0x6e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4e, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79,
	0x49, 0x44, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x79, 0x49, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4f, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x2e, 0x73, 0x6e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1d,
	0x2e, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x73, 0x6e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x38, 0x5a, 0x36, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x61, 0x70, 0x70, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x69, 0x3b, 0x73,
	0x6e, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_deviceprovision_proto_rawDescOnce sync.Once
	file_api_deviceprovision_proto_rawDescData = file_api_deviceprovision_proto_rawDesc
)

func file_api_deviceprovision_proto_rawDescGZIP() []byte {
	file_api_deviceprovision_proto_rawDescOnce.Do(func() {
		file_api_deviceprovision_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_deviceprovision_proto_rawDescData)
	})
	return file_api_deviceprovision_proto_rawDescData
}

var file_api_deviceprovision_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_api_deviceprovision_proto_goTypes = []interface{}{
	(*GetMfgByIdRequest)(nil),           // 0: snapi.GetMfgByIdRequest
	(*GetMfgByNameRequest)(nil),         // 1: snapi.GetMfgByNameRequest
	(*GetMfgResponse)(nil),              // 2: snapi.GetMfgResponse
	(*CreateMfgRequest)(nil),            // 3: snapi.CreateMfgRequest
	(*CreateMfgResponse)(nil),           // 4: snapi.CreateMfgResponse
	(*IsDeviceExistRequest)(nil),        // 5: snapi.IsDeviceExistRequest
	(*IsDeviceExistResponse)(nil),       // 6: snapi.IsDeviceExistResponse
	(*CreateDeviceRequest)(nil),         // 7: snapi.CreateDeviceRequest
	(*CreateDeviceResponse)(nil),        // 8: snapi.CreateDeviceResponse
	(*GetDeviceByIdRequest)(nil),        // 9: snapi.GetDeviceByIdRequest
	(*GetDeviceByIdHashRequest)(nil),    // 10: snapi.GetDeviceByIdHashRequest
	(*GetDeviceResponse)(nil),           // 11: snapi.GetDeviceResponse
	(*UpdateDeviceInfoRequest)(nil),     // 12: snapi.UpdateDeviceInfoRequest
	(*SetDeviceProvisionedRequest)(nil), // 13: snapi.SetDeviceProvisionedRequest
	(*SetDeviceServerRequest)(nil),      // 14: snapi.SetDeviceServerRequest
	(*UpdateDeviceResponse)(nil),        // 15: snapi.UpdateDeviceResponse
	(*timestamp.Timestamp)(nil),         // 16: google.protobuf.Timestamp
}
var file_api_deviceprovision_proto_depIdxs = []int32{
	16, // 0: snapi.GetDeviceResponse.timeCreated:type_name -> google.protobuf.Timestamp
	16, // 1: snapi.GetDeviceResponse.timeProvisioned:type_name -> google.protobuf.Timestamp
	16, // 2: snapi.GetDeviceResponse.timeAddToServer:type_name -> google.protobuf.Timestamp
	0,  // 3: snapi.DeviceProvision.GetManufacturerByID:input_type -> snapi.GetMfgByIdRequest
	1,  // 4: snapi.DeviceProvision.GetManufacturerByName:input_type -> snapi.GetMfgByNameRequest
	3,  // 5: snapi.DeviceProvision.CreateManufacturer:input_type -> snapi.CreateMfgRequest
	5,  // 6: snapi.DeviceProvision.IsDeviceExist:input_type -> snapi.IsDeviceExistRequest
	7,  // 7: snapi.DeviceProvision.CreateDevice:input_type -> snapi.CreateDeviceRequest
	9,  // 8: snapi.DeviceProvision.GetDeviceByID:input_type -> snapi.GetDeviceByIdRequest
	10, // 9: snapi.DeviceProvision.GetDeviceByIDHash:input_type -> snapi.GetDeviceByIdHashRequest
	12, // 10: snapi.DeviceProvision.UpdateDeviceInfo:input_type -> snapi.UpdateDeviceInfoRequest
	13, // 11: snapi.DeviceProvision.SetDeviceProvisioned:input_type -> snapi.SetDeviceProvisionedRequest
	14, // 12: snapi.DeviceProvision.SetDeviceServer:input_type -> snapi.SetDeviceServerRequest
	2,  // 13: snapi.DeviceProvision.GetManufacturerByID:output_type -> snapi.GetMfgResponse
	2,  // 14: snapi.DeviceProvision.GetManufacturerByName:output_type -> snapi.GetMfgResponse
	4,  // 15: snapi.DeviceProvision.CreateManufacturer:output_type -> snapi.CreateMfgResponse
	6,  // 16: snapi.DeviceProvision.IsDeviceExist:output_type -> snapi.IsDeviceExistResponse
	8,  // 17: snapi.DeviceProvision.CreateDevice:output_type -> snapi.CreateDeviceResponse
	11, // 18: snapi.DeviceProvision.GetDeviceByID:output_type -> snapi.GetDeviceResponse
	11, // 19: snapi.DeviceProvision.GetDeviceByIDHash:output_type -> snapi.GetDeviceResponse
	15, // 20: snapi.DeviceProvision.UpdateDeviceInfo:output_type -> snapi.UpdateDeviceResponse
	15, // 21: snapi.DeviceProvision.SetDeviceProvisioned:output_type -> snapi.UpdateDeviceResponse
	15, // 22: snapi.DeviceProvision.SetDeviceServer:output_type -> snapi.UpdateDeviceResponse
	13, // [13:23] is the sub-list for method output_type
	3,  // [3:13] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_api_deviceprovision_proto_init() }
func file_api_deviceprovision_proto_init() {
	if File_api_deviceprovision_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_deviceprovision_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMfgByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMfgByNameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMfgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMfgRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMfgResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeviceExistRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsDeviceExistResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceByIdHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceProvisionedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceServerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_deviceprovision_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_deviceprovision_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_deviceprovision_proto_goTypes,
		DependencyIndexes: file_api_deviceprovision_proto_depIdxs,
		MessageInfos:      file_api_deviceprovision_proto_msgTypes,
	}.Build()
	File_api_deviceprovision_proto = out.File
	file_api_deviceprovision_proto_rawDesc = nil
	file_api_deviceprovision_proto_goTypes = nil
	file_api_deviceprovision_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceProvisionClient is the client API for DeviceProvision service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceProvisionClient interface {
	// GetManufacturerByID - Get the manufacturer info by ID.
	GetManufacturerByID(ctx context.Context, in *GetMfgByIdRequest, opts ...grpc.CallOption) (*GetMfgResponse, error)
	// GetManufacturerByName - Get the manufacturer info by name.
	GetManufacturerByName(ctx context.Context, in *GetMfgByNameRequest, opts ...grpc.CallOption) (*GetMfgResponse, error)
	// CreateManufacturer - Create a manufacturer.
	CreateManufacturer(ctx context.Context, in *CreateMfgRequest, opts ...grpc.CallOption) (*CreateMfgResponse, error)
	// IsDeviceExist - Check whether a device with the given serial number is existing or not.
	IsDeviceExist(ctx context.Context, in *IsDeviceExistRequest, opts ...grpc.CallOption) (*IsDeviceExistResponse, error)
	// CreateDevice - Create a device. If the device exists, it will return an error.
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	// GetDeviceByID - Get the device information by a given Provision ID.
	GetDeviceByID(ctx context.Context, in *GetDeviceByIdRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	// GetDeviceByIDHash - Get the device information by a given hashed Provision ID.
	GetDeviceByIDHash(ctx context.Context, in *GetDeviceByIdHashRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	// UpdateDeviceInfo - The device that matches the provided Provision ID will be updated.
	//                    For the devEUI field, it only get update if the data length is correct.
	UpdateDeviceInfo(ctx context.Context, in *UpdateDeviceInfoRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
	// SetDeviceProvisioned - Set device provisioned information. For the bytes field, it only get update if the data length is correct.
	SetDeviceProvisioned(ctx context.Context, in *SetDeviceProvisionedRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
	// SetDeviceServer - Set the server information of the device added.
	SetDeviceServer(ctx context.Context, in *SetDeviceServerRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
}

type deviceProvisionClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceProvisionClient(cc grpc.ClientConnInterface) DeviceProvisionClient {
	return &deviceProvisionClient{cc}
}

func (c *deviceProvisionClient) GetManufacturerByID(ctx context.Context, in *GetMfgByIdRequest, opts ...grpc.CallOption) (*GetMfgResponse, error) {
	out := new(GetMfgResponse)
	err := c.cc.Invoke(ctx, "/snapi.DeviceProvision/GetManufacturerByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionClient) GetManufacturerByName(ctx context.Context, in *GetMfgByNameRequest, opts ...grpc.CallOption) (*GetMfgResponse, error) {
	out := new(GetMfgResponse)
	err := c.cc.Invoke(ctx, "/snapi.DeviceProvision/GetManufacturerByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionClient) CreateManufacturer(ctx context.Context, in *CreateMfgRequest, opts ...grpc.CallOption) (*CreateMfgResponse, error) {
	out := new(CreateMfgResponse)
	err := c.cc.Invoke(ctx, "/snapi.DeviceProvision/CreateManufacturer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionClient) IsDeviceExist(ctx context.Context, in *IsDeviceExistRequest, opts ...grpc.CallOption) (*IsDeviceExistResponse, error) {
	out := new(IsDeviceExistResponse)
	err := c.cc.Invoke(ctx, "/snapi.DeviceProvision/IsDeviceExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, "/snapi.DeviceProvision/CreateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionClient) GetDeviceByID(ctx context.Context, in *GetDeviceByIdRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, "/snapi.DeviceProvision/GetDeviceByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionClient) GetDeviceByIDHash(ctx context.Context, in *GetDeviceByIdHashRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, "/snapi.DeviceProvision/GetDeviceByIDHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionClient) UpdateDeviceInfo(ctx context.Context, in *UpdateDeviceInfoRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := c.cc.Invoke(ctx, "/snapi.DeviceProvision/UpdateDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionClient) SetDeviceProvisioned(ctx context.Context, in *SetDeviceProvisionedRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := c.cc.Invoke(ctx, "/snapi.DeviceProvision/SetDeviceProvisioned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceProvisionClient) SetDeviceServer(ctx context.Context, in *SetDeviceServerRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := c.cc.Invoke(ctx, "/snapi.DeviceProvision/SetDeviceServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceProvisionServer is the server API for DeviceProvision service.
type DeviceProvisionServer interface {
	// GetManufacturerByID - Get the manufacturer info by ID.
	GetManufacturerByID(context.Context, *GetMfgByIdRequest) (*GetMfgResponse, error)
	// GetManufacturerByName - Get the manufacturer info by name.
	GetManufacturerByName(context.Context, *GetMfgByNameRequest) (*GetMfgResponse, error)
	// CreateManufacturer - Create a manufacturer.
	CreateManufacturer(context.Context, *CreateMfgRequest) (*CreateMfgResponse, error)
	// IsDeviceExist - Check whether a device with the given serial number is existing or not.
	IsDeviceExist(context.Context, *IsDeviceExistRequest) (*IsDeviceExistResponse, error)
	// CreateDevice - Create a device. If the device exists, it will return an error.
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	// GetDeviceByID - Get the device information by a given Provision ID.
	GetDeviceByID(context.Context, *GetDeviceByIdRequest) (*GetDeviceResponse, error)
	// GetDeviceByIDHash - Get the device information by a given hashed Provision ID.
	GetDeviceByIDHash(context.Context, *GetDeviceByIdHashRequest) (*GetDeviceResponse, error)
	// UpdateDeviceInfo - The device that matches the provided Provision ID will be updated.
	//                    For the devEUI field, it only get update if the data length is correct.
	UpdateDeviceInfo(context.Context, *UpdateDeviceInfoRequest) (*UpdateDeviceResponse, error)
	// SetDeviceProvisioned - Set device provisioned information. For the bytes field, it only get update if the data length is correct.
	SetDeviceProvisioned(context.Context, *SetDeviceProvisionedRequest) (*UpdateDeviceResponse, error)
	// SetDeviceServer - Set the server information of the device added.
	SetDeviceServer(context.Context, *SetDeviceServerRequest) (*UpdateDeviceResponse, error)
}

// UnimplementedDeviceProvisionServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceProvisionServer struct {
}

func (*UnimplementedDeviceProvisionServer) GetManufacturerByID(context.Context, *GetMfgByIdRequest) (*GetMfgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManufacturerByID not implemented")
}
func (*UnimplementedDeviceProvisionServer) GetManufacturerByName(context.Context, *GetMfgByNameRequest) (*GetMfgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManufacturerByName not implemented")
}
func (*UnimplementedDeviceProvisionServer) CreateManufacturer(context.Context, *CreateMfgRequest) (*CreateMfgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateManufacturer not implemented")
}
func (*UnimplementedDeviceProvisionServer) IsDeviceExist(context.Context, *IsDeviceExistRequest) (*IsDeviceExistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeviceExist not implemented")
}
func (*UnimplementedDeviceProvisionServer) CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (*UnimplementedDeviceProvisionServer) GetDeviceByID(context.Context, *GetDeviceByIdRequest) (*GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceByID not implemented")
}
func (*UnimplementedDeviceProvisionServer) GetDeviceByIDHash(context.Context, *GetDeviceByIdHashRequest) (*GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceByIDHash not implemented")
}
func (*UnimplementedDeviceProvisionServer) UpdateDeviceInfo(context.Context, *UpdateDeviceInfoRequest) (*UpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceInfo not implemented")
}
func (*UnimplementedDeviceProvisionServer) SetDeviceProvisioned(context.Context, *SetDeviceProvisionedRequest) (*UpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceProvisioned not implemented")
}
func (*UnimplementedDeviceProvisionServer) SetDeviceServer(context.Context, *SetDeviceServerRequest) (*UpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceServer not implemented")
}

func RegisterDeviceProvisionServer(s *grpc.Server, srv DeviceProvisionServer) {
	s.RegisterService(&_DeviceProvision_serviceDesc, srv)
}

func _DeviceProvision_GetManufacturerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMfgByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServer).GetManufacturerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapi.DeviceProvision/GetManufacturerByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServer).GetManufacturerByID(ctx, req.(*GetMfgByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvision_GetManufacturerByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMfgByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServer).GetManufacturerByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapi.DeviceProvision/GetManufacturerByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServer).GetManufacturerByName(ctx, req.(*GetMfgByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvision_CreateManufacturer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMfgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServer).CreateManufacturer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapi.DeviceProvision/CreateManufacturer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServer).CreateManufacturer(ctx, req.(*CreateMfgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvision_IsDeviceExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeviceExistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServer).IsDeviceExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapi.DeviceProvision/IsDeviceExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServer).IsDeviceExist(ctx, req.(*IsDeviceExistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvision_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapi.DeviceProvision/CreateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvision_GetDeviceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServer).GetDeviceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapi.DeviceProvision/GetDeviceByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServer).GetDeviceByID(ctx, req.(*GetDeviceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvision_GetDeviceByIDHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceByIdHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServer).GetDeviceByIDHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapi.DeviceProvision/GetDeviceByIDHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServer).GetDeviceByIDHash(ctx, req.(*GetDeviceByIdHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvision_UpdateDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServer).UpdateDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapi.DeviceProvision/UpdateDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServer).UpdateDeviceInfo(ctx, req.(*UpdateDeviceInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvision_SetDeviceProvisioned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceProvisionedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServer).SetDeviceProvisioned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapi.DeviceProvision/SetDeviceProvisioned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServer).SetDeviceProvisioned(ctx, req.(*SetDeviceProvisionedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceProvision_SetDeviceServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceProvisionServer).SetDeviceServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snapi.DeviceProvision/SetDeviceServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceProvisionServer).SetDeviceServer(ctx, req.(*SetDeviceServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceProvision_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snapi.DeviceProvision",
	HandlerType: (*DeviceProvisionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetManufacturerByID",
			Handler:    _DeviceProvision_GetManufacturerByID_Handler,
		},
		{
			MethodName: "GetManufacturerByName",
			Handler:    _DeviceProvision_GetManufacturerByName_Handler,
		},
		{
			MethodName: "CreateManufacturer",
			Handler:    _DeviceProvision_CreateManufacturer_Handler,
		},
		{
			MethodName: "IsDeviceExist",
			Handler:    _DeviceProvision_IsDeviceExist_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceProvision_CreateDevice_Handler,
		},
		{
			MethodName: "GetDeviceByID",
			Handler:    _DeviceProvision_GetDeviceByID_Handler,
		},
		{
			MethodName: "GetDeviceByIDHash",
			Handler:    _DeviceProvision_GetDeviceByIDHash_Handler,
		},
		{
			MethodName: "UpdateDeviceInfo",
			Handler:    _DeviceProvision_UpdateDeviceInfo_Handler,
		},
		{
			MethodName: "SetDeviceProvisioned",
			Handler:    _DeviceProvision_SetDeviceProvisioned_Handler,
		},
		{
			MethodName: "SetDeviceServer",
			Handler:    _DeviceProvision_SetDeviceServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_deviceprovision.proto",
}
